// KBandIPsubAffine_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module KBandIPsubAffine_mm_interconnect_1 (
		input  wire         clk_0_clk_clk,                                    //                                  clk_0_clk.clk
		input  wire         KBandInput_1_reset_n_reset_bridge_in_reset_reset, // KBandInput_1_reset_n_reset_bridge_in_reset.reset
		input  wire [30:0]  KBandInput_1_mm_read_address,                     //                       KBandInput_1_mm_read.address
		output wire         KBandInput_1_mm_read_waitrequest,                 //                                           .waitrequest
		input  wire [3:0]   KBandInput_1_mm_read_byteenable,                  //                                           .byteenable
		input  wire         KBandInput_1_mm_read_read,                        //                                           .read
		output wire [31:0]  KBandInput_1_mm_read_readdata,                    //                                           .readdata
		output wire         KBandInput_1_mm_read_readdatavalid,               //                                           .readdatavalid
		input  wire [30:0]  KBandOutput_mm_write_address,                     //                       KBandOutput_mm_write.address
		output wire         KBandOutput_mm_write_waitrequest,                 //                                           .waitrequest
		input  wire [15:0]  KBandOutput_mm_write_byteenable,                  //                                           .byteenable
		input  wire         KBandOutput_mm_write_write,                       //                                           .write
		input  wire [127:0] KBandOutput_mm_write_writedata,                   //                                           .writedata
		output wire [29:0]  DDR_s0_address,                                   //                                     DDR_s0.address
		output wire         DDR_s0_write,                                     //                                           .write
		output wire         DDR_s0_read,                                      //                                           .read
		input  wire [127:0] DDR_s0_readdata,                                  //                                           .readdata
		output wire [127:0] DDR_s0_writedata,                                 //                                           .writedata
		output wire [4:0]   DDR_s0_burstcount,                                //                                           .burstcount
		output wire [15:0]  DDR_s0_byteenable,                                //                                           .byteenable
		input  wire         DDR_s0_readdatavalid,                             //                                           .readdatavalid
		input  wire         DDR_s0_waitrequest,                               //                                           .waitrequest
		output wire         DDR_s0_debugaccess                                //                                           .debugaccess
	);

	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_waitrequest;   // KBandInput_1_mm_read_agent:av_waitrequest -> KBandInput_1_mm_read_translator:uav_waitrequest
	wire   [31:0] kbandinput_1_mm_read_translator_avalon_universal_master_0_readdata;      // KBandInput_1_mm_read_agent:av_readdata -> KBandInput_1_mm_read_translator:uav_readdata
	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_debugaccess;   // KBandInput_1_mm_read_translator:uav_debugaccess -> KBandInput_1_mm_read_agent:av_debugaccess
	wire   [30:0] kbandinput_1_mm_read_translator_avalon_universal_master_0_address;       // KBandInput_1_mm_read_translator:uav_address -> KBandInput_1_mm_read_agent:av_address
	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_read;          // KBandInput_1_mm_read_translator:uav_read -> KBandInput_1_mm_read_agent:av_read
	wire    [3:0] kbandinput_1_mm_read_translator_avalon_universal_master_0_byteenable;    // KBandInput_1_mm_read_translator:uav_byteenable -> KBandInput_1_mm_read_agent:av_byteenable
	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_readdatavalid; // KBandInput_1_mm_read_agent:av_readdatavalid -> KBandInput_1_mm_read_translator:uav_readdatavalid
	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_lock;          // KBandInput_1_mm_read_translator:uav_lock -> KBandInput_1_mm_read_agent:av_lock
	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_write;         // KBandInput_1_mm_read_translator:uav_write -> KBandInput_1_mm_read_agent:av_write
	wire   [31:0] kbandinput_1_mm_read_translator_avalon_universal_master_0_writedata;     // KBandInput_1_mm_read_translator:uav_writedata -> KBandInput_1_mm_read_agent:av_writedata
	wire    [2:0] kbandinput_1_mm_read_translator_avalon_universal_master_0_burstcount;    // KBandInput_1_mm_read_translator:uav_burstcount -> KBandInput_1_mm_read_agent:av_burstcount
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_waitrequest;   // KBandOutput_mm_write_agent:av_waitrequest -> KBandOutput_mm_write_translator:uav_waitrequest
	wire  [127:0] kbandoutput_mm_write_translator_avalon_universal_master_0_readdata;      // KBandOutput_mm_write_agent:av_readdata -> KBandOutput_mm_write_translator:uav_readdata
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_debugaccess;   // KBandOutput_mm_write_translator:uav_debugaccess -> KBandOutput_mm_write_agent:av_debugaccess
	wire   [30:0] kbandoutput_mm_write_translator_avalon_universal_master_0_address;       // KBandOutput_mm_write_translator:uav_address -> KBandOutput_mm_write_agent:av_address
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_read;          // KBandOutput_mm_write_translator:uav_read -> KBandOutput_mm_write_agent:av_read
	wire   [15:0] kbandoutput_mm_write_translator_avalon_universal_master_0_byteenable;    // KBandOutput_mm_write_translator:uav_byteenable -> KBandOutput_mm_write_agent:av_byteenable
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_readdatavalid; // KBandOutput_mm_write_agent:av_readdatavalid -> KBandOutput_mm_write_translator:uav_readdatavalid
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_lock;          // KBandOutput_mm_write_translator:uav_lock -> KBandOutput_mm_write_agent:av_lock
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_write;         // KBandOutput_mm_write_translator:uav_write -> KBandOutput_mm_write_agent:av_write
	wire  [127:0] kbandoutput_mm_write_translator_avalon_universal_master_0_writedata;     // KBandOutput_mm_write_translator:uav_writedata -> KBandOutput_mm_write_agent:av_writedata
	wire    [4:0] kbandoutput_mm_write_translator_avalon_universal_master_0_burstcount;    // KBandOutput_mm_write_translator:uav_burstcount -> KBandOutput_mm_write_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                   // rsp_mux_001:src_valid -> KBandOutput_mm_write_agent:rp_valid
	wire  [214:0] rsp_mux_001_src_data;                                                    // rsp_mux_001:src_data -> KBandOutput_mm_write_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                   // KBandOutput_mm_write_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                                 // rsp_mux_001:src_channel -> KBandOutput_mm_write_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                           // rsp_mux_001:src_startofpacket -> KBandOutput_mm_write_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                             // rsp_mux_001:src_endofpacket -> KBandOutput_mm_write_agent:rp_endofpacket
	wire  [127:0] ddr_s0_agent_m0_readdata;                                                // DDR_s0_translator:uav_readdata -> DDR_s0_agent:m0_readdata
	wire          ddr_s0_agent_m0_waitrequest;                                             // DDR_s0_translator:uav_waitrequest -> DDR_s0_agent:m0_waitrequest
	wire          ddr_s0_agent_m0_debugaccess;                                             // DDR_s0_agent:m0_debugaccess -> DDR_s0_translator:uav_debugaccess
	wire   [30:0] ddr_s0_agent_m0_address;                                                 // DDR_s0_agent:m0_address -> DDR_s0_translator:uav_address
	wire   [15:0] ddr_s0_agent_m0_byteenable;                                              // DDR_s0_agent:m0_byteenable -> DDR_s0_translator:uav_byteenable
	wire          ddr_s0_agent_m0_read;                                                    // DDR_s0_agent:m0_read -> DDR_s0_translator:uav_read
	wire          ddr_s0_agent_m0_readdatavalid;                                           // DDR_s0_translator:uav_readdatavalid -> DDR_s0_agent:m0_readdatavalid
	wire          ddr_s0_agent_m0_lock;                                                    // DDR_s0_agent:m0_lock -> DDR_s0_translator:uav_lock
	wire  [127:0] ddr_s0_agent_m0_writedata;                                               // DDR_s0_agent:m0_writedata -> DDR_s0_translator:uav_writedata
	wire          ddr_s0_agent_m0_write;                                                   // DDR_s0_agent:m0_write -> DDR_s0_translator:uav_write
	wire    [8:0] ddr_s0_agent_m0_burstcount;                                              // DDR_s0_agent:m0_burstcount -> DDR_s0_translator:uav_burstcount
	wire          ddr_s0_agent_rf_source_valid;                                            // DDR_s0_agent:rf_source_valid -> DDR_s0_agent_rsp_fifo:in_valid
	wire  [215:0] ddr_s0_agent_rf_source_data;                                             // DDR_s0_agent:rf_source_data -> DDR_s0_agent_rsp_fifo:in_data
	wire          ddr_s0_agent_rf_source_ready;                                            // DDR_s0_agent_rsp_fifo:in_ready -> DDR_s0_agent:rf_source_ready
	wire          ddr_s0_agent_rf_source_startofpacket;                                    // DDR_s0_agent:rf_source_startofpacket -> DDR_s0_agent_rsp_fifo:in_startofpacket
	wire          ddr_s0_agent_rf_source_endofpacket;                                      // DDR_s0_agent:rf_source_endofpacket -> DDR_s0_agent_rsp_fifo:in_endofpacket
	wire          ddr_s0_agent_rsp_fifo_out_valid;                                         // DDR_s0_agent_rsp_fifo:out_valid -> DDR_s0_agent:rf_sink_valid
	wire  [215:0] ddr_s0_agent_rsp_fifo_out_data;                                          // DDR_s0_agent_rsp_fifo:out_data -> DDR_s0_agent:rf_sink_data
	wire          ddr_s0_agent_rsp_fifo_out_ready;                                         // DDR_s0_agent:rf_sink_ready -> DDR_s0_agent_rsp_fifo:out_ready
	wire          ddr_s0_agent_rsp_fifo_out_startofpacket;                                 // DDR_s0_agent_rsp_fifo:out_startofpacket -> DDR_s0_agent:rf_sink_startofpacket
	wire          ddr_s0_agent_rsp_fifo_out_endofpacket;                                   // DDR_s0_agent_rsp_fifo:out_endofpacket -> DDR_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                       // cmd_mux:src_valid -> DDR_s0_agent:cp_valid
	wire  [214:0] cmd_mux_src_data;                                                        // cmd_mux:src_data -> DDR_s0_agent:cp_data
	wire          cmd_mux_src_ready;                                                       // DDR_s0_agent:cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                     // cmd_mux:src_channel -> DDR_s0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                               // cmd_mux:src_startofpacket -> DDR_s0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                 // cmd_mux:src_endofpacket -> DDR_s0_agent:cp_endofpacket
	wire          kbandinput_1_mm_read_agent_cp_valid;                                     // KBandInput_1_mm_read_agent:cp_valid -> router:sink_valid
	wire  [106:0] kbandinput_1_mm_read_agent_cp_data;                                      // KBandInput_1_mm_read_agent:cp_data -> router:sink_data
	wire          kbandinput_1_mm_read_agent_cp_ready;                                     // router:sink_ready -> KBandInput_1_mm_read_agent:cp_ready
	wire          kbandinput_1_mm_read_agent_cp_startofpacket;                             // KBandInput_1_mm_read_agent:cp_startofpacket -> router:sink_startofpacket
	wire          kbandinput_1_mm_read_agent_cp_endofpacket;                               // KBandInput_1_mm_read_agent:cp_endofpacket -> router:sink_endofpacket
	wire          kbandoutput_mm_write_agent_cp_valid;                                     // KBandOutput_mm_write_agent:cp_valid -> router_001:sink_valid
	wire  [214:0] kbandoutput_mm_write_agent_cp_data;                                      // KBandOutput_mm_write_agent:cp_data -> router_001:sink_data
	wire          kbandoutput_mm_write_agent_cp_ready;                                     // router_001:sink_ready -> KBandOutput_mm_write_agent:cp_ready
	wire          kbandoutput_mm_write_agent_cp_startofpacket;                             // KBandOutput_mm_write_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          kbandoutput_mm_write_agent_cp_endofpacket;                               // KBandOutput_mm_write_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                    // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [214:0] router_001_src_data;                                                     // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                    // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                  // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                            // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                              // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          ddr_s0_agent_rp_valid;                                                   // DDR_s0_agent:rp_valid -> router_002:sink_valid
	wire  [214:0] ddr_s0_agent_rp_data;                                                    // DDR_s0_agent:rp_data -> router_002:sink_data
	wire          ddr_s0_agent_rp_ready;                                                   // router_002:sink_ready -> DDR_s0_agent:rp_ready
	wire          ddr_s0_agent_rp_startofpacket;                                           // DDR_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          ddr_s0_agent_rp_endofpacket;                                             // DDR_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                    // router_002:src_valid -> rsp_demux:sink_valid
	wire  [214:0] router_002_src_data;                                                     // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                    // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                  // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                            // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                              // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [214:0] cmd_demux_src0_data;                                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [214:0] cmd_demux_001_src0_data;                                                 // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                              // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                        // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                          // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [214:0] rsp_demux_src0_data;                                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                    // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [214:0] rsp_demux_src1_data;                                                     // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                    // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                                  // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                            // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                              // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_mux_src_valid;                                                       // rsp_mux:src_valid -> KBandInput_1_mm_read_rsp_width_adapter:in_valid
	wire  [214:0] rsp_mux_src_data;                                                        // rsp_mux:src_data -> KBandInput_1_mm_read_rsp_width_adapter:in_data
	wire          rsp_mux_src_ready;                                                       // KBandInput_1_mm_read_rsp_width_adapter:in_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                     // rsp_mux:src_channel -> KBandInput_1_mm_read_rsp_width_adapter:in_channel
	wire          rsp_mux_src_startofpacket;                                               // rsp_mux:src_startofpacket -> KBandInput_1_mm_read_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                 // rsp_mux:src_endofpacket -> KBandInput_1_mm_read_rsp_width_adapter:in_endofpacket
	wire          kbandinput_1_mm_read_rsp_width_adapter_src_valid;                        // KBandInput_1_mm_read_rsp_width_adapter:out_valid -> KBandInput_1_mm_read_agent:rp_valid
	wire  [106:0] kbandinput_1_mm_read_rsp_width_adapter_src_data;                         // KBandInput_1_mm_read_rsp_width_adapter:out_data -> KBandInput_1_mm_read_agent:rp_data
	wire          kbandinput_1_mm_read_rsp_width_adapter_src_ready;                        // KBandInput_1_mm_read_agent:rp_ready -> KBandInput_1_mm_read_rsp_width_adapter:out_ready
	wire    [1:0] kbandinput_1_mm_read_rsp_width_adapter_src_channel;                      // KBandInput_1_mm_read_rsp_width_adapter:out_channel -> KBandInput_1_mm_read_agent:rp_channel
	wire          kbandinput_1_mm_read_rsp_width_adapter_src_startofpacket;                // KBandInput_1_mm_read_rsp_width_adapter:out_startofpacket -> KBandInput_1_mm_read_agent:rp_startofpacket
	wire          kbandinput_1_mm_read_rsp_width_adapter_src_endofpacket;                  // KBandInput_1_mm_read_rsp_width_adapter:out_endofpacket -> KBandInput_1_mm_read_agent:rp_endofpacket
	wire          router_src_valid;                                                        // router:src_valid -> KBandInput_1_mm_read_cmd_width_adapter:in_valid
	wire  [106:0] router_src_data;                                                         // router:src_data -> KBandInput_1_mm_read_cmd_width_adapter:in_data
	wire          router_src_ready;                                                        // KBandInput_1_mm_read_cmd_width_adapter:in_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                      // router:src_channel -> KBandInput_1_mm_read_cmd_width_adapter:in_channel
	wire          router_src_startofpacket;                                                // router:src_startofpacket -> KBandInput_1_mm_read_cmd_width_adapter:in_startofpacket
	wire          router_src_endofpacket;                                                  // router:src_endofpacket -> KBandInput_1_mm_read_cmd_width_adapter:in_endofpacket
	wire          kbandinput_1_mm_read_cmd_width_adapter_src_valid;                        // KBandInput_1_mm_read_cmd_width_adapter:out_valid -> cmd_demux:sink_valid
	wire  [214:0] kbandinput_1_mm_read_cmd_width_adapter_src_data;                         // KBandInput_1_mm_read_cmd_width_adapter:out_data -> cmd_demux:sink_data
	wire          kbandinput_1_mm_read_cmd_width_adapter_src_ready;                        // cmd_demux:sink_ready -> KBandInput_1_mm_read_cmd_width_adapter:out_ready
	wire    [1:0] kbandinput_1_mm_read_cmd_width_adapter_src_channel;                      // KBandInput_1_mm_read_cmd_width_adapter:out_channel -> cmd_demux:sink_channel
	wire          kbandinput_1_mm_read_cmd_width_adapter_src_startofpacket;                // KBandInput_1_mm_read_cmd_width_adapter:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          kbandinput_1_mm_read_cmd_width_adapter_src_endofpacket;                  // KBandInput_1_mm_read_cmd_width_adapter:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          ddr_s0_agent_rdata_fifo_src_valid;                                       // DDR_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [129:0] ddr_s0_agent_rdata_fifo_src_data;                                        // DDR_s0_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          ddr_s0_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter:in_0_ready -> DDR_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                           // avalon_st_adapter:out_0_valid -> DDR_s0_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_out_0_data;                                            // avalon_st_adapter:out_0_data -> DDR_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                           // DDR_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                           // avalon_st_adapter:out_0_error -> DDR_s0_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) kbandinput_1_mm_read_translator (
		.clk                    (clk_0_clk_clk),                                                           //                       clk.clk
		.reset                  (KBandInput_1_reset_n_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (kbandinput_1_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (kbandinput_1_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (kbandinput_1_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (kbandinput_1_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (kbandinput_1_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (kbandinput_1_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (kbandinput_1_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (kbandinput_1_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (kbandinput_1_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (kbandinput_1_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (kbandinput_1_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (KBandInput_1_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (KBandInput_1_mm_read_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (KBandInput_1_mm_read_byteenable),                                         //                          .byteenable
		.av_read                (KBandInput_1_mm_read_read),                                               //                          .read
		.av_readdata            (KBandInput_1_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (KBandInput_1_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_write               (1'b0),                                                                    //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                    //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) kbandoutput_mm_write_translator (
		.clk                    (clk_0_clk_clk),                                                           //                       clk.clk
		.reset                  (KBandInput_1_reset_n_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (kbandoutput_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (kbandoutput_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (kbandoutput_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (kbandoutput_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (kbandoutput_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (kbandoutput_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (kbandoutput_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (kbandoutput_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (kbandoutput_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (kbandoutput_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (kbandoutput_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (KBandOutput_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (KBandOutput_mm_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (KBandOutput_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (KBandOutput_mm_write_write),                                              //                          .write
		.av_writedata           (KBandOutput_mm_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_read                (1'b0),                                                                    //               (terminated)
		.av_readdata            (),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (30),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr_s0_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (KBandInput_1_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ddr_s0_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (ddr_s0_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (ddr_s0_agent_m0_read),                             //                         .read
		.uav_write              (ddr_s0_agent_m0_write),                            //                         .write
		.uav_waitrequest        (ddr_s0_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (ddr_s0_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (ddr_s0_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (ddr_s0_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (ddr_s0_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (ddr_s0_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (ddr_s0_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (DDR_s0_address),                                   //      avalon_anti_slave_0.address
		.av_write               (DDR_s0_write),                                     //                         .write
		.av_read                (DDR_s0_read),                                      //                         .read
		.av_readdata            (DDR_s0_readdata),                                  //                         .readdata
		.av_writedata           (DDR_s0_writedata),                                 //                         .writedata
		.av_burstcount          (DDR_s0_burstcount),                                //                         .burstcount
		.av_byteenable          (DDR_s0_byteenable),                                //                         .byteenable
		.av_readdatavalid       (DDR_s0_readdatavalid),                             //                         .readdatavalid
		.av_waitrequest         (DDR_s0_waitrequest),                               //                         .waitrequest
		.av_debugaccess         (DDR_s0_debugaccess),                               //                         .debugaccess
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (72),
		.PKT_TRANS_LOCK            (71),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (73),
		.PKT_ADDR_H                (66),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (67),
		.PKT_TRANS_POSTED          (68),
		.PKT_TRANS_WRITE           (69),
		.PKT_TRANS_READ            (70),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) kbandinput_1_mm_read_agent (
		.clk                   (clk_0_clk_clk),                                                           //       clk.clk
		.reset                 (KBandInput_1_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (kbandinput_1_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (kbandinput_1_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (kbandinput_1_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (kbandinput_1_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (kbandinput_1_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (kbandinput_1_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (kbandinput_1_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (kbandinput_1_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (kbandinput_1_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (kbandinput_1_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (kbandinput_1_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (kbandinput_1_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (kbandinput_1_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (kbandinput_1_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (kbandinput_1_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (kbandinput_1_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (kbandinput_1_mm_read_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (kbandinput_1_mm_read_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (kbandinput_1_mm_read_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (kbandinput_1_mm_read_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (kbandinput_1_mm_read_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (kbandinput_1_mm_read_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (214),
		.PKT_ORI_BURST_SIZE_L      (212),
		.PKT_RESPONSE_STATUS_H     (211),
		.PKT_RESPONSE_STATUS_L     (210),
		.PKT_QOS_H                 (199),
		.PKT_QOS_L                 (199),
		.PKT_DATA_SIDEBAND_H       (197),
		.PKT_DATA_SIDEBAND_L       (197),
		.PKT_ADDR_SIDEBAND_H       (196),
		.PKT_ADDR_SIDEBAND_L       (196),
		.PKT_BURST_TYPE_H          (195),
		.PKT_BURST_TYPE_L          (194),
		.PKT_CACHE_H               (209),
		.PKT_CACHE_L               (206),
		.PKT_THREAD_ID_H           (202),
		.PKT_THREAD_ID_L           (202),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_TRANS_EXCLUSIVE       (180),
		.PKT_TRANS_LOCK            (179),
		.PKT_BEGIN_BURST           (198),
		.PKT_PROTECTION_H          (205),
		.PKT_PROTECTION_L          (203),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (181),
		.PKT_ADDR_H                (174),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (175),
		.PKT_TRANS_POSTED          (176),
		.PKT_TRANS_WRITE           (177),
		.PKT_TRANS_READ            (178),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (200),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (201),
		.PKT_DEST_ID_L             (201),
		.ST_DATA_W                 (215),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) kbandoutput_mm_write_agent (
		.clk                   (clk_0_clk_clk),                                                           //       clk.clk
		.reset                 (KBandInput_1_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (kbandoutput_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (kbandoutput_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (kbandoutput_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (kbandoutput_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (kbandoutput_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (kbandoutput_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (kbandoutput_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (kbandoutput_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (kbandoutput_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (kbandoutput_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (kbandoutput_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (kbandoutput_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (kbandoutput_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (kbandoutput_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (kbandoutput_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (kbandoutput_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                   //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                    //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                 //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                             //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                   //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (214),
		.PKT_ORI_BURST_SIZE_L      (212),
		.PKT_RESPONSE_STATUS_H     (211),
		.PKT_RESPONSE_STATUS_L     (210),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_TRANS_LOCK            (179),
		.PKT_BEGIN_BURST           (198),
		.PKT_PROTECTION_H          (205),
		.PKT_PROTECTION_L          (203),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (181),
		.PKT_ADDR_H                (174),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (175),
		.PKT_TRANS_POSTED          (176),
		.PKT_TRANS_WRITE           (177),
		.PKT_TRANS_READ            (178),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (200),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (201),
		.PKT_DEST_ID_L             (201),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (215),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ddr_s0_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (KBandInput_1_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ddr_s0_agent_m0_address),                          //              m0.address
		.m0_burstcount           (ddr_s0_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (ddr_s0_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (ddr_s0_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (ddr_s0_agent_m0_lock),                             //                .lock
		.m0_readdata             (ddr_s0_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (ddr_s0_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (ddr_s0_agent_m0_read),                             //                .read
		.m0_waitrequest          (ddr_s0_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (ddr_s0_agent_m0_writedata),                        //                .writedata
		.m0_write                (ddr_s0_agent_m0_write),                            //                .write
		.rp_endofpacket          (ddr_s0_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (ddr_s0_agent_rp_ready),                            //                .ready
		.rp_valid                (ddr_s0_agent_rp_valid),                            //                .valid
		.rp_data                 (ddr_s0_agent_rp_data),                             //                .data
		.rp_startofpacket        (ddr_s0_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                              //                .channel
		.rf_sink_ready           (ddr_s0_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (ddr_s0_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (ddr_s0_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (ddr_s0_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (ddr_s0_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (ddr_s0_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (ddr_s0_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (ddr_s0_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (ddr_s0_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (ddr_s0_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (ddr_s0_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr_s0_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (ddr_s0_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (216),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (KBandInput_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr_s0_agent_rf_source_data),                      //        in.data
		.in_valid          (ddr_s0_agent_rf_source_valid),                     //          .valid
		.in_ready          (ddr_s0_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (ddr_s0_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (ddr_s0_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (ddr_s0_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (ddr_s0_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (ddr_s0_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (ddr_s0_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (ddr_s0_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	KBandIPsubAffine_mm_interconnect_1_router router (
		.sink_ready         (kbandinput_1_mm_read_agent_cp_ready),              //      sink.ready
		.sink_valid         (kbandinput_1_mm_read_agent_cp_valid),              //          .valid
		.sink_data          (kbandinput_1_mm_read_agent_cp_data),               //          .data
		.sink_startofpacket (kbandinput_1_mm_read_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (kbandinput_1_mm_read_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (KBandInput_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                 //       src.ready
		.src_valid          (router_src_valid),                                 //          .valid
		.src_data           (router_src_data),                                  //          .data
		.src_channel        (router_src_channel),                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                            //          .endofpacket
	);

	KBandIPsubAffine_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (kbandoutput_mm_write_agent_cp_ready),              //      sink.ready
		.sink_valid         (kbandoutput_mm_write_agent_cp_valid),              //          .valid
		.sink_data          (kbandoutput_mm_write_agent_cp_data),               //          .data
		.sink_startofpacket (kbandoutput_mm_write_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (kbandoutput_mm_write_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (KBandInput_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                             //       src.ready
		.src_valid          (router_001_src_valid),                             //          .valid
		.src_data           (router_001_src_data),                              //          .data
		.src_channel        (router_001_src_channel),                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                        //          .endofpacket
	);

	KBandIPsubAffine_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (ddr_s0_agent_rp_ready),                            //      sink.ready
		.sink_valid         (ddr_s0_agent_rp_valid),                            //          .valid
		.sink_data          (ddr_s0_agent_rp_data),                             //          .data
		.sink_startofpacket (ddr_s0_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (ddr_s0_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (KBandInput_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	KBandIPsubAffine_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (KBandInput_1_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (kbandinput_1_mm_read_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (kbandinput_1_mm_read_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (kbandinput_1_mm_read_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (kbandinput_1_mm_read_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (kbandinput_1_mm_read_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (kbandinput_1_mm_read_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                //          .endofpacket
	);

	KBandIPsubAffine_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (KBandInput_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                             //      sink.ready
		.sink_channel       (router_001_src_channel),                           //          .channel
		.sink_data          (router_001_src_data),                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	KBandIPsubAffine_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (KBandInput_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	KBandIPsubAffine_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (KBandInput_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                             //      sink.ready
		.sink_channel       (router_002_src_channel),                           //          .channel
		.sink_data          (router_002_src_data),                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_src0_data),                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_src1_data),                              //          .data
		.src1_channel       (rsp_demux_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                        //          .endofpacket
	);

	KBandIPsubAffine_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (KBandInput_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                //          .valid
		.src_data            (rsp_mux_src_data),                                 //          .data
		.src_channel         (rsp_mux_src_channel),                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                             //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                           //          .channel
		.sink0_data          (rsp_demux_src0_data),                              //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                        //          .endofpacket
	);

	KBandIPsubAffine_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (KBandInput_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                            //          .valid
		.src_data            (rsp_mux_001_src_data),                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                             //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                             //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                           //          .channel
		.sink0_data          (rsp_demux_src1_data),                              //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                        //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (174),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (189),
		.IN_PKT_BYTE_CNT_L             (181),
		.IN_PKT_TRANS_COMPRESSED_READ  (175),
		.IN_PKT_TRANS_WRITE            (177),
		.IN_PKT_BURSTWRAP_H            (190),
		.IN_PKT_BURSTWRAP_L            (190),
		.IN_PKT_BURST_SIZE_H           (193),
		.IN_PKT_BURST_SIZE_L           (191),
		.IN_PKT_RESPONSE_STATUS_H      (211),
		.IN_PKT_RESPONSE_STATUS_L      (210),
		.IN_PKT_TRANS_EXCLUSIVE        (180),
		.IN_PKT_BURST_TYPE_H           (195),
		.IN_PKT_BURST_TYPE_L           (194),
		.IN_PKT_ORI_BURST_SIZE_L       (212),
		.IN_PKT_ORI_BURST_SIZE_H       (214),
		.IN_ST_DATA_W                  (215),
		.OUT_PKT_ADDR_H                (66),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (73),
		.OUT_PKT_TRANS_COMPRESSED_READ (67),
		.OUT_PKT_BURST_SIZE_H          (85),
		.OUT_PKT_BURST_SIZE_L          (83),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (72),
		.OUT_PKT_BURST_TYPE_H          (87),
		.OUT_PKT_BURST_TYPE_L          (86),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_ST_DATA_W                 (107),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) kbandinput_1_mm_read_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                            //       clk.clk
		.reset                (KBandInput_1_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (rsp_mux_src_valid),                                        //      sink.valid
		.in_channel           (rsp_mux_src_channel),                                      //          .channel
		.in_startofpacket     (rsp_mux_src_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_mux_src_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_mux_src_ready),                                        //          .ready
		.in_data              (rsp_mux_src_data),                                         //          .data
		.out_endofpacket      (kbandinput_1_mm_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (kbandinput_1_mm_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (kbandinput_1_mm_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (kbandinput_1_mm_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (kbandinput_1_mm_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (kbandinput_1_mm_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (66),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (73),
		.IN_PKT_TRANS_COMPRESSED_READ  (67),
		.IN_PKT_TRANS_WRITE            (69),
		.IN_PKT_BURSTWRAP_H            (82),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (85),
		.IN_PKT_BURST_SIZE_L           (83),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (72),
		.IN_PKT_BURST_TYPE_H           (87),
		.IN_PKT_BURST_TYPE_L           (86),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_ST_DATA_W                  (107),
		.OUT_PKT_ADDR_H                (174),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (189),
		.OUT_PKT_BYTE_CNT_L            (181),
		.OUT_PKT_TRANS_COMPRESSED_READ (175),
		.OUT_PKT_BURST_SIZE_H          (193),
		.OUT_PKT_BURST_SIZE_L          (191),
		.OUT_PKT_RESPONSE_STATUS_H     (211),
		.OUT_PKT_RESPONSE_STATUS_L     (210),
		.OUT_PKT_TRANS_EXCLUSIVE       (180),
		.OUT_PKT_BURST_TYPE_H          (195),
		.OUT_PKT_BURST_TYPE_L          (194),
		.OUT_PKT_ORI_BURST_SIZE_L      (212),
		.OUT_PKT_ORI_BURST_SIZE_H      (214),
		.OUT_ST_DATA_W                 (215),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) kbandinput_1_mm_read_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                            //       clk.clk
		.reset                (KBandInput_1_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_src_valid),                                         //      sink.valid
		.in_channel           (router_src_channel),                                       //          .channel
		.in_startofpacket     (router_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (router_src_endofpacket),                                   //          .endofpacket
		.in_ready             (router_src_ready),                                         //          .ready
		.in_data              (router_src_data),                                          //          .data
		.out_endofpacket      (kbandinput_1_mm_read_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (kbandinput_1_mm_read_cmd_width_adapter_src_data),          //          .data
		.out_channel          (kbandinput_1_mm_read_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (kbandinput_1_mm_read_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (kbandinput_1_mm_read_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (kbandinput_1_mm_read_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                    // (terminated)
	);

	KBandIPsubAffine_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (KBandInput_1_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ddr_s0_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (ddr_s0_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (ddr_s0_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                     //         .error
	);

endmodule
