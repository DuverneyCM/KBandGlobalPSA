-- KBandIPsubPro_KBandOutput.vhd

-- Generated using ACDS version 19.1 240

library IEEE;
library altera_msgdma_191;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KBandIPsubPro_KBandOutput is
	port (
		clock_clk                    : in  std_logic                      := '0';             --            clock.clk
		reset_n_reset_n              : in  std_logic                      := '0';             --          reset_n.reset_n
		csr_writedata                : in  std_logic_vector(31 downto 0)  := (others => '0'); --              csr.writedata
		csr_write                    : in  std_logic                      := '0';             --                 .write
		csr_byteenable               : in  std_logic_vector(3 downto 0)   := (others => '0'); --                 .byteenable
		csr_readdata                 : out std_logic_vector(31 downto 0);                     --                 .readdata
		csr_read                     : in  std_logic                      := '0';             --                 .read
		csr_address                  : in  std_logic_vector(2 downto 0)   := (others => '0'); --                 .address
		descriptor_slave_write       : in  std_logic                      := '0';             -- descriptor_slave.write
		descriptor_slave_waitrequest : out std_logic;                                         --                 .waitrequest
		descriptor_slave_writedata   : in  std_logic_vector(127 downto 0) := (others => '0'); --                 .writedata
		descriptor_slave_byteenable  : in  std_logic_vector(15 downto 0)  := (others => '0'); --                 .byteenable
		csr_irq_irq                  : out std_logic;                                         --          csr_irq.irq
		mm_write_address             : out std_logic_vector(31 downto 0);                     --         mm_write.address
		mm_write_write               : out std_logic;                                         --                 .write
		mm_write_byteenable          : out std_logic_vector(15 downto 0);                     --                 .byteenable
		mm_write_writedata           : out std_logic_vector(127 downto 0);                    --                 .writedata
		mm_write_waitrequest         : in  std_logic                      := '0';             --                 .waitrequest
		st_sink_data                 : in  std_logic_vector(127 downto 0) := (others => '0'); --          st_sink.data
		st_sink_valid                : in  std_logic                      := '0';             --                 .valid
		st_sink_ready                : out std_logic                                          --                 .ready
	);
end entity KBandIPsubPro_KBandOutput;

architecture rtl of KBandIPsubPro_KBandOutput is
	component KBandIPsubPro_KBandOutput_altera_msgdma_191_kl463si_cmp is
		port (
			clock_clk                    : in  std_logic                      := 'X';             -- clk
			reset_n_reset_n              : in  std_logic                      := 'X';             -- reset_n
			csr_writedata                : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- writedata
			csr_write                    : in  std_logic                      := 'X';             -- write
			csr_byteenable               : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- byteenable
			csr_readdata                 : out std_logic_vector(31 downto 0);                     -- readdata
			csr_read                     : in  std_logic                      := 'X';             -- read
			csr_address                  : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- address
			descriptor_slave_write       : in  std_logic                      := 'X';             -- write
			descriptor_slave_waitrequest : out std_logic;                                         -- waitrequest
			descriptor_slave_writedata   : in  std_logic_vector(127 downto 0) := (others => 'X'); -- writedata
			descriptor_slave_byteenable  : in  std_logic_vector(15 downto 0)  := (others => 'X'); -- byteenable
			csr_irq_irq                  : out std_logic;                                         -- irq
			mm_write_address             : out std_logic_vector(31 downto 0);                     -- address
			mm_write_write               : out std_logic;                                         -- write
			mm_write_byteenable          : out std_logic_vector(15 downto 0);                     -- byteenable
			mm_write_writedata           : out std_logic_vector(127 downto 0);                    -- writedata
			mm_write_waitrequest         : in  std_logic                      := 'X';             -- waitrequest
			st_sink_data                 : in  std_logic_vector(127 downto 0) := (others => 'X'); -- data
			st_sink_valid                : in  std_logic                      := 'X';             -- valid
			st_sink_ready                : out std_logic                                          -- ready
		);
	end component KBandIPsubPro_KBandOutput_altera_msgdma_191_kl463si_cmp;

	for kbandoutput : KBandIPsubPro_KBandOutput_altera_msgdma_191_kl463si_cmp
		use entity altera_msgdma_191.KBandIPsubPro_KBandOutput_altera_msgdma_191_kl463si;
begin

	kbandoutput : component KBandIPsubPro_KBandOutput_altera_msgdma_191_kl463si_cmp
		port map (
			clock_clk                    => clock_clk,                    --            clock.clk
			reset_n_reset_n              => reset_n_reset_n,              --          reset_n.reset_n
			csr_writedata                => csr_writedata,                --              csr.writedata
			csr_write                    => csr_write,                    --                 .write
			csr_byteenable               => csr_byteenable,               --                 .byteenable
			csr_readdata                 => csr_readdata,                 --                 .readdata
			csr_read                     => csr_read,                     --                 .read
			csr_address                  => csr_address,                  --                 .address
			descriptor_slave_write       => descriptor_slave_write,       -- descriptor_slave.write
			descriptor_slave_waitrequest => descriptor_slave_waitrequest, --                 .waitrequest
			descriptor_slave_writedata   => descriptor_slave_writedata,   --                 .writedata
			descriptor_slave_byteenable  => descriptor_slave_byteenable,  --                 .byteenable
			csr_irq_irq                  => csr_irq_irq,                  --          csr_irq.irq
			mm_write_address             => mm_write_address,             --         mm_write.address
			mm_write_write               => mm_write_write,               --                 .write
			mm_write_byteenable          => mm_write_byteenable,          --                 .byteenable
			mm_write_writedata           => mm_write_writedata,           --                 .writedata
			mm_write_waitrequest         => mm_write_waitrequest,         --                 .waitrequest
			st_sink_data                 => st_sink_data,                 --          st_sink.data
			st_sink_valid                => st_sink_valid,                --                 .valid
			st_sink_ready                => st_sink_ready                 --                 .ready
		);

end architecture rtl; -- of KBandIPsubPro_KBandOutput
