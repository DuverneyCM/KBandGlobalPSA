-- FifoKBandOUT.vhd

-- Generated using ACDS version 19.1 240

library IEEE;
library fifo_191;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FifoKBandOUT is
	GENERIC(
		bitsIN		: 	natural  :=	128;	--MULTIPLOS DE 32
		bitsOUT		: 	natural  :=	128;	--32
		widthu		: 	natural  :=	8
	);
	PORT
	(
		aclr		: IN STD_LOGIC  := '0';
		data		: IN STD_LOGIC_VECTOR (bitsIN-1 DOWNTO 0);
		rdclk		: IN STD_LOGIC ;
		rdreq		: IN STD_LOGIC ;
		wrclk		: IN STD_LOGIC ;
		wrreq		: IN STD_LOGIC ;
		q		: OUT STD_LOGIC_VECTOR (bitsOUT-1 DOWNTO 0);
		rdempty		: OUT STD_LOGIC ;
		wrfull		: OUT STD_LOGIC ;
		wrusedw		: OUT STD_LOGIC_VECTOR (2 DOWNTO 0)
	);
end entity FifoKBandOUT;

architecture rtl of FifoKBandOUT is
	component FifoKBandOUT_fifo_191_bfpp2jq_cmp is
		GENERIC(
			bitsIN		: 	natural  :=	256;	--MULTIPLOS DE 32
			bitsOUT		: 	natural  :=	128;	--32
			widthu		: 	natural  :=	8
		);
		port (
			data    : in  std_logic_vector(bitsIN-1 downto 0) := (others => 'X'); -- datain
			wrreq   : in  std_logic                      := 'X';             -- wrreq
			rdreq   : in  std_logic                      := 'X';             -- rdreq
			wrclk   : in  std_logic                      := 'X';             -- wrclk
			rdclk   : in  std_logic                      := 'X';             -- rdclk
			aclr    : in  std_logic                      := 'X';             -- aclr
			q       : out std_logic_vector(bitsOUT-1 downto 0);                    -- dataout
			wrusedw : out std_logic_vector(2 downto 0);                      -- wrusedw
			rdempty : out std_logic;                                         -- rdempty
			wrfull  : out std_logic                                          -- wrfull
		);
	end component FifoKBandOUT_fifo_191_bfpp2jq_cmp;

	for fifo_0 : FifoKBandOUT_fifo_191_bfpp2jq_cmp
		use entity fifo_191.FifoKBandOUT_fifo_191_bfpp2jq;
begin

	fifo_0 : component FifoKBandOUT_fifo_191_bfpp2jq_cmp
		generic map(
			bitsIN	=>	bitsIN,	--MULTIPLOS DE 32
			bitsOUT	=>	bitsOUT,	--32
			widthu	=>	widthu
		)
		port map (
			data    => data,    --  fifo_input.datain
			wrreq   => wrreq,   --            .wrreq
			rdreq   => rdreq,   --            .rdreq
			wrclk   => wrclk,   --            .wrclk
			rdclk   => rdclk,   --            .rdclk
			aclr    => aclr,    --            .aclr
			q       => q,       -- fifo_output.dataout
			wrusedw => wrusedw, --            .wrusedw
			rdempty => rdempty, --            .rdempty
			wrfull  => wrfull   --            .wrfull
		);

end architecture rtl; -- of FifoKBandOUT
