// KBandIPsubPro_altera_mm_interconnect_191_m3rafbq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.1 240

`timescale 1 ps / 1 ps
module KBandIPsubPro_altera_mm_interconnect_191_m3rafbq (
		input  wire [16:0]  mm_bridge_LW_m0_address,                        //                          mm_bridge_LW_m0.address
		output wire         mm_bridge_LW_m0_waitrequest,                    //                                         .waitrequest
		input  wire [0:0]   mm_bridge_LW_m0_burstcount,                     //                                         .burstcount
		input  wire [3:0]   mm_bridge_LW_m0_byteenable,                     //                                         .byteenable
		input  wire         mm_bridge_LW_m0_read,                           //                                         .read
		output wire [31:0]  mm_bridge_LW_m0_readdata,                       //                                         .readdata
		output wire         mm_bridge_LW_m0_readdatavalid,                  //                                         .readdatavalid
		input  wire         mm_bridge_LW_m0_write,                          //                                         .write
		input  wire [31:0]  mm_bridge_LW_m0_writedata,                      //                                         .writedata
		input  wire         mm_bridge_LW_m0_debugaccess,                    //                                         .debugaccess
		input  wire [31:0]  KBandInput_2_mm_read_address,                   //                     KBandInput_2_mm_read.address
		output wire         KBandInput_2_mm_read_waitrequest,               //                                         .waitrequest
		input  wire         KBandInput_2_mm_read_read,                      //                                         .read
		output wire [7:0]   KBandInput_2_mm_read_readdata,                  //                                         .readdata
		output wire         KBandInput_2_mm_read_readdatavalid,             //                                         .readdatavalid
		input  wire [31:0]  KBandInput_1_mm_read_address,                   //                     KBandInput_1_mm_read.address
		output wire         KBandInput_1_mm_read_waitrequest,               //                                         .waitrequest
		input  wire         KBandInput_1_mm_read_read,                      //                                         .read
		output wire [7:0]   KBandInput_1_mm_read_readdata,                  //                                         .readdata
		output wire         KBandInput_1_mm_read_readdatavalid,             //                                         .readdatavalid
		input  wire [31:0]  KBandOutput_mm_write_address,                   //                     KBandOutput_mm_write.address
		output wire         KBandOutput_mm_write_waitrequest,               //                                         .waitrequest
		input  wire [15:0]  KBandOutput_mm_write_byteenable,                //                                         .byteenable
		input  wire         KBandOutput_mm_write_write,                     //                                         .write
		input  wire [127:0] KBandOutput_mm_write_writedata,                 //                                         .writedata
		input  wire [17:0]  mm_bridge_FPGA_Slave_m0_address,                //                  mm_bridge_FPGA_Slave_m0.address
		output wire         mm_bridge_FPGA_Slave_m0_waitrequest,            //                                         .waitrequest
		input  wire [0:0]   mm_bridge_FPGA_Slave_m0_burstcount,             //                                         .burstcount
		input  wire [7:0]   mm_bridge_FPGA_Slave_m0_byteenable,             //                                         .byteenable
		input  wire         mm_bridge_FPGA_Slave_m0_read,                   //                                         .read
		output wire [63:0]  mm_bridge_FPGA_Slave_m0_readdata,               //                                         .readdata
		output wire         mm_bridge_FPGA_Slave_m0_readdatavalid,          //                                         .readdatavalid
		input  wire         mm_bridge_FPGA_Slave_m0_write,                  //                                         .write
		input  wire [63:0]  mm_bridge_FPGA_Slave_m0_writedata,              //                                         .writedata
		input  wire         mm_bridge_FPGA_Slave_m0_debugaccess,            //                                         .debugaccess
		output wire [2:0]   KBandOutput_csr_address,                        //                          KBandOutput_csr.address
		output wire         KBandOutput_csr_write,                          //                                         .write
		output wire         KBandOutput_csr_read,                           //                                         .read
		input  wire [31:0]  KBandOutput_csr_readdata,                       //                                         .readdata
		output wire [31:0]  KBandOutput_csr_writedata,                      //                                         .writedata
		output wire [3:0]   KBandOutput_csr_byteenable,                     //                                         .byteenable
		output wire [2:0]   KBandInput_1_csr_address,                       //                         KBandInput_1_csr.address
		output wire         KBandInput_1_csr_write,                         //                                         .write
		output wire         KBandInput_1_csr_read,                          //                                         .read
		input  wire [31:0]  KBandInput_1_csr_readdata,                      //                                         .readdata
		output wire [31:0]  KBandInput_1_csr_writedata,                     //                                         .writedata
		output wire [3:0]   KBandInput_1_csr_byteenable,                    //                                         .byteenable
		output wire [2:0]   KBandInput_2_csr_address,                       //                         KBandInput_2_csr.address
		output wire         KBandInput_2_csr_write,                         //                                         .write
		output wire         KBandInput_2_csr_read,                          //                                         .read
		input  wire [31:0]  KBandInput_2_csr_readdata,                      //                                         .readdata
		output wire [31:0]  KBandInput_2_csr_writedata,                     //                                         .writedata
		output wire [3:0]   KBandInput_2_csr_byteenable,                    //                                         .byteenable
		output wire         KBandOutput_descriptor_slave_write,             //             KBandOutput_descriptor_slave.write
		output wire [127:0] KBandOutput_descriptor_slave_writedata,         //                                         .writedata
		output wire [15:0]  KBandOutput_descriptor_slave_byteenable,        //                                         .byteenable
		input  wire         KBandOutput_descriptor_slave_waitrequest,       //                                         .waitrequest
		output wire         KBandInput_1_descriptor_slave_write,            //            KBandInput_1_descriptor_slave.write
		output wire [127:0] KBandInput_1_descriptor_slave_writedata,        //                                         .writedata
		output wire [15:0]  KBandInput_1_descriptor_slave_byteenable,       //                                         .byteenable
		input  wire         KBandInput_1_descriptor_slave_waitrequest,      //                                         .waitrequest
		output wire         KBandInput_2_descriptor_slave_write,            //            KBandInput_2_descriptor_slave.write
		output wire [127:0] KBandInput_2_descriptor_slave_writedata,        //                                         .writedata
		output wire [15:0]  KBandInput_2_descriptor_slave_byteenable,       //                                         .byteenable
		input  wire         KBandInput_2_descriptor_slave_waitrequest,      //                                         .waitrequest
		output wire [12:0]  onchip_mem_LW_s1_address,                       //                         onchip_mem_LW_s1.address
		output wire         onchip_mem_LW_s1_write,                         //                                         .write
		input  wire [31:0]  onchip_mem_LW_s1_readdata,                      //                                         .readdata
		output wire [31:0]  onchip_mem_LW_s1_writedata,                     //                                         .writedata
		output wire [3:0]   onchip_mem_LW_s1_byteenable,                    //                                         .byteenable
		output wire         onchip_mem_LW_s1_chipselect,                    //                                         .chipselect
		output wire         onchip_mem_LW_s1_clken,                         //                                         .clken
		output wire [1:0]   pio_0_s1_address,                               //                                 pio_0_s1.address
		output wire         pio_0_s1_write,                                 //                                         .write
		input  wire [31:0]  pio_0_s1_readdata,                              //                                         .readdata
		output wire [31:0]  pio_0_s1_writedata,                             //                                         .writedata
		output wire         pio_0_s1_chipselect,                            //                                         .chipselect
		output wire [12:0]  onchip_mem_LW2_s1_address,                      //                        onchip_mem_LW2_s1.address
		output wire         onchip_mem_LW2_s1_write,                        //                                         .write
		input  wire [31:0]  onchip_mem_LW2_s1_readdata,                     //                                         .readdata
		output wire [31:0]  onchip_mem_LW2_s1_writedata,                    //                                         .writedata
		output wire [3:0]   onchip_mem_LW2_s1_byteenable,                   //                                         .byteenable
		output wire         onchip_mem_LW2_s1_chipselect,                   //                                         .chipselect
		output wire         onchip_mem_LW2_s1_clken,                        //                                         .clken
		output wire [29:0]  DDR_s0_address,                                 //                                   DDR_s0.address
		output wire         DDR_s0_write,                                   //                                         .write
		output wire         DDR_s0_read,                                    //                                         .read
		input  wire [127:0] DDR_s0_readdata,                                //                                         .readdata
		output wire [127:0] DDR_s0_writedata,                               //                                         .writedata
		output wire [4:0]   DDR_s0_burstcount,                              //                                         .burstcount
		output wire [15:0]  DDR_s0_byteenable,                              //                                         .byteenable
		input  wire         DDR_s0_readdatavalid,                           //                                         .readdatavalid
		input  wire         DDR_s0_waitrequest,                             //                                         .waitrequest
		output wire         DDR_s0_debugaccess,                             //                                         .debugaccess
		output wire [13:0]  onchip_mem_FPGA_Slave_s1_address,               //                 onchip_mem_FPGA_Slave_s1.address
		output wire         onchip_mem_FPGA_Slave_s1_write,                 //                                         .write
		input  wire [127:0] onchip_mem_FPGA_Slave_s1_readdata,              //                                         .readdata
		output wire [127:0] onchip_mem_FPGA_Slave_s1_writedata,             //                                         .writedata
		output wire [15:0]  onchip_mem_FPGA_Slave_s1_byteenable,            //                                         .byteenable
		output wire         onchip_mem_FPGA_Slave_s1_chipselect,            //                                         .chipselect
		output wire         onchip_mem_FPGA_Slave_s1_clken,                 //                                         .clken
		input  wire         mm_bridge_LW_reset_reset_bridge_in_reset_reset, // mm_bridge_LW_reset_reset_bridge_in_reset.reset
		input  wire         clk_0_clk_clk                                   //                                clk_0_clk.clk
	);

	wire          mm_bridge_lw_m0_translator_avalon_universal_master_0_waitrequest;                        // mm_bridge_LW_m0_agent:av_waitrequest -> mm_bridge_LW_m0_translator:uav_waitrequest
	wire   [31:0] mm_bridge_lw_m0_translator_avalon_universal_master_0_readdata;                           // mm_bridge_LW_m0_agent:av_readdata -> mm_bridge_LW_m0_translator:uav_readdata
	wire          mm_bridge_lw_m0_translator_avalon_universal_master_0_debugaccess;                        // mm_bridge_LW_m0_translator:uav_debugaccess -> mm_bridge_LW_m0_agent:av_debugaccess
	wire   [31:0] mm_bridge_lw_m0_translator_avalon_universal_master_0_address;                            // mm_bridge_LW_m0_translator:uav_address -> mm_bridge_LW_m0_agent:av_address
	wire          mm_bridge_lw_m0_translator_avalon_universal_master_0_read;                               // mm_bridge_LW_m0_translator:uav_read -> mm_bridge_LW_m0_agent:av_read
	wire    [3:0] mm_bridge_lw_m0_translator_avalon_universal_master_0_byteenable;                         // mm_bridge_LW_m0_translator:uav_byteenable -> mm_bridge_LW_m0_agent:av_byteenable
	wire          mm_bridge_lw_m0_translator_avalon_universal_master_0_readdatavalid;                      // mm_bridge_LW_m0_agent:av_readdatavalid -> mm_bridge_LW_m0_translator:uav_readdatavalid
	wire          mm_bridge_lw_m0_translator_avalon_universal_master_0_lock;                               // mm_bridge_LW_m0_translator:uav_lock -> mm_bridge_LW_m0_agent:av_lock
	wire          mm_bridge_lw_m0_translator_avalon_universal_master_0_write;                              // mm_bridge_LW_m0_translator:uav_write -> mm_bridge_LW_m0_agent:av_write
	wire   [31:0] mm_bridge_lw_m0_translator_avalon_universal_master_0_writedata;                          // mm_bridge_LW_m0_translator:uav_writedata -> mm_bridge_LW_m0_agent:av_writedata
	wire    [2:0] mm_bridge_lw_m0_translator_avalon_universal_master_0_burstcount;                         // mm_bridge_LW_m0_translator:uav_burstcount -> mm_bridge_LW_m0_agent:av_burstcount
	wire          kbandinput_2_mm_read_translator_avalon_universal_master_0_waitrequest;                   // KBandInput_2_mm_read_agent:av_waitrequest -> KBandInput_2_mm_read_translator:uav_waitrequest
	wire    [7:0] kbandinput_2_mm_read_translator_avalon_universal_master_0_readdata;                      // KBandInput_2_mm_read_agent:av_readdata -> KBandInput_2_mm_read_translator:uav_readdata
	wire          kbandinput_2_mm_read_translator_avalon_universal_master_0_debugaccess;                   // KBandInput_2_mm_read_translator:uav_debugaccess -> KBandInput_2_mm_read_agent:av_debugaccess
	wire   [31:0] kbandinput_2_mm_read_translator_avalon_universal_master_0_address;                       // KBandInput_2_mm_read_translator:uav_address -> KBandInput_2_mm_read_agent:av_address
	wire          kbandinput_2_mm_read_translator_avalon_universal_master_0_read;                          // KBandInput_2_mm_read_translator:uav_read -> KBandInput_2_mm_read_agent:av_read
	wire    [0:0] kbandinput_2_mm_read_translator_avalon_universal_master_0_byteenable;                    // KBandInput_2_mm_read_translator:uav_byteenable -> KBandInput_2_mm_read_agent:av_byteenable
	wire          kbandinput_2_mm_read_translator_avalon_universal_master_0_readdatavalid;                 // KBandInput_2_mm_read_agent:av_readdatavalid -> KBandInput_2_mm_read_translator:uav_readdatavalid
	wire          kbandinput_2_mm_read_translator_avalon_universal_master_0_lock;                          // KBandInput_2_mm_read_translator:uav_lock -> KBandInput_2_mm_read_agent:av_lock
	wire          kbandinput_2_mm_read_translator_avalon_universal_master_0_write;                         // KBandInput_2_mm_read_translator:uav_write -> KBandInput_2_mm_read_agent:av_write
	wire    [7:0] kbandinput_2_mm_read_translator_avalon_universal_master_0_writedata;                     // KBandInput_2_mm_read_translator:uav_writedata -> KBandInput_2_mm_read_agent:av_writedata
	wire    [0:0] kbandinput_2_mm_read_translator_avalon_universal_master_0_burstcount;                    // KBandInput_2_mm_read_translator:uav_burstcount -> KBandInput_2_mm_read_agent:av_burstcount
	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_waitrequest;                   // KBandInput_1_mm_read_agent:av_waitrequest -> KBandInput_1_mm_read_translator:uav_waitrequest
	wire    [7:0] kbandinput_1_mm_read_translator_avalon_universal_master_0_readdata;                      // KBandInput_1_mm_read_agent:av_readdata -> KBandInput_1_mm_read_translator:uav_readdata
	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_debugaccess;                   // KBandInput_1_mm_read_translator:uav_debugaccess -> KBandInput_1_mm_read_agent:av_debugaccess
	wire   [31:0] kbandinput_1_mm_read_translator_avalon_universal_master_0_address;                       // KBandInput_1_mm_read_translator:uav_address -> KBandInput_1_mm_read_agent:av_address
	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_read;                          // KBandInput_1_mm_read_translator:uav_read -> KBandInput_1_mm_read_agent:av_read
	wire    [0:0] kbandinput_1_mm_read_translator_avalon_universal_master_0_byteenable;                    // KBandInput_1_mm_read_translator:uav_byteenable -> KBandInput_1_mm_read_agent:av_byteenable
	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_readdatavalid;                 // KBandInput_1_mm_read_agent:av_readdatavalid -> KBandInput_1_mm_read_translator:uav_readdatavalid
	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_lock;                          // KBandInput_1_mm_read_translator:uav_lock -> KBandInput_1_mm_read_agent:av_lock
	wire          kbandinput_1_mm_read_translator_avalon_universal_master_0_write;                         // KBandInput_1_mm_read_translator:uav_write -> KBandInput_1_mm_read_agent:av_write
	wire    [7:0] kbandinput_1_mm_read_translator_avalon_universal_master_0_writedata;                     // KBandInput_1_mm_read_translator:uav_writedata -> KBandInput_1_mm_read_agent:av_writedata
	wire    [0:0] kbandinput_1_mm_read_translator_avalon_universal_master_0_burstcount;                    // KBandInput_1_mm_read_translator:uav_burstcount -> KBandInput_1_mm_read_agent:av_burstcount
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_waitrequest;                   // KBandOutput_mm_write_agent:av_waitrequest -> KBandOutput_mm_write_translator:uav_waitrequest
	wire  [127:0] kbandoutput_mm_write_translator_avalon_universal_master_0_readdata;                      // KBandOutput_mm_write_agent:av_readdata -> KBandOutput_mm_write_translator:uav_readdata
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_debugaccess;                   // KBandOutput_mm_write_translator:uav_debugaccess -> KBandOutput_mm_write_agent:av_debugaccess
	wire   [31:0] kbandoutput_mm_write_translator_avalon_universal_master_0_address;                       // KBandOutput_mm_write_translator:uav_address -> KBandOutput_mm_write_agent:av_address
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_read;                          // KBandOutput_mm_write_translator:uav_read -> KBandOutput_mm_write_agent:av_read
	wire   [15:0] kbandoutput_mm_write_translator_avalon_universal_master_0_byteenable;                    // KBandOutput_mm_write_translator:uav_byteenable -> KBandOutput_mm_write_agent:av_byteenable
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_readdatavalid;                 // KBandOutput_mm_write_agent:av_readdatavalid -> KBandOutput_mm_write_translator:uav_readdatavalid
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_lock;                          // KBandOutput_mm_write_translator:uav_lock -> KBandOutput_mm_write_agent:av_lock
	wire          kbandoutput_mm_write_translator_avalon_universal_master_0_write;                         // KBandOutput_mm_write_translator:uav_write -> KBandOutput_mm_write_agent:av_write
	wire  [127:0] kbandoutput_mm_write_translator_avalon_universal_master_0_writedata;                     // KBandOutput_mm_write_translator:uav_writedata -> KBandOutput_mm_write_agent:av_writedata
	wire    [4:0] kbandoutput_mm_write_translator_avalon_universal_master_0_burstcount;                    // KBandOutput_mm_write_translator:uav_burstcount -> KBandOutput_mm_write_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                   // rsp_mux_003:src_valid -> KBandOutput_mm_write_agent:rp_valid
	wire  [230:0] rsp_mux_003_src_data;                                                                    // rsp_mux_003:src_data -> KBandOutput_mm_write_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                   // KBandOutput_mm_write_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [10:0] rsp_mux_003_src_channel;                                                                 // rsp_mux_003:src_channel -> KBandOutput_mm_write_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                           // rsp_mux_003:src_startofpacket -> KBandOutput_mm_write_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                             // rsp_mux_003:src_endofpacket -> KBandOutput_mm_write_agent:rp_endofpacket
	wire          mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_waitrequest;                // mm_bridge_FPGA_Slave_m0_agent:av_waitrequest -> mm_bridge_FPGA_Slave_m0_translator:uav_waitrequest
	wire   [63:0] mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_readdata;                   // mm_bridge_FPGA_Slave_m0_agent:av_readdata -> mm_bridge_FPGA_Slave_m0_translator:uav_readdata
	wire          mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_debugaccess;                // mm_bridge_FPGA_Slave_m0_translator:uav_debugaccess -> mm_bridge_FPGA_Slave_m0_agent:av_debugaccess
	wire   [31:0] mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_address;                    // mm_bridge_FPGA_Slave_m0_translator:uav_address -> mm_bridge_FPGA_Slave_m0_agent:av_address
	wire          mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_read;                       // mm_bridge_FPGA_Slave_m0_translator:uav_read -> mm_bridge_FPGA_Slave_m0_agent:av_read
	wire    [7:0] mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_byteenable;                 // mm_bridge_FPGA_Slave_m0_translator:uav_byteenable -> mm_bridge_FPGA_Slave_m0_agent:av_byteenable
	wire          mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_readdatavalid;              // mm_bridge_FPGA_Slave_m0_agent:av_readdatavalid -> mm_bridge_FPGA_Slave_m0_translator:uav_readdatavalid
	wire          mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_lock;                       // mm_bridge_FPGA_Slave_m0_translator:uav_lock -> mm_bridge_FPGA_Slave_m0_agent:av_lock
	wire          mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_write;                      // mm_bridge_FPGA_Slave_m0_translator:uav_write -> mm_bridge_FPGA_Slave_m0_agent:av_write
	wire   [63:0] mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_writedata;                  // mm_bridge_FPGA_Slave_m0_translator:uav_writedata -> mm_bridge_FPGA_Slave_m0_agent:av_writedata
	wire    [3:0] mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_burstcount;                 // mm_bridge_FPGA_Slave_m0_translator:uav_burstcount -> mm_bridge_FPGA_Slave_m0_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                   // rsp_mux_004:src_valid -> mm_bridge_FPGA_Slave_m0_agent:rp_valid
	wire  [158:0] rsp_mux_004_src_data;                                                                    // rsp_mux_004:src_data -> mm_bridge_FPGA_Slave_m0_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                   // mm_bridge_FPGA_Slave_m0_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [10:0] rsp_mux_004_src_channel;                                                                 // rsp_mux_004:src_channel -> mm_bridge_FPGA_Slave_m0_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                           // rsp_mux_004:src_startofpacket -> mm_bridge_FPGA_Slave_m0_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                             // rsp_mux_004:src_endofpacket -> mm_bridge_FPGA_Slave_m0_agent:rp_endofpacket
	wire   [31:0] kbandoutput_csr_agent_m0_readdata;                                                       // KBandOutput_csr_translator:uav_readdata -> KBandOutput_csr_agent:m0_readdata
	wire          kbandoutput_csr_agent_m0_waitrequest;                                                    // KBandOutput_csr_translator:uav_waitrequest -> KBandOutput_csr_agent:m0_waitrequest
	wire          kbandoutput_csr_agent_m0_debugaccess;                                                    // KBandOutput_csr_agent:m0_debugaccess -> KBandOutput_csr_translator:uav_debugaccess
	wire   [31:0] kbandoutput_csr_agent_m0_address;                                                        // KBandOutput_csr_agent:m0_address -> KBandOutput_csr_translator:uav_address
	wire    [3:0] kbandoutput_csr_agent_m0_byteenable;                                                     // KBandOutput_csr_agent:m0_byteenable -> KBandOutput_csr_translator:uav_byteenable
	wire          kbandoutput_csr_agent_m0_read;                                                           // KBandOutput_csr_agent:m0_read -> KBandOutput_csr_translator:uav_read
	wire          kbandoutput_csr_agent_m0_readdatavalid;                                                  // KBandOutput_csr_translator:uav_readdatavalid -> KBandOutput_csr_agent:m0_readdatavalid
	wire          kbandoutput_csr_agent_m0_lock;                                                           // KBandOutput_csr_agent:m0_lock -> KBandOutput_csr_translator:uav_lock
	wire   [31:0] kbandoutput_csr_agent_m0_writedata;                                                      // KBandOutput_csr_agent:m0_writedata -> KBandOutput_csr_translator:uav_writedata
	wire          kbandoutput_csr_agent_m0_write;                                                          // KBandOutput_csr_agent:m0_write -> KBandOutput_csr_translator:uav_write
	wire    [2:0] kbandoutput_csr_agent_m0_burstcount;                                                     // KBandOutput_csr_agent:m0_burstcount -> KBandOutput_csr_translator:uav_burstcount
	wire          kbandoutput_csr_agent_rf_source_valid;                                                   // KBandOutput_csr_agent:rf_source_valid -> KBandOutput_csr_agent_rsp_fifo:in_valid
	wire  [123:0] kbandoutput_csr_agent_rf_source_data;                                                    // KBandOutput_csr_agent:rf_source_data -> KBandOutput_csr_agent_rsp_fifo:in_data
	wire          kbandoutput_csr_agent_rf_source_ready;                                                   // KBandOutput_csr_agent_rsp_fifo:in_ready -> KBandOutput_csr_agent:rf_source_ready
	wire          kbandoutput_csr_agent_rf_source_startofpacket;                                           // KBandOutput_csr_agent:rf_source_startofpacket -> KBandOutput_csr_agent_rsp_fifo:in_startofpacket
	wire          kbandoutput_csr_agent_rf_source_endofpacket;                                             // KBandOutput_csr_agent:rf_source_endofpacket -> KBandOutput_csr_agent_rsp_fifo:in_endofpacket
	wire          kbandoutput_csr_agent_rsp_fifo_out_valid;                                                // KBandOutput_csr_agent_rsp_fifo:out_valid -> KBandOutput_csr_agent:rf_sink_valid
	wire  [123:0] kbandoutput_csr_agent_rsp_fifo_out_data;                                                 // KBandOutput_csr_agent_rsp_fifo:out_data -> KBandOutput_csr_agent:rf_sink_data
	wire          kbandoutput_csr_agent_rsp_fifo_out_ready;                                                // KBandOutput_csr_agent:rf_sink_ready -> KBandOutput_csr_agent_rsp_fifo:out_ready
	wire          kbandoutput_csr_agent_rsp_fifo_out_startofpacket;                                        // KBandOutput_csr_agent_rsp_fifo:out_startofpacket -> KBandOutput_csr_agent:rf_sink_startofpacket
	wire          kbandoutput_csr_agent_rsp_fifo_out_endofpacket;                                          // KBandOutput_csr_agent_rsp_fifo:out_endofpacket -> KBandOutput_csr_agent:rf_sink_endofpacket
	wire          kbandoutput_csr_agent_rdata_fifo_src_valid;                                              // KBandOutput_csr_agent:rdata_fifo_src_valid -> KBandOutput_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] kbandoutput_csr_agent_rdata_fifo_src_data;                                               // KBandOutput_csr_agent:rdata_fifo_src_data -> KBandOutput_csr_agent:rdata_fifo_sink_data
	wire          kbandoutput_csr_agent_rdata_fifo_src_ready;                                              // KBandOutput_csr_agent:rdata_fifo_sink_ready -> KBandOutput_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                       // cmd_mux:src_valid -> KBandOutput_csr_agent:cp_valid
	wire  [122:0] cmd_mux_src_data;                                                                        // cmd_mux:src_data -> KBandOutput_csr_agent:cp_data
	wire          cmd_mux_src_ready;                                                                       // KBandOutput_csr_agent:cp_ready -> cmd_mux:src_ready
	wire   [10:0] cmd_mux_src_channel;                                                                     // cmd_mux:src_channel -> KBandOutput_csr_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                               // cmd_mux:src_startofpacket -> KBandOutput_csr_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                 // cmd_mux:src_endofpacket -> KBandOutput_csr_agent:cp_endofpacket
	wire   [31:0] kbandinput_1_csr_agent_m0_readdata;                                                      // KBandInput_1_csr_translator:uav_readdata -> KBandInput_1_csr_agent:m0_readdata
	wire          kbandinput_1_csr_agent_m0_waitrequest;                                                   // KBandInput_1_csr_translator:uav_waitrequest -> KBandInput_1_csr_agent:m0_waitrequest
	wire          kbandinput_1_csr_agent_m0_debugaccess;                                                   // KBandInput_1_csr_agent:m0_debugaccess -> KBandInput_1_csr_translator:uav_debugaccess
	wire   [31:0] kbandinput_1_csr_agent_m0_address;                                                       // KBandInput_1_csr_agent:m0_address -> KBandInput_1_csr_translator:uav_address
	wire    [3:0] kbandinput_1_csr_agent_m0_byteenable;                                                    // KBandInput_1_csr_agent:m0_byteenable -> KBandInput_1_csr_translator:uav_byteenable
	wire          kbandinput_1_csr_agent_m0_read;                                                          // KBandInput_1_csr_agent:m0_read -> KBandInput_1_csr_translator:uav_read
	wire          kbandinput_1_csr_agent_m0_readdatavalid;                                                 // KBandInput_1_csr_translator:uav_readdatavalid -> KBandInput_1_csr_agent:m0_readdatavalid
	wire          kbandinput_1_csr_agent_m0_lock;                                                          // KBandInput_1_csr_agent:m0_lock -> KBandInput_1_csr_translator:uav_lock
	wire   [31:0] kbandinput_1_csr_agent_m0_writedata;                                                     // KBandInput_1_csr_agent:m0_writedata -> KBandInput_1_csr_translator:uav_writedata
	wire          kbandinput_1_csr_agent_m0_write;                                                         // KBandInput_1_csr_agent:m0_write -> KBandInput_1_csr_translator:uav_write
	wire    [2:0] kbandinput_1_csr_agent_m0_burstcount;                                                    // KBandInput_1_csr_agent:m0_burstcount -> KBandInput_1_csr_translator:uav_burstcount
	wire          kbandinput_1_csr_agent_rf_source_valid;                                                  // KBandInput_1_csr_agent:rf_source_valid -> KBandInput_1_csr_agent_rsp_fifo:in_valid
	wire  [123:0] kbandinput_1_csr_agent_rf_source_data;                                                   // KBandInput_1_csr_agent:rf_source_data -> KBandInput_1_csr_agent_rsp_fifo:in_data
	wire          kbandinput_1_csr_agent_rf_source_ready;                                                  // KBandInput_1_csr_agent_rsp_fifo:in_ready -> KBandInput_1_csr_agent:rf_source_ready
	wire          kbandinput_1_csr_agent_rf_source_startofpacket;                                          // KBandInput_1_csr_agent:rf_source_startofpacket -> KBandInput_1_csr_agent_rsp_fifo:in_startofpacket
	wire          kbandinput_1_csr_agent_rf_source_endofpacket;                                            // KBandInput_1_csr_agent:rf_source_endofpacket -> KBandInput_1_csr_agent_rsp_fifo:in_endofpacket
	wire          kbandinput_1_csr_agent_rsp_fifo_out_valid;                                               // KBandInput_1_csr_agent_rsp_fifo:out_valid -> KBandInput_1_csr_agent:rf_sink_valid
	wire  [123:0] kbandinput_1_csr_agent_rsp_fifo_out_data;                                                // KBandInput_1_csr_agent_rsp_fifo:out_data -> KBandInput_1_csr_agent:rf_sink_data
	wire          kbandinput_1_csr_agent_rsp_fifo_out_ready;                                               // KBandInput_1_csr_agent:rf_sink_ready -> KBandInput_1_csr_agent_rsp_fifo:out_ready
	wire          kbandinput_1_csr_agent_rsp_fifo_out_startofpacket;                                       // KBandInput_1_csr_agent_rsp_fifo:out_startofpacket -> KBandInput_1_csr_agent:rf_sink_startofpacket
	wire          kbandinput_1_csr_agent_rsp_fifo_out_endofpacket;                                         // KBandInput_1_csr_agent_rsp_fifo:out_endofpacket -> KBandInput_1_csr_agent:rf_sink_endofpacket
	wire          kbandinput_1_csr_agent_rdata_fifo_src_valid;                                             // KBandInput_1_csr_agent:rdata_fifo_src_valid -> KBandInput_1_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] kbandinput_1_csr_agent_rdata_fifo_src_data;                                              // KBandInput_1_csr_agent:rdata_fifo_src_data -> KBandInput_1_csr_agent:rdata_fifo_sink_data
	wire          kbandinput_1_csr_agent_rdata_fifo_src_ready;                                             // KBandInput_1_csr_agent:rdata_fifo_sink_ready -> KBandInput_1_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                                   // cmd_mux_001:src_valid -> KBandInput_1_csr_agent:cp_valid
	wire  [122:0] cmd_mux_001_src_data;                                                                    // cmd_mux_001:src_data -> KBandInput_1_csr_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                   // KBandInput_1_csr_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [10:0] cmd_mux_001_src_channel;                                                                 // cmd_mux_001:src_channel -> KBandInput_1_csr_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                           // cmd_mux_001:src_startofpacket -> KBandInput_1_csr_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                             // cmd_mux_001:src_endofpacket -> KBandInput_1_csr_agent:cp_endofpacket
	wire   [31:0] kbandinput_2_csr_agent_m0_readdata;                                                      // KBandInput_2_csr_translator:uav_readdata -> KBandInput_2_csr_agent:m0_readdata
	wire          kbandinput_2_csr_agent_m0_waitrequest;                                                   // KBandInput_2_csr_translator:uav_waitrequest -> KBandInput_2_csr_agent:m0_waitrequest
	wire          kbandinput_2_csr_agent_m0_debugaccess;                                                   // KBandInput_2_csr_agent:m0_debugaccess -> KBandInput_2_csr_translator:uav_debugaccess
	wire   [31:0] kbandinput_2_csr_agent_m0_address;                                                       // KBandInput_2_csr_agent:m0_address -> KBandInput_2_csr_translator:uav_address
	wire    [3:0] kbandinput_2_csr_agent_m0_byteenable;                                                    // KBandInput_2_csr_agent:m0_byteenable -> KBandInput_2_csr_translator:uav_byteenable
	wire          kbandinput_2_csr_agent_m0_read;                                                          // KBandInput_2_csr_agent:m0_read -> KBandInput_2_csr_translator:uav_read
	wire          kbandinput_2_csr_agent_m0_readdatavalid;                                                 // KBandInput_2_csr_translator:uav_readdatavalid -> KBandInput_2_csr_agent:m0_readdatavalid
	wire          kbandinput_2_csr_agent_m0_lock;                                                          // KBandInput_2_csr_agent:m0_lock -> KBandInput_2_csr_translator:uav_lock
	wire   [31:0] kbandinput_2_csr_agent_m0_writedata;                                                     // KBandInput_2_csr_agent:m0_writedata -> KBandInput_2_csr_translator:uav_writedata
	wire          kbandinput_2_csr_agent_m0_write;                                                         // KBandInput_2_csr_agent:m0_write -> KBandInput_2_csr_translator:uav_write
	wire    [2:0] kbandinput_2_csr_agent_m0_burstcount;                                                    // KBandInput_2_csr_agent:m0_burstcount -> KBandInput_2_csr_translator:uav_burstcount
	wire          kbandinput_2_csr_agent_rf_source_valid;                                                  // KBandInput_2_csr_agent:rf_source_valid -> KBandInput_2_csr_agent_rsp_fifo:in_valid
	wire  [123:0] kbandinput_2_csr_agent_rf_source_data;                                                   // KBandInput_2_csr_agent:rf_source_data -> KBandInput_2_csr_agent_rsp_fifo:in_data
	wire          kbandinput_2_csr_agent_rf_source_ready;                                                  // KBandInput_2_csr_agent_rsp_fifo:in_ready -> KBandInput_2_csr_agent:rf_source_ready
	wire          kbandinput_2_csr_agent_rf_source_startofpacket;                                          // KBandInput_2_csr_agent:rf_source_startofpacket -> KBandInput_2_csr_agent_rsp_fifo:in_startofpacket
	wire          kbandinput_2_csr_agent_rf_source_endofpacket;                                            // KBandInput_2_csr_agent:rf_source_endofpacket -> KBandInput_2_csr_agent_rsp_fifo:in_endofpacket
	wire          kbandinput_2_csr_agent_rsp_fifo_out_valid;                                               // KBandInput_2_csr_agent_rsp_fifo:out_valid -> KBandInput_2_csr_agent:rf_sink_valid
	wire  [123:0] kbandinput_2_csr_agent_rsp_fifo_out_data;                                                // KBandInput_2_csr_agent_rsp_fifo:out_data -> KBandInput_2_csr_agent:rf_sink_data
	wire          kbandinput_2_csr_agent_rsp_fifo_out_ready;                                               // KBandInput_2_csr_agent:rf_sink_ready -> KBandInput_2_csr_agent_rsp_fifo:out_ready
	wire          kbandinput_2_csr_agent_rsp_fifo_out_startofpacket;                                       // KBandInput_2_csr_agent_rsp_fifo:out_startofpacket -> KBandInput_2_csr_agent:rf_sink_startofpacket
	wire          kbandinput_2_csr_agent_rsp_fifo_out_endofpacket;                                         // KBandInput_2_csr_agent_rsp_fifo:out_endofpacket -> KBandInput_2_csr_agent:rf_sink_endofpacket
	wire          kbandinput_2_csr_agent_rdata_fifo_src_valid;                                             // KBandInput_2_csr_agent:rdata_fifo_src_valid -> KBandInput_2_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] kbandinput_2_csr_agent_rdata_fifo_src_data;                                              // KBandInput_2_csr_agent:rdata_fifo_src_data -> KBandInput_2_csr_agent:rdata_fifo_sink_data
	wire          kbandinput_2_csr_agent_rdata_fifo_src_ready;                                             // KBandInput_2_csr_agent:rdata_fifo_sink_ready -> KBandInput_2_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                                   // cmd_mux_002:src_valid -> KBandInput_2_csr_agent:cp_valid
	wire  [122:0] cmd_mux_002_src_data;                                                                    // cmd_mux_002:src_data -> KBandInput_2_csr_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                   // KBandInput_2_csr_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [10:0] cmd_mux_002_src_channel;                                                                 // cmd_mux_002:src_channel -> KBandInput_2_csr_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                           // cmd_mux_002:src_startofpacket -> KBandInput_2_csr_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                             // cmd_mux_002:src_endofpacket -> KBandInput_2_csr_agent:cp_endofpacket
	wire  [127:0] kbandoutput_descriptor_slave_agent_m0_readdata;                                          // KBandOutput_descriptor_slave_translator:uav_readdata -> KBandOutput_descriptor_slave_agent:m0_readdata
	wire          kbandoutput_descriptor_slave_agent_m0_waitrequest;                                       // KBandOutput_descriptor_slave_translator:uav_waitrequest -> KBandOutput_descriptor_slave_agent:m0_waitrequest
	wire          kbandoutput_descriptor_slave_agent_m0_debugaccess;                                       // KBandOutput_descriptor_slave_agent:m0_debugaccess -> KBandOutput_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] kbandoutput_descriptor_slave_agent_m0_address;                                           // KBandOutput_descriptor_slave_agent:m0_address -> KBandOutput_descriptor_slave_translator:uav_address
	wire   [15:0] kbandoutput_descriptor_slave_agent_m0_byteenable;                                        // KBandOutput_descriptor_slave_agent:m0_byteenable -> KBandOutput_descriptor_slave_translator:uav_byteenable
	wire          kbandoutput_descriptor_slave_agent_m0_read;                                              // KBandOutput_descriptor_slave_agent:m0_read -> KBandOutput_descriptor_slave_translator:uav_read
	wire          kbandoutput_descriptor_slave_agent_m0_readdatavalid;                                     // KBandOutput_descriptor_slave_translator:uav_readdatavalid -> KBandOutput_descriptor_slave_agent:m0_readdatavalid
	wire          kbandoutput_descriptor_slave_agent_m0_lock;                                              // KBandOutput_descriptor_slave_agent:m0_lock -> KBandOutput_descriptor_slave_translator:uav_lock
	wire  [127:0] kbandoutput_descriptor_slave_agent_m0_writedata;                                         // KBandOutput_descriptor_slave_agent:m0_writedata -> KBandOutput_descriptor_slave_translator:uav_writedata
	wire          kbandoutput_descriptor_slave_agent_m0_write;                                             // KBandOutput_descriptor_slave_agent:m0_write -> KBandOutput_descriptor_slave_translator:uav_write
	wire    [4:0] kbandoutput_descriptor_slave_agent_m0_burstcount;                                        // KBandOutput_descriptor_slave_agent:m0_burstcount -> KBandOutput_descriptor_slave_translator:uav_burstcount
	wire          kbandoutput_descriptor_slave_agent_rf_source_valid;                                      // KBandOutput_descriptor_slave_agent:rf_source_valid -> KBandOutput_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [231:0] kbandoutput_descriptor_slave_agent_rf_source_data;                                       // KBandOutput_descriptor_slave_agent:rf_source_data -> KBandOutput_descriptor_slave_agent_rsp_fifo:in_data
	wire          kbandoutput_descriptor_slave_agent_rf_source_ready;                                      // KBandOutput_descriptor_slave_agent_rsp_fifo:in_ready -> KBandOutput_descriptor_slave_agent:rf_source_ready
	wire          kbandoutput_descriptor_slave_agent_rf_source_startofpacket;                              // KBandOutput_descriptor_slave_agent:rf_source_startofpacket -> KBandOutput_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          kbandoutput_descriptor_slave_agent_rf_source_endofpacket;                                // KBandOutput_descriptor_slave_agent:rf_source_endofpacket -> KBandOutput_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          kbandoutput_descriptor_slave_agent_rsp_fifo_out_valid;                                   // KBandOutput_descriptor_slave_agent_rsp_fifo:out_valid -> KBandOutput_descriptor_slave_agent:rf_sink_valid
	wire  [231:0] kbandoutput_descriptor_slave_agent_rsp_fifo_out_data;                                    // KBandOutput_descriptor_slave_agent_rsp_fifo:out_data -> KBandOutput_descriptor_slave_agent:rf_sink_data
	wire          kbandoutput_descriptor_slave_agent_rsp_fifo_out_ready;                                   // KBandOutput_descriptor_slave_agent:rf_sink_ready -> KBandOutput_descriptor_slave_agent_rsp_fifo:out_ready
	wire          kbandoutput_descriptor_slave_agent_rsp_fifo_out_startofpacket;                           // KBandOutput_descriptor_slave_agent_rsp_fifo:out_startofpacket -> KBandOutput_descriptor_slave_agent:rf_sink_startofpacket
	wire          kbandoutput_descriptor_slave_agent_rsp_fifo_out_endofpacket;                             // KBandOutput_descriptor_slave_agent_rsp_fifo:out_endofpacket -> KBandOutput_descriptor_slave_agent:rf_sink_endofpacket
	wire          kbandoutput_descriptor_slave_agent_rdata_fifo_src_valid;                                 // KBandOutput_descriptor_slave_agent:rdata_fifo_src_valid -> KBandOutput_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] kbandoutput_descriptor_slave_agent_rdata_fifo_src_data;                                  // KBandOutput_descriptor_slave_agent:rdata_fifo_src_data -> KBandOutput_descriptor_slave_agent:rdata_fifo_sink_data
	wire          kbandoutput_descriptor_slave_agent_rdata_fifo_src_ready;                                 // KBandOutput_descriptor_slave_agent:rdata_fifo_sink_ready -> KBandOutput_descriptor_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                                   // cmd_mux_003:src_valid -> KBandOutput_descriptor_slave_agent:cp_valid
	wire  [230:0] cmd_mux_003_src_data;                                                                    // cmd_mux_003:src_data -> KBandOutput_descriptor_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                   // KBandOutput_descriptor_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [10:0] cmd_mux_003_src_channel;                                                                 // cmd_mux_003:src_channel -> KBandOutput_descriptor_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                           // cmd_mux_003:src_startofpacket -> KBandOutput_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                             // cmd_mux_003:src_endofpacket -> KBandOutput_descriptor_slave_agent:cp_endofpacket
	wire  [127:0] kbandinput_1_descriptor_slave_agent_m0_readdata;                                         // KBandInput_1_descriptor_slave_translator:uav_readdata -> KBandInput_1_descriptor_slave_agent:m0_readdata
	wire          kbandinput_1_descriptor_slave_agent_m0_waitrequest;                                      // KBandInput_1_descriptor_slave_translator:uav_waitrequest -> KBandInput_1_descriptor_slave_agent:m0_waitrequest
	wire          kbandinput_1_descriptor_slave_agent_m0_debugaccess;                                      // KBandInput_1_descriptor_slave_agent:m0_debugaccess -> KBandInput_1_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] kbandinput_1_descriptor_slave_agent_m0_address;                                          // KBandInput_1_descriptor_slave_agent:m0_address -> KBandInput_1_descriptor_slave_translator:uav_address
	wire   [15:0] kbandinput_1_descriptor_slave_agent_m0_byteenable;                                       // KBandInput_1_descriptor_slave_agent:m0_byteenable -> KBandInput_1_descriptor_slave_translator:uav_byteenable
	wire          kbandinput_1_descriptor_slave_agent_m0_read;                                             // KBandInput_1_descriptor_slave_agent:m0_read -> KBandInput_1_descriptor_slave_translator:uav_read
	wire          kbandinput_1_descriptor_slave_agent_m0_readdatavalid;                                    // KBandInput_1_descriptor_slave_translator:uav_readdatavalid -> KBandInput_1_descriptor_slave_agent:m0_readdatavalid
	wire          kbandinput_1_descriptor_slave_agent_m0_lock;                                             // KBandInput_1_descriptor_slave_agent:m0_lock -> KBandInput_1_descriptor_slave_translator:uav_lock
	wire  [127:0] kbandinput_1_descriptor_slave_agent_m0_writedata;                                        // KBandInput_1_descriptor_slave_agent:m0_writedata -> KBandInput_1_descriptor_slave_translator:uav_writedata
	wire          kbandinput_1_descriptor_slave_agent_m0_write;                                            // KBandInput_1_descriptor_slave_agent:m0_write -> KBandInput_1_descriptor_slave_translator:uav_write
	wire    [4:0] kbandinput_1_descriptor_slave_agent_m0_burstcount;                                       // KBandInput_1_descriptor_slave_agent:m0_burstcount -> KBandInput_1_descriptor_slave_translator:uav_burstcount
	wire          kbandinput_1_descriptor_slave_agent_rf_source_valid;                                     // KBandInput_1_descriptor_slave_agent:rf_source_valid -> KBandInput_1_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [231:0] kbandinput_1_descriptor_slave_agent_rf_source_data;                                      // KBandInput_1_descriptor_slave_agent:rf_source_data -> KBandInput_1_descriptor_slave_agent_rsp_fifo:in_data
	wire          kbandinput_1_descriptor_slave_agent_rf_source_ready;                                     // KBandInput_1_descriptor_slave_agent_rsp_fifo:in_ready -> KBandInput_1_descriptor_slave_agent:rf_source_ready
	wire          kbandinput_1_descriptor_slave_agent_rf_source_startofpacket;                             // KBandInput_1_descriptor_slave_agent:rf_source_startofpacket -> KBandInput_1_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          kbandinput_1_descriptor_slave_agent_rf_source_endofpacket;                               // KBandInput_1_descriptor_slave_agent:rf_source_endofpacket -> KBandInput_1_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          kbandinput_1_descriptor_slave_agent_rsp_fifo_out_valid;                                  // KBandInput_1_descriptor_slave_agent_rsp_fifo:out_valid -> KBandInput_1_descriptor_slave_agent:rf_sink_valid
	wire  [231:0] kbandinput_1_descriptor_slave_agent_rsp_fifo_out_data;                                   // KBandInput_1_descriptor_slave_agent_rsp_fifo:out_data -> KBandInput_1_descriptor_slave_agent:rf_sink_data
	wire          kbandinput_1_descriptor_slave_agent_rsp_fifo_out_ready;                                  // KBandInput_1_descriptor_slave_agent:rf_sink_ready -> KBandInput_1_descriptor_slave_agent_rsp_fifo:out_ready
	wire          kbandinput_1_descriptor_slave_agent_rsp_fifo_out_startofpacket;                          // KBandInput_1_descriptor_slave_agent_rsp_fifo:out_startofpacket -> KBandInput_1_descriptor_slave_agent:rf_sink_startofpacket
	wire          kbandinput_1_descriptor_slave_agent_rsp_fifo_out_endofpacket;                            // KBandInput_1_descriptor_slave_agent_rsp_fifo:out_endofpacket -> KBandInput_1_descriptor_slave_agent:rf_sink_endofpacket
	wire          kbandinput_1_descriptor_slave_agent_rdata_fifo_src_valid;                                // KBandInput_1_descriptor_slave_agent:rdata_fifo_src_valid -> KBandInput_1_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] kbandinput_1_descriptor_slave_agent_rdata_fifo_src_data;                                 // KBandInput_1_descriptor_slave_agent:rdata_fifo_src_data -> KBandInput_1_descriptor_slave_agent:rdata_fifo_sink_data
	wire          kbandinput_1_descriptor_slave_agent_rdata_fifo_src_ready;                                // KBandInput_1_descriptor_slave_agent:rdata_fifo_sink_ready -> KBandInput_1_descriptor_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                                   // cmd_mux_004:src_valid -> KBandInput_1_descriptor_slave_agent:cp_valid
	wire  [230:0] cmd_mux_004_src_data;                                                                    // cmd_mux_004:src_data -> KBandInput_1_descriptor_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                   // KBandInput_1_descriptor_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [10:0] cmd_mux_004_src_channel;                                                                 // cmd_mux_004:src_channel -> KBandInput_1_descriptor_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                           // cmd_mux_004:src_startofpacket -> KBandInput_1_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                             // cmd_mux_004:src_endofpacket -> KBandInput_1_descriptor_slave_agent:cp_endofpacket
	wire  [127:0] kbandinput_2_descriptor_slave_agent_m0_readdata;                                         // KBandInput_2_descriptor_slave_translator:uav_readdata -> KBandInput_2_descriptor_slave_agent:m0_readdata
	wire          kbandinput_2_descriptor_slave_agent_m0_waitrequest;                                      // KBandInput_2_descriptor_slave_translator:uav_waitrequest -> KBandInput_2_descriptor_slave_agent:m0_waitrequest
	wire          kbandinput_2_descriptor_slave_agent_m0_debugaccess;                                      // KBandInput_2_descriptor_slave_agent:m0_debugaccess -> KBandInput_2_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] kbandinput_2_descriptor_slave_agent_m0_address;                                          // KBandInput_2_descriptor_slave_agent:m0_address -> KBandInput_2_descriptor_slave_translator:uav_address
	wire   [15:0] kbandinput_2_descriptor_slave_agent_m0_byteenable;                                       // KBandInput_2_descriptor_slave_agent:m0_byteenable -> KBandInput_2_descriptor_slave_translator:uav_byteenable
	wire          kbandinput_2_descriptor_slave_agent_m0_read;                                             // KBandInput_2_descriptor_slave_agent:m0_read -> KBandInput_2_descriptor_slave_translator:uav_read
	wire          kbandinput_2_descriptor_slave_agent_m0_readdatavalid;                                    // KBandInput_2_descriptor_slave_translator:uav_readdatavalid -> KBandInput_2_descriptor_slave_agent:m0_readdatavalid
	wire          kbandinput_2_descriptor_slave_agent_m0_lock;                                             // KBandInput_2_descriptor_slave_agent:m0_lock -> KBandInput_2_descriptor_slave_translator:uav_lock
	wire  [127:0] kbandinput_2_descriptor_slave_agent_m0_writedata;                                        // KBandInput_2_descriptor_slave_agent:m0_writedata -> KBandInput_2_descriptor_slave_translator:uav_writedata
	wire          kbandinput_2_descriptor_slave_agent_m0_write;                                            // KBandInput_2_descriptor_slave_agent:m0_write -> KBandInput_2_descriptor_slave_translator:uav_write
	wire    [4:0] kbandinput_2_descriptor_slave_agent_m0_burstcount;                                       // KBandInput_2_descriptor_slave_agent:m0_burstcount -> KBandInput_2_descriptor_slave_translator:uav_burstcount
	wire          kbandinput_2_descriptor_slave_agent_rf_source_valid;                                     // KBandInput_2_descriptor_slave_agent:rf_source_valid -> KBandInput_2_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [231:0] kbandinput_2_descriptor_slave_agent_rf_source_data;                                      // KBandInput_2_descriptor_slave_agent:rf_source_data -> KBandInput_2_descriptor_slave_agent_rsp_fifo:in_data
	wire          kbandinput_2_descriptor_slave_agent_rf_source_ready;                                     // KBandInput_2_descriptor_slave_agent_rsp_fifo:in_ready -> KBandInput_2_descriptor_slave_agent:rf_source_ready
	wire          kbandinput_2_descriptor_slave_agent_rf_source_startofpacket;                             // KBandInput_2_descriptor_slave_agent:rf_source_startofpacket -> KBandInput_2_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          kbandinput_2_descriptor_slave_agent_rf_source_endofpacket;                               // KBandInput_2_descriptor_slave_agent:rf_source_endofpacket -> KBandInput_2_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          kbandinput_2_descriptor_slave_agent_rsp_fifo_out_valid;                                  // KBandInput_2_descriptor_slave_agent_rsp_fifo:out_valid -> KBandInput_2_descriptor_slave_agent:rf_sink_valid
	wire  [231:0] kbandinput_2_descriptor_slave_agent_rsp_fifo_out_data;                                   // KBandInput_2_descriptor_slave_agent_rsp_fifo:out_data -> KBandInput_2_descriptor_slave_agent:rf_sink_data
	wire          kbandinput_2_descriptor_slave_agent_rsp_fifo_out_ready;                                  // KBandInput_2_descriptor_slave_agent:rf_sink_ready -> KBandInput_2_descriptor_slave_agent_rsp_fifo:out_ready
	wire          kbandinput_2_descriptor_slave_agent_rsp_fifo_out_startofpacket;                          // KBandInput_2_descriptor_slave_agent_rsp_fifo:out_startofpacket -> KBandInput_2_descriptor_slave_agent:rf_sink_startofpacket
	wire          kbandinput_2_descriptor_slave_agent_rsp_fifo_out_endofpacket;                            // KBandInput_2_descriptor_slave_agent_rsp_fifo:out_endofpacket -> KBandInput_2_descriptor_slave_agent:rf_sink_endofpacket
	wire          kbandinput_2_descriptor_slave_agent_rdata_fifo_src_valid;                                // KBandInput_2_descriptor_slave_agent:rdata_fifo_src_valid -> KBandInput_2_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] kbandinput_2_descriptor_slave_agent_rdata_fifo_src_data;                                 // KBandInput_2_descriptor_slave_agent:rdata_fifo_src_data -> KBandInput_2_descriptor_slave_agent:rdata_fifo_sink_data
	wire          kbandinput_2_descriptor_slave_agent_rdata_fifo_src_ready;                                // KBandInput_2_descriptor_slave_agent:rdata_fifo_sink_ready -> KBandInput_2_descriptor_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                                   // cmd_mux_005:src_valid -> KBandInput_2_descriptor_slave_agent:cp_valid
	wire  [230:0] cmd_mux_005_src_data;                                                                    // cmd_mux_005:src_data -> KBandInput_2_descriptor_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                   // KBandInput_2_descriptor_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [10:0] cmd_mux_005_src_channel;                                                                 // cmd_mux_005:src_channel -> KBandInput_2_descriptor_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                           // cmd_mux_005:src_startofpacket -> KBandInput_2_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                             // cmd_mux_005:src_endofpacket -> KBandInput_2_descriptor_slave_agent:cp_endofpacket
	wire   [31:0] onchip_mem_lw_s1_agent_m0_readdata;                                                      // onchip_mem_LW_s1_translator:uav_readdata -> onchip_mem_LW_s1_agent:m0_readdata
	wire          onchip_mem_lw_s1_agent_m0_waitrequest;                                                   // onchip_mem_LW_s1_translator:uav_waitrequest -> onchip_mem_LW_s1_agent:m0_waitrequest
	wire          onchip_mem_lw_s1_agent_m0_debugaccess;                                                   // onchip_mem_LW_s1_agent:m0_debugaccess -> onchip_mem_LW_s1_translator:uav_debugaccess
	wire   [31:0] onchip_mem_lw_s1_agent_m0_address;                                                       // onchip_mem_LW_s1_agent:m0_address -> onchip_mem_LW_s1_translator:uav_address
	wire    [3:0] onchip_mem_lw_s1_agent_m0_byteenable;                                                    // onchip_mem_LW_s1_agent:m0_byteenable -> onchip_mem_LW_s1_translator:uav_byteenable
	wire          onchip_mem_lw_s1_agent_m0_read;                                                          // onchip_mem_LW_s1_agent:m0_read -> onchip_mem_LW_s1_translator:uav_read
	wire          onchip_mem_lw_s1_agent_m0_readdatavalid;                                                 // onchip_mem_LW_s1_translator:uav_readdatavalid -> onchip_mem_LW_s1_agent:m0_readdatavalid
	wire          onchip_mem_lw_s1_agent_m0_lock;                                                          // onchip_mem_LW_s1_agent:m0_lock -> onchip_mem_LW_s1_translator:uav_lock
	wire   [31:0] onchip_mem_lw_s1_agent_m0_writedata;                                                     // onchip_mem_LW_s1_agent:m0_writedata -> onchip_mem_LW_s1_translator:uav_writedata
	wire          onchip_mem_lw_s1_agent_m0_write;                                                         // onchip_mem_LW_s1_agent:m0_write -> onchip_mem_LW_s1_translator:uav_write
	wire    [2:0] onchip_mem_lw_s1_agent_m0_burstcount;                                                    // onchip_mem_LW_s1_agent:m0_burstcount -> onchip_mem_LW_s1_translator:uav_burstcount
	wire          onchip_mem_lw_s1_agent_rf_source_valid;                                                  // onchip_mem_LW_s1_agent:rf_source_valid -> onchip_mem_LW_s1_agent_rsp_fifo:in_valid
	wire  [123:0] onchip_mem_lw_s1_agent_rf_source_data;                                                   // onchip_mem_LW_s1_agent:rf_source_data -> onchip_mem_LW_s1_agent_rsp_fifo:in_data
	wire          onchip_mem_lw_s1_agent_rf_source_ready;                                                  // onchip_mem_LW_s1_agent_rsp_fifo:in_ready -> onchip_mem_LW_s1_agent:rf_source_ready
	wire          onchip_mem_lw_s1_agent_rf_source_startofpacket;                                          // onchip_mem_LW_s1_agent:rf_source_startofpacket -> onchip_mem_LW_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_mem_lw_s1_agent_rf_source_endofpacket;                                            // onchip_mem_LW_s1_agent:rf_source_endofpacket -> onchip_mem_LW_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_mem_lw_s1_agent_rsp_fifo_out_valid;                                               // onchip_mem_LW_s1_agent_rsp_fifo:out_valid -> onchip_mem_LW_s1_agent:rf_sink_valid
	wire  [123:0] onchip_mem_lw_s1_agent_rsp_fifo_out_data;                                                // onchip_mem_LW_s1_agent_rsp_fifo:out_data -> onchip_mem_LW_s1_agent:rf_sink_data
	wire          onchip_mem_lw_s1_agent_rsp_fifo_out_ready;                                               // onchip_mem_LW_s1_agent:rf_sink_ready -> onchip_mem_LW_s1_agent_rsp_fifo:out_ready
	wire          onchip_mem_lw_s1_agent_rsp_fifo_out_startofpacket;                                       // onchip_mem_LW_s1_agent_rsp_fifo:out_startofpacket -> onchip_mem_LW_s1_agent:rf_sink_startofpacket
	wire          onchip_mem_lw_s1_agent_rsp_fifo_out_endofpacket;                                         // onchip_mem_LW_s1_agent_rsp_fifo:out_endofpacket -> onchip_mem_LW_s1_agent:rf_sink_endofpacket
	wire          onchip_mem_lw_s1_agent_rdata_fifo_src_valid;                                             // onchip_mem_LW_s1_agent:rdata_fifo_src_valid -> onchip_mem_LW_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_mem_lw_s1_agent_rdata_fifo_src_data;                                              // onchip_mem_LW_s1_agent:rdata_fifo_src_data -> onchip_mem_LW_s1_agent:rdata_fifo_sink_data
	wire          onchip_mem_lw_s1_agent_rdata_fifo_src_ready;                                             // onchip_mem_LW_s1_agent:rdata_fifo_sink_ready -> onchip_mem_LW_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                                   // cmd_mux_006:src_valid -> onchip_mem_LW_s1_agent:cp_valid
	wire  [122:0] cmd_mux_006_src_data;                                                                    // cmd_mux_006:src_data -> onchip_mem_LW_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                   // onchip_mem_LW_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [10:0] cmd_mux_006_src_channel;                                                                 // cmd_mux_006:src_channel -> onchip_mem_LW_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                           // cmd_mux_006:src_startofpacket -> onchip_mem_LW_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                             // cmd_mux_006:src_endofpacket -> onchip_mem_LW_s1_agent:cp_endofpacket
	wire   [31:0] pio_0_s1_agent_m0_readdata;                                                              // pio_0_s1_translator:uav_readdata -> pio_0_s1_agent:m0_readdata
	wire          pio_0_s1_agent_m0_waitrequest;                                                           // pio_0_s1_translator:uav_waitrequest -> pio_0_s1_agent:m0_waitrequest
	wire          pio_0_s1_agent_m0_debugaccess;                                                           // pio_0_s1_agent:m0_debugaccess -> pio_0_s1_translator:uav_debugaccess
	wire   [31:0] pio_0_s1_agent_m0_address;                                                               // pio_0_s1_agent:m0_address -> pio_0_s1_translator:uav_address
	wire    [3:0] pio_0_s1_agent_m0_byteenable;                                                            // pio_0_s1_agent:m0_byteenable -> pio_0_s1_translator:uav_byteenable
	wire          pio_0_s1_agent_m0_read;                                                                  // pio_0_s1_agent:m0_read -> pio_0_s1_translator:uav_read
	wire          pio_0_s1_agent_m0_readdatavalid;                                                         // pio_0_s1_translator:uav_readdatavalid -> pio_0_s1_agent:m0_readdatavalid
	wire          pio_0_s1_agent_m0_lock;                                                                  // pio_0_s1_agent:m0_lock -> pio_0_s1_translator:uav_lock
	wire   [31:0] pio_0_s1_agent_m0_writedata;                                                             // pio_0_s1_agent:m0_writedata -> pio_0_s1_translator:uav_writedata
	wire          pio_0_s1_agent_m0_write;                                                                 // pio_0_s1_agent:m0_write -> pio_0_s1_translator:uav_write
	wire    [2:0] pio_0_s1_agent_m0_burstcount;                                                            // pio_0_s1_agent:m0_burstcount -> pio_0_s1_translator:uav_burstcount
	wire          pio_0_s1_agent_rf_source_valid;                                                          // pio_0_s1_agent:rf_source_valid -> pio_0_s1_agent_rsp_fifo:in_valid
	wire  [123:0] pio_0_s1_agent_rf_source_data;                                                           // pio_0_s1_agent:rf_source_data -> pio_0_s1_agent_rsp_fifo:in_data
	wire          pio_0_s1_agent_rf_source_ready;                                                          // pio_0_s1_agent_rsp_fifo:in_ready -> pio_0_s1_agent:rf_source_ready
	wire          pio_0_s1_agent_rf_source_startofpacket;                                                  // pio_0_s1_agent:rf_source_startofpacket -> pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_0_s1_agent_rf_source_endofpacket;                                                    // pio_0_s1_agent:rf_source_endofpacket -> pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_0_s1_agent_rsp_fifo_out_valid;                                                       // pio_0_s1_agent_rsp_fifo:out_valid -> pio_0_s1_agent:rf_sink_valid
	wire  [123:0] pio_0_s1_agent_rsp_fifo_out_data;                                                        // pio_0_s1_agent_rsp_fifo:out_data -> pio_0_s1_agent:rf_sink_data
	wire          pio_0_s1_agent_rsp_fifo_out_ready;                                                       // pio_0_s1_agent:rf_sink_ready -> pio_0_s1_agent_rsp_fifo:out_ready
	wire          pio_0_s1_agent_rsp_fifo_out_startofpacket;                                               // pio_0_s1_agent_rsp_fifo:out_startofpacket -> pio_0_s1_agent:rf_sink_startofpacket
	wire          pio_0_s1_agent_rsp_fifo_out_endofpacket;                                                 // pio_0_s1_agent_rsp_fifo:out_endofpacket -> pio_0_s1_agent:rf_sink_endofpacket
	wire          pio_0_s1_agent_rdata_fifo_src_valid;                                                     // pio_0_s1_agent:rdata_fifo_src_valid -> pio_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] pio_0_s1_agent_rdata_fifo_src_data;                                                      // pio_0_s1_agent:rdata_fifo_src_data -> pio_0_s1_agent:rdata_fifo_sink_data
	wire          pio_0_s1_agent_rdata_fifo_src_ready;                                                     // pio_0_s1_agent:rdata_fifo_sink_ready -> pio_0_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                                   // cmd_mux_007:src_valid -> pio_0_s1_agent:cp_valid
	wire  [122:0] cmd_mux_007_src_data;                                                                    // cmd_mux_007:src_data -> pio_0_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                   // pio_0_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [10:0] cmd_mux_007_src_channel;                                                                 // cmd_mux_007:src_channel -> pio_0_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                           // cmd_mux_007:src_startofpacket -> pio_0_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                             // cmd_mux_007:src_endofpacket -> pio_0_s1_agent:cp_endofpacket
	wire   [31:0] onchip_mem_lw2_s1_agent_m0_readdata;                                                     // onchip_mem_LW2_s1_translator:uav_readdata -> onchip_mem_LW2_s1_agent:m0_readdata
	wire          onchip_mem_lw2_s1_agent_m0_waitrequest;                                                  // onchip_mem_LW2_s1_translator:uav_waitrequest -> onchip_mem_LW2_s1_agent:m0_waitrequest
	wire          onchip_mem_lw2_s1_agent_m0_debugaccess;                                                  // onchip_mem_LW2_s1_agent:m0_debugaccess -> onchip_mem_LW2_s1_translator:uav_debugaccess
	wire   [31:0] onchip_mem_lw2_s1_agent_m0_address;                                                      // onchip_mem_LW2_s1_agent:m0_address -> onchip_mem_LW2_s1_translator:uav_address
	wire    [3:0] onchip_mem_lw2_s1_agent_m0_byteenable;                                                   // onchip_mem_LW2_s1_agent:m0_byteenable -> onchip_mem_LW2_s1_translator:uav_byteenable
	wire          onchip_mem_lw2_s1_agent_m0_read;                                                         // onchip_mem_LW2_s1_agent:m0_read -> onchip_mem_LW2_s1_translator:uav_read
	wire          onchip_mem_lw2_s1_agent_m0_readdatavalid;                                                // onchip_mem_LW2_s1_translator:uav_readdatavalid -> onchip_mem_LW2_s1_agent:m0_readdatavalid
	wire          onchip_mem_lw2_s1_agent_m0_lock;                                                         // onchip_mem_LW2_s1_agent:m0_lock -> onchip_mem_LW2_s1_translator:uav_lock
	wire   [31:0] onchip_mem_lw2_s1_agent_m0_writedata;                                                    // onchip_mem_LW2_s1_agent:m0_writedata -> onchip_mem_LW2_s1_translator:uav_writedata
	wire          onchip_mem_lw2_s1_agent_m0_write;                                                        // onchip_mem_LW2_s1_agent:m0_write -> onchip_mem_LW2_s1_translator:uav_write
	wire    [2:0] onchip_mem_lw2_s1_agent_m0_burstcount;                                                   // onchip_mem_LW2_s1_agent:m0_burstcount -> onchip_mem_LW2_s1_translator:uav_burstcount
	wire          onchip_mem_lw2_s1_agent_rf_source_valid;                                                 // onchip_mem_LW2_s1_agent:rf_source_valid -> onchip_mem_LW2_s1_agent_rsp_fifo:in_valid
	wire  [123:0] onchip_mem_lw2_s1_agent_rf_source_data;                                                  // onchip_mem_LW2_s1_agent:rf_source_data -> onchip_mem_LW2_s1_agent_rsp_fifo:in_data
	wire          onchip_mem_lw2_s1_agent_rf_source_ready;                                                 // onchip_mem_LW2_s1_agent_rsp_fifo:in_ready -> onchip_mem_LW2_s1_agent:rf_source_ready
	wire          onchip_mem_lw2_s1_agent_rf_source_startofpacket;                                         // onchip_mem_LW2_s1_agent:rf_source_startofpacket -> onchip_mem_LW2_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_mem_lw2_s1_agent_rf_source_endofpacket;                                           // onchip_mem_LW2_s1_agent:rf_source_endofpacket -> onchip_mem_LW2_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_mem_lw2_s1_agent_rsp_fifo_out_valid;                                              // onchip_mem_LW2_s1_agent_rsp_fifo:out_valid -> onchip_mem_LW2_s1_agent:rf_sink_valid
	wire  [123:0] onchip_mem_lw2_s1_agent_rsp_fifo_out_data;                                               // onchip_mem_LW2_s1_agent_rsp_fifo:out_data -> onchip_mem_LW2_s1_agent:rf_sink_data
	wire          onchip_mem_lw2_s1_agent_rsp_fifo_out_ready;                                              // onchip_mem_LW2_s1_agent:rf_sink_ready -> onchip_mem_LW2_s1_agent_rsp_fifo:out_ready
	wire          onchip_mem_lw2_s1_agent_rsp_fifo_out_startofpacket;                                      // onchip_mem_LW2_s1_agent_rsp_fifo:out_startofpacket -> onchip_mem_LW2_s1_agent:rf_sink_startofpacket
	wire          onchip_mem_lw2_s1_agent_rsp_fifo_out_endofpacket;                                        // onchip_mem_LW2_s1_agent_rsp_fifo:out_endofpacket -> onchip_mem_LW2_s1_agent:rf_sink_endofpacket
	wire          onchip_mem_lw2_s1_agent_rdata_fifo_src_valid;                                            // onchip_mem_LW2_s1_agent:rdata_fifo_src_valid -> onchip_mem_LW2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_mem_lw2_s1_agent_rdata_fifo_src_data;                                             // onchip_mem_LW2_s1_agent:rdata_fifo_src_data -> onchip_mem_LW2_s1_agent:rdata_fifo_sink_data
	wire          onchip_mem_lw2_s1_agent_rdata_fifo_src_ready;                                            // onchip_mem_LW2_s1_agent:rdata_fifo_sink_ready -> onchip_mem_LW2_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_valid;                                                                   // cmd_mux_008:src_valid -> onchip_mem_LW2_s1_agent:cp_valid
	wire  [122:0] cmd_mux_008_src_data;                                                                    // cmd_mux_008:src_data -> onchip_mem_LW2_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                   // onchip_mem_LW2_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [10:0] cmd_mux_008_src_channel;                                                                 // cmd_mux_008:src_channel -> onchip_mem_LW2_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                           // cmd_mux_008:src_startofpacket -> onchip_mem_LW2_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                             // cmd_mux_008:src_endofpacket -> onchip_mem_LW2_s1_agent:cp_endofpacket
	wire  [127:0] ddr_s0_agent_m0_readdata;                                                                // DDR_s0_translator:uav_readdata -> DDR_s0_agent:m0_readdata
	wire          ddr_s0_agent_m0_waitrequest;                                                             // DDR_s0_translator:uav_waitrequest -> DDR_s0_agent:m0_waitrequest
	wire          ddr_s0_agent_m0_debugaccess;                                                             // DDR_s0_agent:m0_debugaccess -> DDR_s0_translator:uav_debugaccess
	wire   [31:0] ddr_s0_agent_m0_address;                                                                 // DDR_s0_agent:m0_address -> DDR_s0_translator:uav_address
	wire   [15:0] ddr_s0_agent_m0_byteenable;                                                              // DDR_s0_agent:m0_byteenable -> DDR_s0_translator:uav_byteenable
	wire          ddr_s0_agent_m0_read;                                                                    // DDR_s0_agent:m0_read -> DDR_s0_translator:uav_read
	wire          ddr_s0_agent_m0_readdatavalid;                                                           // DDR_s0_translator:uav_readdatavalid -> DDR_s0_agent:m0_readdatavalid
	wire          ddr_s0_agent_m0_lock;                                                                    // DDR_s0_agent:m0_lock -> DDR_s0_translator:uav_lock
	wire  [127:0] ddr_s0_agent_m0_writedata;                                                               // DDR_s0_agent:m0_writedata -> DDR_s0_translator:uav_writedata
	wire          ddr_s0_agent_m0_write;                                                                   // DDR_s0_agent:m0_write -> DDR_s0_translator:uav_write
	wire    [8:0] ddr_s0_agent_m0_burstcount;                                                              // DDR_s0_agent:m0_burstcount -> DDR_s0_translator:uav_burstcount
	wire          ddr_s0_agent_rf_source_valid;                                                            // DDR_s0_agent:rf_source_valid -> DDR_s0_agent_rsp_fifo:in_valid
	wire  [231:0] ddr_s0_agent_rf_source_data;                                                             // DDR_s0_agent:rf_source_data -> DDR_s0_agent_rsp_fifo:in_data
	wire          ddr_s0_agent_rf_source_ready;                                                            // DDR_s0_agent_rsp_fifo:in_ready -> DDR_s0_agent:rf_source_ready
	wire          ddr_s0_agent_rf_source_startofpacket;                                                    // DDR_s0_agent:rf_source_startofpacket -> DDR_s0_agent_rsp_fifo:in_startofpacket
	wire          ddr_s0_agent_rf_source_endofpacket;                                                      // DDR_s0_agent:rf_source_endofpacket -> DDR_s0_agent_rsp_fifo:in_endofpacket
	wire          ddr_s0_agent_rsp_fifo_out_valid;                                                         // DDR_s0_agent_rsp_fifo:out_valid -> DDR_s0_agent:rf_sink_valid
	wire  [231:0] ddr_s0_agent_rsp_fifo_out_data;                                                          // DDR_s0_agent_rsp_fifo:out_data -> DDR_s0_agent:rf_sink_data
	wire          ddr_s0_agent_rsp_fifo_out_ready;                                                         // DDR_s0_agent:rf_sink_ready -> DDR_s0_agent_rsp_fifo:out_ready
	wire          ddr_s0_agent_rsp_fifo_out_startofpacket;                                                 // DDR_s0_agent_rsp_fifo:out_startofpacket -> DDR_s0_agent:rf_sink_startofpacket
	wire          ddr_s0_agent_rsp_fifo_out_endofpacket;                                                   // DDR_s0_agent_rsp_fifo:out_endofpacket -> DDR_s0_agent:rf_sink_endofpacket
	wire          ddr_s0_agent_rdata_fifo_src_valid;                                                       // DDR_s0_agent:rdata_fifo_src_valid -> DDR_s0_agent:rdata_fifo_sink_valid
	wire  [129:0] ddr_s0_agent_rdata_fifo_src_data;                                                        // DDR_s0_agent:rdata_fifo_src_data -> DDR_s0_agent:rdata_fifo_sink_data
	wire          ddr_s0_agent_rdata_fifo_src_ready;                                                       // DDR_s0_agent:rdata_fifo_sink_ready -> DDR_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                                                   // cmd_mux_009:src_valid -> DDR_s0_agent:cp_valid
	wire  [230:0] cmd_mux_009_src_data;                                                                    // cmd_mux_009:src_data -> DDR_s0_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                   // DDR_s0_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [10:0] cmd_mux_009_src_channel;                                                                 // cmd_mux_009:src_channel -> DDR_s0_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                           // cmd_mux_009:src_startofpacket -> DDR_s0_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                             // cmd_mux_009:src_endofpacket -> DDR_s0_agent:cp_endofpacket
	wire  [127:0] onchip_mem_fpga_slave_s1_agent_m0_readdata;                                              // onchip_mem_FPGA_Slave_s1_translator:uav_readdata -> onchip_mem_FPGA_Slave_s1_agent:m0_readdata
	wire          onchip_mem_fpga_slave_s1_agent_m0_waitrequest;                                           // onchip_mem_FPGA_Slave_s1_translator:uav_waitrequest -> onchip_mem_FPGA_Slave_s1_agent:m0_waitrequest
	wire          onchip_mem_fpga_slave_s1_agent_m0_debugaccess;                                           // onchip_mem_FPGA_Slave_s1_agent:m0_debugaccess -> onchip_mem_FPGA_Slave_s1_translator:uav_debugaccess
	wire   [31:0] onchip_mem_fpga_slave_s1_agent_m0_address;                                               // onchip_mem_FPGA_Slave_s1_agent:m0_address -> onchip_mem_FPGA_Slave_s1_translator:uav_address
	wire   [15:0] onchip_mem_fpga_slave_s1_agent_m0_byteenable;                                            // onchip_mem_FPGA_Slave_s1_agent:m0_byteenable -> onchip_mem_FPGA_Slave_s1_translator:uav_byteenable
	wire          onchip_mem_fpga_slave_s1_agent_m0_read;                                                  // onchip_mem_FPGA_Slave_s1_agent:m0_read -> onchip_mem_FPGA_Slave_s1_translator:uav_read
	wire          onchip_mem_fpga_slave_s1_agent_m0_readdatavalid;                                         // onchip_mem_FPGA_Slave_s1_translator:uav_readdatavalid -> onchip_mem_FPGA_Slave_s1_agent:m0_readdatavalid
	wire          onchip_mem_fpga_slave_s1_agent_m0_lock;                                                  // onchip_mem_FPGA_Slave_s1_agent:m0_lock -> onchip_mem_FPGA_Slave_s1_translator:uav_lock
	wire  [127:0] onchip_mem_fpga_slave_s1_agent_m0_writedata;                                             // onchip_mem_FPGA_Slave_s1_agent:m0_writedata -> onchip_mem_FPGA_Slave_s1_translator:uav_writedata
	wire          onchip_mem_fpga_slave_s1_agent_m0_write;                                                 // onchip_mem_FPGA_Slave_s1_agent:m0_write -> onchip_mem_FPGA_Slave_s1_translator:uav_write
	wire    [4:0] onchip_mem_fpga_slave_s1_agent_m0_burstcount;                                            // onchip_mem_FPGA_Slave_s1_agent:m0_burstcount -> onchip_mem_FPGA_Slave_s1_translator:uav_burstcount
	wire          onchip_mem_fpga_slave_s1_agent_rf_source_valid;                                          // onchip_mem_FPGA_Slave_s1_agent:rf_source_valid -> onchip_mem_FPGA_Slave_s1_agent_rsp_fifo:in_valid
	wire  [231:0] onchip_mem_fpga_slave_s1_agent_rf_source_data;                                           // onchip_mem_FPGA_Slave_s1_agent:rf_source_data -> onchip_mem_FPGA_Slave_s1_agent_rsp_fifo:in_data
	wire          onchip_mem_fpga_slave_s1_agent_rf_source_ready;                                          // onchip_mem_FPGA_Slave_s1_agent_rsp_fifo:in_ready -> onchip_mem_FPGA_Slave_s1_agent:rf_source_ready
	wire          onchip_mem_fpga_slave_s1_agent_rf_source_startofpacket;                                  // onchip_mem_FPGA_Slave_s1_agent:rf_source_startofpacket -> onchip_mem_FPGA_Slave_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_mem_fpga_slave_s1_agent_rf_source_endofpacket;                                    // onchip_mem_FPGA_Slave_s1_agent:rf_source_endofpacket -> onchip_mem_FPGA_Slave_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_valid;                                       // onchip_mem_FPGA_Slave_s1_agent_rsp_fifo:out_valid -> onchip_mem_FPGA_Slave_s1_agent:rf_sink_valid
	wire  [231:0] onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_data;                                        // onchip_mem_FPGA_Slave_s1_agent_rsp_fifo:out_data -> onchip_mem_FPGA_Slave_s1_agent:rf_sink_data
	wire          onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_ready;                                       // onchip_mem_FPGA_Slave_s1_agent:rf_sink_ready -> onchip_mem_FPGA_Slave_s1_agent_rsp_fifo:out_ready
	wire          onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_mem_FPGA_Slave_s1_agent_rsp_fifo:out_startofpacket -> onchip_mem_FPGA_Slave_s1_agent:rf_sink_startofpacket
	wire          onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_mem_FPGA_Slave_s1_agent_rsp_fifo:out_endofpacket -> onchip_mem_FPGA_Slave_s1_agent:rf_sink_endofpacket
	wire          onchip_mem_fpga_slave_s1_agent_rdata_fifo_src_valid;                                     // onchip_mem_FPGA_Slave_s1_agent:rdata_fifo_src_valid -> onchip_mem_FPGA_Slave_s1_agent:rdata_fifo_sink_valid
	wire  [129:0] onchip_mem_fpga_slave_s1_agent_rdata_fifo_src_data;                                      // onchip_mem_FPGA_Slave_s1_agent:rdata_fifo_src_data -> onchip_mem_FPGA_Slave_s1_agent:rdata_fifo_sink_data
	wire          onchip_mem_fpga_slave_s1_agent_rdata_fifo_src_ready;                                     // onchip_mem_FPGA_Slave_s1_agent:rdata_fifo_sink_ready -> onchip_mem_FPGA_Slave_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_valid;                                                                   // cmd_mux_010:src_valid -> onchip_mem_FPGA_Slave_s1_agent:cp_valid
	wire  [230:0] cmd_mux_010_src_data;                                                                    // cmd_mux_010:src_data -> onchip_mem_FPGA_Slave_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                   // onchip_mem_FPGA_Slave_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [10:0] cmd_mux_010_src_channel;                                                                 // cmd_mux_010:src_channel -> onchip_mem_FPGA_Slave_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                           // cmd_mux_010:src_startofpacket -> onchip_mem_FPGA_Slave_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                             // cmd_mux_010:src_endofpacket -> onchip_mem_FPGA_Slave_s1_agent:cp_endofpacket
	wire          mm_bridge_lw_m0_agent_cp_valid;                                                          // mm_bridge_LW_m0_agent:cp_valid -> router:sink_valid
	wire  [122:0] mm_bridge_lw_m0_agent_cp_data;                                                           // mm_bridge_LW_m0_agent:cp_data -> router:sink_data
	wire          mm_bridge_lw_m0_agent_cp_ready;                                                          // router:sink_ready -> mm_bridge_LW_m0_agent:cp_ready
	wire          mm_bridge_lw_m0_agent_cp_startofpacket;                                                  // mm_bridge_LW_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mm_bridge_lw_m0_agent_cp_endofpacket;                                                    // mm_bridge_LW_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          kbandinput_2_mm_read_agent_cp_valid;                                                     // KBandInput_2_mm_read_agent:cp_valid -> router_001:sink_valid
	wire   [95:0] kbandinput_2_mm_read_agent_cp_data;                                                      // KBandInput_2_mm_read_agent:cp_data -> router_001:sink_data
	wire          kbandinput_2_mm_read_agent_cp_ready;                                                     // router_001:sink_ready -> KBandInput_2_mm_read_agent:cp_ready
	wire          kbandinput_2_mm_read_agent_cp_startofpacket;                                             // KBandInput_2_mm_read_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          kbandinput_2_mm_read_agent_cp_endofpacket;                                               // KBandInput_2_mm_read_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          kbandinput_1_mm_read_agent_cp_valid;                                                     // KBandInput_1_mm_read_agent:cp_valid -> router_002:sink_valid
	wire   [95:0] kbandinput_1_mm_read_agent_cp_data;                                                      // KBandInput_1_mm_read_agent:cp_data -> router_002:sink_data
	wire          kbandinput_1_mm_read_agent_cp_ready;                                                     // router_002:sink_ready -> KBandInput_1_mm_read_agent:cp_ready
	wire          kbandinput_1_mm_read_agent_cp_startofpacket;                                             // KBandInput_1_mm_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          kbandinput_1_mm_read_agent_cp_endofpacket;                                               // KBandInput_1_mm_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          kbandoutput_mm_write_agent_cp_valid;                                                     // KBandOutput_mm_write_agent:cp_valid -> router_003:sink_valid
	wire  [230:0] kbandoutput_mm_write_agent_cp_data;                                                      // KBandOutput_mm_write_agent:cp_data -> router_003:sink_data
	wire          kbandoutput_mm_write_agent_cp_ready;                                                     // router_003:sink_ready -> KBandOutput_mm_write_agent:cp_ready
	wire          kbandoutput_mm_write_agent_cp_startofpacket;                                             // KBandOutput_mm_write_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          kbandoutput_mm_write_agent_cp_endofpacket;                                               // KBandOutput_mm_write_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                    // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [230:0] router_003_src_data;                                                                     // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                    // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [10:0] router_003_src_channel;                                                                  // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                            // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                              // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          mm_bridge_fpga_slave_m0_agent_cp_valid;                                                  // mm_bridge_FPGA_Slave_m0_agent:cp_valid -> router_004:sink_valid
	wire  [158:0] mm_bridge_fpga_slave_m0_agent_cp_data;                                                   // mm_bridge_FPGA_Slave_m0_agent:cp_data -> router_004:sink_data
	wire          mm_bridge_fpga_slave_m0_agent_cp_ready;                                                  // router_004:sink_ready -> mm_bridge_FPGA_Slave_m0_agent:cp_ready
	wire          mm_bridge_fpga_slave_m0_agent_cp_startofpacket;                                          // mm_bridge_FPGA_Slave_m0_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          mm_bridge_fpga_slave_m0_agent_cp_endofpacket;                                            // mm_bridge_FPGA_Slave_m0_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                    // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [158:0] router_004_src_data;                                                                     // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                    // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [10:0] router_004_src_channel;                                                                  // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                            // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                              // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          kbandoutput_csr_agent_rp_valid;                                                          // KBandOutput_csr_agent:rp_valid -> router_005:sink_valid
	wire  [122:0] kbandoutput_csr_agent_rp_data;                                                           // KBandOutput_csr_agent:rp_data -> router_005:sink_data
	wire          kbandoutput_csr_agent_rp_ready;                                                          // router_005:sink_ready -> KBandOutput_csr_agent:rp_ready
	wire          kbandoutput_csr_agent_rp_startofpacket;                                                  // KBandOutput_csr_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          kbandoutput_csr_agent_rp_endofpacket;                                                    // KBandOutput_csr_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                    // router_005:src_valid -> rsp_demux:sink_valid
	wire  [122:0] router_005_src_data;                                                                     // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                                    // rsp_demux:sink_ready -> router_005:src_ready
	wire   [10:0] router_005_src_channel;                                                                  // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                                            // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                              // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          kbandinput_1_csr_agent_rp_valid;                                                         // KBandInput_1_csr_agent:rp_valid -> router_006:sink_valid
	wire  [122:0] kbandinput_1_csr_agent_rp_data;                                                          // KBandInput_1_csr_agent:rp_data -> router_006:sink_data
	wire          kbandinput_1_csr_agent_rp_ready;                                                         // router_006:sink_ready -> KBandInput_1_csr_agent:rp_ready
	wire          kbandinput_1_csr_agent_rp_startofpacket;                                                 // KBandInput_1_csr_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          kbandinput_1_csr_agent_rp_endofpacket;                                                   // KBandInput_1_csr_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                    // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [122:0] router_006_src_data;                                                                     // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                                    // rsp_demux_001:sink_ready -> router_006:src_ready
	wire   [10:0] router_006_src_channel;                                                                  // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                            // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                              // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          kbandinput_2_csr_agent_rp_valid;                                                         // KBandInput_2_csr_agent:rp_valid -> router_007:sink_valid
	wire  [122:0] kbandinput_2_csr_agent_rp_data;                                                          // KBandInput_2_csr_agent:rp_data -> router_007:sink_data
	wire          kbandinput_2_csr_agent_rp_ready;                                                         // router_007:sink_ready -> KBandInput_2_csr_agent:rp_ready
	wire          kbandinput_2_csr_agent_rp_startofpacket;                                                 // KBandInput_2_csr_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          kbandinput_2_csr_agent_rp_endofpacket;                                                   // KBandInput_2_csr_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                    // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [122:0] router_007_src_data;                                                                     // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                                    // rsp_demux_002:sink_ready -> router_007:src_ready
	wire   [10:0] router_007_src_channel;                                                                  // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                            // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                              // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          kbandoutput_descriptor_slave_agent_rp_valid;                                             // KBandOutput_descriptor_slave_agent:rp_valid -> router_008:sink_valid
	wire  [230:0] kbandoutput_descriptor_slave_agent_rp_data;                                              // KBandOutput_descriptor_slave_agent:rp_data -> router_008:sink_data
	wire          kbandoutput_descriptor_slave_agent_rp_ready;                                             // router_008:sink_ready -> KBandOutput_descriptor_slave_agent:rp_ready
	wire          kbandoutput_descriptor_slave_agent_rp_startofpacket;                                     // KBandOutput_descriptor_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          kbandoutput_descriptor_slave_agent_rp_endofpacket;                                       // KBandOutput_descriptor_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                    // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [230:0] router_008_src_data;                                                                     // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                                    // rsp_demux_003:sink_ready -> router_008:src_ready
	wire   [10:0] router_008_src_channel;                                                                  // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                                            // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                              // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          kbandinput_1_descriptor_slave_agent_rp_valid;                                            // KBandInput_1_descriptor_slave_agent:rp_valid -> router_009:sink_valid
	wire  [230:0] kbandinput_1_descriptor_slave_agent_rp_data;                                             // KBandInput_1_descriptor_slave_agent:rp_data -> router_009:sink_data
	wire          kbandinput_1_descriptor_slave_agent_rp_ready;                                            // router_009:sink_ready -> KBandInput_1_descriptor_slave_agent:rp_ready
	wire          kbandinput_1_descriptor_slave_agent_rp_startofpacket;                                    // KBandInput_1_descriptor_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          kbandinput_1_descriptor_slave_agent_rp_endofpacket;                                      // KBandInput_1_descriptor_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                    // router_009:src_valid -> rsp_demux_004:sink_valid
	wire  [230:0] router_009_src_data;                                                                     // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                                    // rsp_demux_004:sink_ready -> router_009:src_ready
	wire   [10:0] router_009_src_channel;                                                                  // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                            // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                              // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          kbandinput_2_descriptor_slave_agent_rp_valid;                                            // KBandInput_2_descriptor_slave_agent:rp_valid -> router_010:sink_valid
	wire  [230:0] kbandinput_2_descriptor_slave_agent_rp_data;                                             // KBandInput_2_descriptor_slave_agent:rp_data -> router_010:sink_data
	wire          kbandinput_2_descriptor_slave_agent_rp_ready;                                            // router_010:sink_ready -> KBandInput_2_descriptor_slave_agent:rp_ready
	wire          kbandinput_2_descriptor_slave_agent_rp_startofpacket;                                    // KBandInput_2_descriptor_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          kbandinput_2_descriptor_slave_agent_rp_endofpacket;                                      // KBandInput_2_descriptor_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                    // router_010:src_valid -> rsp_demux_005:sink_valid
	wire  [230:0] router_010_src_data;                                                                     // router_010:src_data -> rsp_demux_005:sink_data
	wire          router_010_src_ready;                                                                    // rsp_demux_005:sink_ready -> router_010:src_ready
	wire   [10:0] router_010_src_channel;                                                                  // router_010:src_channel -> rsp_demux_005:sink_channel
	wire          router_010_src_startofpacket;                                                            // router_010:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_010_src_endofpacket;                                                              // router_010:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          onchip_mem_lw_s1_agent_rp_valid;                                                         // onchip_mem_LW_s1_agent:rp_valid -> router_011:sink_valid
	wire  [122:0] onchip_mem_lw_s1_agent_rp_data;                                                          // onchip_mem_LW_s1_agent:rp_data -> router_011:sink_data
	wire          onchip_mem_lw_s1_agent_rp_ready;                                                         // router_011:sink_ready -> onchip_mem_LW_s1_agent:rp_ready
	wire          onchip_mem_lw_s1_agent_rp_startofpacket;                                                 // onchip_mem_LW_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          onchip_mem_lw_s1_agent_rp_endofpacket;                                                   // onchip_mem_LW_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                    // router_011:src_valid -> rsp_demux_006:sink_valid
	wire  [122:0] router_011_src_data;                                                                     // router_011:src_data -> rsp_demux_006:sink_data
	wire          router_011_src_ready;                                                                    // rsp_demux_006:sink_ready -> router_011:src_ready
	wire   [10:0] router_011_src_channel;                                                                  // router_011:src_channel -> rsp_demux_006:sink_channel
	wire          router_011_src_startofpacket;                                                            // router_011:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_011_src_endofpacket;                                                              // router_011:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          pio_0_s1_agent_rp_valid;                                                                 // pio_0_s1_agent:rp_valid -> router_012:sink_valid
	wire  [122:0] pio_0_s1_agent_rp_data;                                                                  // pio_0_s1_agent:rp_data -> router_012:sink_data
	wire          pio_0_s1_agent_rp_ready;                                                                 // router_012:sink_ready -> pio_0_s1_agent:rp_ready
	wire          pio_0_s1_agent_rp_startofpacket;                                                         // pio_0_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          pio_0_s1_agent_rp_endofpacket;                                                           // pio_0_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                    // router_012:src_valid -> rsp_demux_007:sink_valid
	wire  [122:0] router_012_src_data;                                                                     // router_012:src_data -> rsp_demux_007:sink_data
	wire          router_012_src_ready;                                                                    // rsp_demux_007:sink_ready -> router_012:src_ready
	wire   [10:0] router_012_src_channel;                                                                  // router_012:src_channel -> rsp_demux_007:sink_channel
	wire          router_012_src_startofpacket;                                                            // router_012:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_012_src_endofpacket;                                                              // router_012:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          onchip_mem_lw2_s1_agent_rp_valid;                                                        // onchip_mem_LW2_s1_agent:rp_valid -> router_013:sink_valid
	wire  [122:0] onchip_mem_lw2_s1_agent_rp_data;                                                         // onchip_mem_LW2_s1_agent:rp_data -> router_013:sink_data
	wire          onchip_mem_lw2_s1_agent_rp_ready;                                                        // router_013:sink_ready -> onchip_mem_LW2_s1_agent:rp_ready
	wire          onchip_mem_lw2_s1_agent_rp_startofpacket;                                                // onchip_mem_LW2_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          onchip_mem_lw2_s1_agent_rp_endofpacket;                                                  // onchip_mem_LW2_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                    // router_013:src_valid -> rsp_demux_008:sink_valid
	wire  [122:0] router_013_src_data;                                                                     // router_013:src_data -> rsp_demux_008:sink_data
	wire          router_013_src_ready;                                                                    // rsp_demux_008:sink_ready -> router_013:src_ready
	wire   [10:0] router_013_src_channel;                                                                  // router_013:src_channel -> rsp_demux_008:sink_channel
	wire          router_013_src_startofpacket;                                                            // router_013:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_013_src_endofpacket;                                                              // router_013:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          ddr_s0_agent_rp_valid;                                                                   // DDR_s0_agent:rp_valid -> router_014:sink_valid
	wire  [230:0] ddr_s0_agent_rp_data;                                                                    // DDR_s0_agent:rp_data -> router_014:sink_data
	wire          ddr_s0_agent_rp_ready;                                                                   // router_014:sink_ready -> DDR_s0_agent:rp_ready
	wire          ddr_s0_agent_rp_startofpacket;                                                           // DDR_s0_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          ddr_s0_agent_rp_endofpacket;                                                             // DDR_s0_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                    // router_014:src_valid -> rsp_demux_009:sink_valid
	wire  [230:0] router_014_src_data;                                                                     // router_014:src_data -> rsp_demux_009:sink_data
	wire          router_014_src_ready;                                                                    // rsp_demux_009:sink_ready -> router_014:src_ready
	wire   [10:0] router_014_src_channel;                                                                  // router_014:src_channel -> rsp_demux_009:sink_channel
	wire          router_014_src_startofpacket;                                                            // router_014:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_014_src_endofpacket;                                                              // router_014:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          onchip_mem_fpga_slave_s1_agent_rp_valid;                                                 // onchip_mem_FPGA_Slave_s1_agent:rp_valid -> router_015:sink_valid
	wire  [230:0] onchip_mem_fpga_slave_s1_agent_rp_data;                                                  // onchip_mem_FPGA_Slave_s1_agent:rp_data -> router_015:sink_data
	wire          onchip_mem_fpga_slave_s1_agent_rp_ready;                                                 // router_015:sink_ready -> onchip_mem_FPGA_Slave_s1_agent:rp_ready
	wire          onchip_mem_fpga_slave_s1_agent_rp_startofpacket;                                         // onchip_mem_FPGA_Slave_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          onchip_mem_fpga_slave_s1_agent_rp_endofpacket;                                           // onchip_mem_FPGA_Slave_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                    // router_015:src_valid -> rsp_demux_010:sink_valid
	wire  [230:0] router_015_src_data;                                                                     // router_015:src_data -> rsp_demux_010:sink_data
	wire          router_015_src_ready;                                                                    // rsp_demux_010:sink_ready -> router_015:src_ready
	wire   [10:0] router_015_src_channel;                                                                  // router_015:src_channel -> rsp_demux_010:sink_channel
	wire          router_015_src_startofpacket;                                                            // router_015:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_015_src_endofpacket;                                                              // router_015:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_src_valid;                                                                        // router:src_valid -> mm_bridge_LW_m0_limiter:cmd_sink_valid
	wire  [122:0] router_src_data;                                                                         // router:src_data -> mm_bridge_LW_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                                        // mm_bridge_LW_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [10:0] router_src_channel;                                                                      // router:src_channel -> mm_bridge_LW_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                // router:src_startofpacket -> mm_bridge_LW_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                  // router:src_endofpacket -> mm_bridge_LW_m0_limiter:cmd_sink_endofpacket
	wire  [122:0] mm_bridge_lw_m0_limiter_cmd_src_data;                                                    // mm_bridge_LW_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mm_bridge_lw_m0_limiter_cmd_src_ready;                                                   // cmd_demux:sink_ready -> mm_bridge_LW_m0_limiter:cmd_src_ready
	wire   [10:0] mm_bridge_lw_m0_limiter_cmd_src_channel;                                                 // mm_bridge_LW_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mm_bridge_lw_m0_limiter_cmd_src_startofpacket;                                           // mm_bridge_LW_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mm_bridge_lw_m0_limiter_cmd_src_endofpacket;                                             // mm_bridge_LW_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                       // rsp_mux:src_valid -> mm_bridge_LW_m0_limiter:rsp_sink_valid
	wire  [122:0] rsp_mux_src_data;                                                                        // rsp_mux:src_data -> mm_bridge_LW_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                       // mm_bridge_LW_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [10:0] rsp_mux_src_channel;                                                                     // rsp_mux:src_channel -> mm_bridge_LW_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                               // rsp_mux:src_startofpacket -> mm_bridge_LW_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                 // rsp_mux:src_endofpacket -> mm_bridge_LW_m0_limiter:rsp_sink_endofpacket
	wire          mm_bridge_lw_m0_limiter_rsp_src_valid;                                                   // mm_bridge_LW_m0_limiter:rsp_src_valid -> mm_bridge_LW_m0_agent:rp_valid
	wire  [122:0] mm_bridge_lw_m0_limiter_rsp_src_data;                                                    // mm_bridge_LW_m0_limiter:rsp_src_data -> mm_bridge_LW_m0_agent:rp_data
	wire          mm_bridge_lw_m0_limiter_rsp_src_ready;                                                   // mm_bridge_LW_m0_agent:rp_ready -> mm_bridge_LW_m0_limiter:rsp_src_ready
	wire   [10:0] mm_bridge_lw_m0_limiter_rsp_src_channel;                                                 // mm_bridge_LW_m0_limiter:rsp_src_channel -> mm_bridge_LW_m0_agent:rp_channel
	wire          mm_bridge_lw_m0_limiter_rsp_src_startofpacket;                                           // mm_bridge_LW_m0_limiter:rsp_src_startofpacket -> mm_bridge_LW_m0_agent:rp_startofpacket
	wire          mm_bridge_lw_m0_limiter_rsp_src_endofpacket;                                             // mm_bridge_LW_m0_limiter:rsp_src_endofpacket -> mm_bridge_LW_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                    // router_001:src_valid -> KBandInput_2_mm_read_limiter:cmd_sink_valid
	wire   [95:0] router_001_src_data;                                                                     // router_001:src_data -> KBandInput_2_mm_read_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                    // KBandInput_2_mm_read_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [10:0] router_001_src_channel;                                                                  // router_001:src_channel -> KBandInput_2_mm_read_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                            // router_001:src_startofpacket -> KBandInput_2_mm_read_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                              // router_001:src_endofpacket -> KBandInput_2_mm_read_limiter:cmd_sink_endofpacket
	wire   [95:0] kbandinput_2_mm_read_limiter_cmd_src_data;                                               // KBandInput_2_mm_read_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          kbandinput_2_mm_read_limiter_cmd_src_ready;                                              // cmd_demux_001:sink_ready -> KBandInput_2_mm_read_limiter:cmd_src_ready
	wire   [10:0] kbandinput_2_mm_read_limiter_cmd_src_channel;                                            // KBandInput_2_mm_read_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          kbandinput_2_mm_read_limiter_cmd_src_startofpacket;                                      // KBandInput_2_mm_read_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          kbandinput_2_mm_read_limiter_cmd_src_endofpacket;                                        // KBandInput_2_mm_read_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                   // rsp_mux_001:src_valid -> KBandInput_2_mm_read_limiter:rsp_sink_valid
	wire   [95:0] rsp_mux_001_src_data;                                                                    // rsp_mux_001:src_data -> KBandInput_2_mm_read_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                   // KBandInput_2_mm_read_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [10:0] rsp_mux_001_src_channel;                                                                 // rsp_mux_001:src_channel -> KBandInput_2_mm_read_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                           // rsp_mux_001:src_startofpacket -> KBandInput_2_mm_read_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                             // rsp_mux_001:src_endofpacket -> KBandInput_2_mm_read_limiter:rsp_sink_endofpacket
	wire          kbandinput_2_mm_read_limiter_rsp_src_valid;                                              // KBandInput_2_mm_read_limiter:rsp_src_valid -> KBandInput_2_mm_read_agent:rp_valid
	wire   [95:0] kbandinput_2_mm_read_limiter_rsp_src_data;                                               // KBandInput_2_mm_read_limiter:rsp_src_data -> KBandInput_2_mm_read_agent:rp_data
	wire          kbandinput_2_mm_read_limiter_rsp_src_ready;                                              // KBandInput_2_mm_read_agent:rp_ready -> KBandInput_2_mm_read_limiter:rsp_src_ready
	wire   [10:0] kbandinput_2_mm_read_limiter_rsp_src_channel;                                            // KBandInput_2_mm_read_limiter:rsp_src_channel -> KBandInput_2_mm_read_agent:rp_channel
	wire          kbandinput_2_mm_read_limiter_rsp_src_startofpacket;                                      // KBandInput_2_mm_read_limiter:rsp_src_startofpacket -> KBandInput_2_mm_read_agent:rp_startofpacket
	wire          kbandinput_2_mm_read_limiter_rsp_src_endofpacket;                                        // KBandInput_2_mm_read_limiter:rsp_src_endofpacket -> KBandInput_2_mm_read_agent:rp_endofpacket
	wire          router_002_src_valid;                                                                    // router_002:src_valid -> KBandInput_1_mm_read_limiter:cmd_sink_valid
	wire   [95:0] router_002_src_data;                                                                     // router_002:src_data -> KBandInput_1_mm_read_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                    // KBandInput_1_mm_read_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [10:0] router_002_src_channel;                                                                  // router_002:src_channel -> KBandInput_1_mm_read_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                            // router_002:src_startofpacket -> KBandInput_1_mm_read_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                              // router_002:src_endofpacket -> KBandInput_1_mm_read_limiter:cmd_sink_endofpacket
	wire   [95:0] kbandinput_1_mm_read_limiter_cmd_src_data;                                               // KBandInput_1_mm_read_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          kbandinput_1_mm_read_limiter_cmd_src_ready;                                              // cmd_demux_002:sink_ready -> KBandInput_1_mm_read_limiter:cmd_src_ready
	wire   [10:0] kbandinput_1_mm_read_limiter_cmd_src_channel;                                            // KBandInput_1_mm_read_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          kbandinput_1_mm_read_limiter_cmd_src_startofpacket;                                      // KBandInput_1_mm_read_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          kbandinput_1_mm_read_limiter_cmd_src_endofpacket;                                        // KBandInput_1_mm_read_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                   // rsp_mux_002:src_valid -> KBandInput_1_mm_read_limiter:rsp_sink_valid
	wire   [95:0] rsp_mux_002_src_data;                                                                    // rsp_mux_002:src_data -> KBandInput_1_mm_read_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                                   // KBandInput_1_mm_read_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [10:0] rsp_mux_002_src_channel;                                                                 // rsp_mux_002:src_channel -> KBandInput_1_mm_read_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                           // rsp_mux_002:src_startofpacket -> KBandInput_1_mm_read_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                             // rsp_mux_002:src_endofpacket -> KBandInput_1_mm_read_limiter:rsp_sink_endofpacket
	wire          kbandinput_1_mm_read_limiter_rsp_src_valid;                                              // KBandInput_1_mm_read_limiter:rsp_src_valid -> KBandInput_1_mm_read_agent:rp_valid
	wire   [95:0] kbandinput_1_mm_read_limiter_rsp_src_data;                                               // KBandInput_1_mm_read_limiter:rsp_src_data -> KBandInput_1_mm_read_agent:rp_data
	wire          kbandinput_1_mm_read_limiter_rsp_src_ready;                                              // KBandInput_1_mm_read_agent:rp_ready -> KBandInput_1_mm_read_limiter:rsp_src_ready
	wire   [10:0] kbandinput_1_mm_read_limiter_rsp_src_channel;                                            // KBandInput_1_mm_read_limiter:rsp_src_channel -> KBandInput_1_mm_read_agent:rp_channel
	wire          kbandinput_1_mm_read_limiter_rsp_src_startofpacket;                                      // KBandInput_1_mm_read_limiter:rsp_src_startofpacket -> KBandInput_1_mm_read_agent:rp_startofpacket
	wire          kbandinput_1_mm_read_limiter_rsp_src_endofpacket;                                        // KBandInput_1_mm_read_limiter:rsp_src_endofpacket -> KBandInput_1_mm_read_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [122:0] cmd_demux_src0_data;                                                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [10:0] cmd_demux_src0_channel;                                                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                    // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [122:0] cmd_demux_src1_data;                                                                     // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                    // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [10:0] cmd_demux_src1_channel;                                                                  // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                            // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                              // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                    // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [122:0] cmd_demux_src2_data;                                                                     // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                    // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [10:0] cmd_demux_src2_channel;                                                                  // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                            // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                              // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                    // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [122:0] cmd_demux_src6_data;                                                                     // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                    // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [10:0] cmd_demux_src6_channel;                                                                  // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                            // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                              // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                    // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [122:0] cmd_demux_src7_data;                                                                     // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                    // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [10:0] cmd_demux_src7_channel;                                                                  // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                            // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                              // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                    // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [122:0] cmd_demux_src8_data;                                                                     // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                    // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [10:0] cmd_demux_src8_channel;                                                                  // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                            // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                              // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                // cmd_demux_003:src0_valid -> cmd_mux_009:sink2_valid
	wire  [230:0] cmd_demux_003_src0_data;                                                                 // cmd_demux_003:src0_data -> cmd_mux_009:sink2_data
	wire          cmd_demux_003_src0_ready;                                                                // cmd_mux_009:sink2_ready -> cmd_demux_003:src0_ready
	wire   [10:0] cmd_demux_003_src0_channel;                                                              // cmd_demux_003:src0_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_003_src0_startofpacket;                                                        // cmd_demux_003:src0_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                          // cmd_demux_003:src0_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                // cmd_demux_003:src1_valid -> cmd_mux_010:sink0_valid
	wire  [230:0] cmd_demux_003_src1_data;                                                                 // cmd_demux_003:src1_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_003_src1_ready;                                                                // cmd_mux_010:sink0_ready -> cmd_demux_003:src1_ready
	wire   [10:0] cmd_demux_003_src1_channel;                                                              // cmd_demux_003:src1_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_003_src1_startofpacket;                                                        // cmd_demux_003:src1_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                          // cmd_demux_003:src1_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [122:0] rsp_demux_src0_data;                                                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [10:0] rsp_demux_src0_channel;                                                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [122:0] rsp_demux_001_src0_data;                                                                 // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [10:0] rsp_demux_001_src0_channel;                                                              // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                        // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                          // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [122:0] rsp_demux_002_src0_data;                                                                 // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [10:0] rsp_demux_002_src0_channel;                                                              // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                        // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                          // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [122:0] rsp_demux_006_src0_data;                                                                 // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [10:0] rsp_demux_006_src0_channel;                                                              // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                        // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                          // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [122:0] rsp_demux_007_src0_data;                                                                 // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [10:0] rsp_demux_007_src0_channel;                                                              // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                        // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                          // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [122:0] rsp_demux_008_src0_data;                                                                 // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [10:0] rsp_demux_008_src0_channel;                                                              // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                        // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                          // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src2_valid;                                                                // rsp_demux_009:src2_valid -> rsp_mux_003:sink0_valid
	wire  [230:0] rsp_demux_009_src2_data;                                                                 // rsp_demux_009:src2_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_009_src2_ready;                                                                // rsp_mux_003:sink0_ready -> rsp_demux_009:src2_ready
	wire   [10:0] rsp_demux_009_src2_channel;                                                              // rsp_demux_009:src2_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_009_src2_startofpacket;                                                        // rsp_demux_009:src2_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_009_src2_endofpacket;                                                          // rsp_demux_009:src2_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                // rsp_demux_010:src0_valid -> rsp_mux_003:sink1_valid
	wire  [230:0] rsp_demux_010_src0_data;                                                                 // rsp_demux_010:src0_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_010_src0_ready;                                                                // rsp_mux_003:sink1_ready -> rsp_demux_010:src0_ready
	wire   [10:0] rsp_demux_010_src0_channel;                                                              // rsp_demux_010:src0_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_010_src0_startofpacket;                                                        // rsp_demux_010:src0_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                          // rsp_demux_010:src0_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          cmd_demux_src3_valid;                                                                    // cmd_demux:src3_valid -> mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:in_valid
	wire  [122:0] cmd_demux_src3_data;                                                                     // cmd_demux:src3_data -> mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src3_ready;                                                                    // mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux:src3_ready
	wire   [10:0] cmd_demux_src3_channel;                                                                  // cmd_demux:src3_channel -> mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src3_startofpacket;                                                            // cmd_demux:src3_startofpacket -> mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                              // cmd_demux:src3_endofpacket -> mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_valid;             // mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_003:sink0_valid
	wire  [230:0] mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_data;              // mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_003:sink0_data
	wire          mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_ready;             // cmd_mux_003:sink0_ready -> mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:out_ready
	wire   [10:0] mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_channel;           // mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_003:sink0_channel
	wire          mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_startofpacket;     // mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_endofpacket;       // mm_bridge_LW_m0_to_KBandOutput_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                    // cmd_demux:src4_valid -> mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:in_valid
	wire  [122:0] cmd_demux_src4_data;                                                                     // cmd_demux:src4_data -> mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src4_ready;                                                                    // mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux:src4_ready
	wire   [10:0] cmd_demux_src4_channel;                                                                  // cmd_demux:src4_channel -> mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src4_startofpacket;                                                            // cmd_demux:src4_startofpacket -> mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                              // cmd_demux:src4_endofpacket -> mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_valid;            // mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_004:sink0_valid
	wire  [230:0] mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_data;             // mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_004:sink0_data
	wire          mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_ready;            // cmd_mux_004:sink0_ready -> mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:out_ready
	wire   [10:0] mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_channel;          // mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_004:sink0_channel
	wire          mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_startofpacket;    // mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_endofpacket;      // mm_bridge_LW_m0_to_KBandInput_1_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                    // cmd_demux:src5_valid -> mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:in_valid
	wire  [122:0] cmd_demux_src5_data;                                                                     // cmd_demux:src5_data -> mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src5_ready;                                                                    // mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux:src5_ready
	wire   [10:0] cmd_demux_src5_channel;                                                                  // cmd_demux:src5_channel -> mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src5_startofpacket;                                                            // cmd_demux:src5_startofpacket -> mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                              // cmd_demux:src5_endofpacket -> mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_valid;            // mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_005:sink0_valid
	wire  [230:0] mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_data;             // mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_005:sink0_data
	wire          mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_ready;            // cmd_mux_005:sink0_ready -> mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:out_ready
	wire   [10:0] mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_channel;          // mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_005:sink0_channel
	wire          mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_startofpacket;    // mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_endofpacket;      // mm_bridge_LW_m0_to_KBandInput_2_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                // cmd_demux_001:src0_valid -> KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:in_valid
	wire   [95:0] cmd_demux_001_src0_data;                                                                 // cmd_demux_001:src0_data -> KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                                // KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire   [10:0] cmd_demux_001_src0_channel;                                                              // cmd_demux_001:src0_channel -> KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                        // cmd_demux_001:src0_startofpacket -> KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                          // cmd_demux_001:src0_endofpacket -> KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:in_endofpacket
	wire          kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_valid;                   // KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink1_valid
	wire  [122:0] kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_data;                    // KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink1_data
	wire          kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_ready;                   // cmd_mux_008:sink1_ready -> KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:out_ready
	wire   [10:0] kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_channel;                 // KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink1_channel
	wire          kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_startofpacket;           // KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_endofpacket;             // KBandInput_2_mm_read_to_onchip_mem_LW2_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                // cmd_demux_001:src1_valid -> KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:in_valid
	wire   [95:0] cmd_demux_001_src1_data;                                                                 // cmd_demux_001:src1_data -> KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                                // KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire   [10:0] cmd_demux_001_src1_channel;                                                              // cmd_demux_001:src1_channel -> KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                        // cmd_demux_001:src1_startofpacket -> KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                          // cmd_demux_001:src1_endofpacket -> KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:in_endofpacket
	wire          kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_valid;                              // KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:out_valid -> cmd_mux_009:sink0_valid
	wire  [230:0] kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_data;                               // KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:out_data -> cmd_mux_009:sink0_data
	wire          kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_ready;                              // cmd_mux_009:sink0_ready -> KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:out_ready
	wire   [10:0] kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_channel;                            // KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:out_channel -> cmd_mux_009:sink0_channel
	wire          kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_startofpacket;                      // KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_endofpacket;                        // KBandInput_2_mm_read_to_DDR_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                // cmd_demux_002:src0_valid -> KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:in_valid
	wire   [95:0] cmd_demux_002_src0_data;                                                                 // cmd_demux_002:src0_data -> KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                                // KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire   [10:0] cmd_demux_002_src0_channel;                                                              // cmd_demux_002:src0_channel -> KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                        // cmd_demux_002:src0_startofpacket -> KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                          // cmd_demux_002:src0_endofpacket -> KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:in_endofpacket
	wire          kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_valid;                    // KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:out_valid -> cmd_mux_006:sink1_valid
	wire  [122:0] kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_data;                     // KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:out_data -> cmd_mux_006:sink1_data
	wire          kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_ready;                    // cmd_mux_006:sink1_ready -> KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:out_ready
	wire   [10:0] kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_channel;                  // KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:out_channel -> cmd_mux_006:sink1_channel
	wire          kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_startofpacket;            // KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_endofpacket;              // KBandInput_1_mm_read_to_onchip_mem_LW_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                // cmd_demux_002:src1_valid -> KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:in_valid
	wire   [95:0] cmd_demux_002_src1_data;                                                                 // cmd_demux_002:src1_data -> KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:in_data
	wire          cmd_demux_002_src1_ready;                                                                // KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:in_ready -> cmd_demux_002:src1_ready
	wire   [10:0] cmd_demux_002_src1_channel;                                                              // cmd_demux_002:src1_channel -> KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                                        // cmd_demux_002:src1_startofpacket -> KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                          // cmd_demux_002:src1_endofpacket -> KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:in_endofpacket
	wire          kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_valid;                              // KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:out_valid -> cmd_mux_009:sink1_valid
	wire  [230:0] kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_data;                               // KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:out_data -> cmd_mux_009:sink1_data
	wire          kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_ready;                              // cmd_mux_009:sink1_ready -> KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:out_ready
	wire   [10:0] kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_channel;                            // KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:out_channel -> cmd_mux_009:sink1_channel
	wire          kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_startofpacket;                      // KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_endofpacket;                        // KBandInput_1_mm_read_to_DDR_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                // cmd_demux_004:src0_valid -> mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:in_valid
	wire  [158:0] cmd_demux_004_src0_data;                                                                 // cmd_demux_004:src0_data -> mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:in_data
	wire          cmd_demux_004_src0_ready;                                                                // mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:in_ready -> cmd_demux_004:src0_ready
	wire   [10:0] cmd_demux_004_src0_channel;                                                              // cmd_demux_004:src0_channel -> mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src0_startofpacket;                                                        // cmd_demux_004:src0_startofpacket -> mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                          // cmd_demux_004:src0_endofpacket -> mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_valid;         // mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:out_valid -> cmd_mux_010:sink1_valid
	wire  [230:0] mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_data;          // mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:out_data -> cmd_mux_010:sink1_data
	wire          mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_ready;         // cmd_mux_010:sink1_ready -> mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:out_ready
	wire   [10:0] mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_channel;       // mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:out_channel -> cmd_mux_010:sink1_channel
	wire          mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_startofpacket; // mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_endofpacket;   // mm_bridge_FPGA_Slave_m0_to_onchip_mem_FPGA_Slave_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                // rsp_demux_003:src0_valid -> KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_valid
	wire  [230:0] rsp_demux_003_src0_data;                                                                 // rsp_demux_003:src0_data -> KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_data
	wire          rsp_demux_003_src0_ready;                                                                // KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_ready -> rsp_demux_003:src0_ready
	wire   [10:0] rsp_demux_003_src0_channel;                                                              // rsp_demux_003:src0_channel -> KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                        // rsp_demux_003:src0_startofpacket -> KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                          // rsp_demux_003:src0_endofpacket -> KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_endofpacket
	wire          kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_valid;             // KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_valid -> rsp_mux:sink3_valid
	wire  [122:0] kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_data;              // KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_data -> rsp_mux:sink3_data
	wire          kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_ready;             // rsp_mux:sink3_ready -> KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_ready
	wire   [10:0] kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_channel;           // KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_channel -> rsp_mux:sink3_channel
	wire          kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_startofpacket;     // KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_endofpacket;       // KBandOutput_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                // rsp_demux_004:src0_valid -> KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_valid
	wire  [230:0] rsp_demux_004_src0_data;                                                                 // rsp_demux_004:src0_data -> KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_data
	wire          rsp_demux_004_src0_ready;                                                                // KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_ready -> rsp_demux_004:src0_ready
	wire   [10:0] rsp_demux_004_src0_channel;                                                              // rsp_demux_004:src0_channel -> KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                        // rsp_demux_004:src0_startofpacket -> KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                          // rsp_demux_004:src0_endofpacket -> KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_endofpacket
	wire          kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_valid;            // KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_valid -> rsp_mux:sink4_valid
	wire  [122:0] kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_data;             // KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_data -> rsp_mux:sink4_data
	wire          kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_ready;            // rsp_mux:sink4_ready -> KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_ready
	wire   [10:0] kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_channel;          // KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_channel -> rsp_mux:sink4_channel
	wire          kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_startofpacket;    // KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_endofpacket;      // KBandInput_1_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                // rsp_demux_005:src0_valid -> KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_valid
	wire  [230:0] rsp_demux_005_src0_data;                                                                 // rsp_demux_005:src0_data -> KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_data
	wire          rsp_demux_005_src0_ready;                                                                // KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_ready -> rsp_demux_005:src0_ready
	wire   [10:0] rsp_demux_005_src0_channel;                                                              // rsp_demux_005:src0_channel -> KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                                        // rsp_demux_005:src0_startofpacket -> KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                          // rsp_demux_005:src0_endofpacket -> KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:in_endofpacket
	wire          kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_valid;            // KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_valid -> rsp_mux:sink5_valid
	wire  [122:0] kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_data;             // KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_data -> rsp_mux:sink5_data
	wire          kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_ready;            // rsp_mux:sink5_ready -> KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_ready
	wire   [10:0] kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_channel;          // KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_channel -> rsp_mux:sink5_channel
	wire          kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_startofpacket;    // KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_endofpacket;      // KBandInput_2_descriptor_slave_to_mm_bridge_LW_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                // rsp_demux_006:src1_valid -> onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:in_valid
	wire  [122:0] rsp_demux_006_src1_data;                                                                 // rsp_demux_006:src1_data -> onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:in_data
	wire          rsp_demux_006_src1_ready;                                                                // onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:in_ready -> rsp_demux_006:src1_ready
	wire   [10:0] rsp_demux_006_src1_channel;                                                              // rsp_demux_006:src1_channel -> onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:in_channel
	wire          rsp_demux_006_src1_startofpacket;                                                        // rsp_demux_006:src1_startofpacket -> onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                          // rsp_demux_006:src1_endofpacket -> onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:in_endofpacket
	wire          onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_valid;                    // onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire   [95:0] onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_data;                     // onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_ready;                    // rsp_mux_002:sink0_ready -> onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:out_ready
	wire   [10:0] onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_channel;                  // onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_startofpacket;            // onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_endofpacket;              // onchip_mem_LW_s1_to_KBandInput_1_mm_read_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                // rsp_demux_008:src1_valid -> onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:in_valid
	wire  [122:0] rsp_demux_008_src1_data;                                                                 // rsp_demux_008:src1_data -> onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:in_data
	wire          rsp_demux_008_src1_ready;                                                                // onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:in_ready -> rsp_demux_008:src1_ready
	wire   [10:0] rsp_demux_008_src1_channel;                                                              // rsp_demux_008:src1_channel -> onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src1_startofpacket;                                                        // rsp_demux_008:src1_startofpacket -> onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                          // rsp_demux_008:src1_endofpacket -> onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:in_endofpacket
	wire          onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_valid;                   // onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire   [95:0] onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_data;                    // onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_ready;                   // rsp_mux_001:sink0_ready -> onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:out_ready
	wire   [10:0] onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_channel;                 // onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_startofpacket;           // onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_endofpacket;             // onchip_mem_LW2_s1_to_KBandInput_2_mm_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                // rsp_demux_009:src0_valid -> DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:in_valid
	wire  [230:0] rsp_demux_009_src0_data;                                                                 // rsp_demux_009:src0_data -> DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:in_data
	wire          rsp_demux_009_src0_ready;                                                                // DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:in_ready -> rsp_demux_009:src0_ready
	wire   [10:0] rsp_demux_009_src0_channel;                                                              // rsp_demux_009:src0_channel -> DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                                        // rsp_demux_009:src0_startofpacket -> DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                          // rsp_demux_009:src0_endofpacket -> DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:in_endofpacket
	wire          ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_valid;                              // DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire   [95:0] ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_data;                               // DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_ready;                              // rsp_mux_001:sink1_ready -> DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:out_ready
	wire   [10:0] ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_channel;                            // DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire          ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_startofpacket;                      // DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_endofpacket;                        // DDR_s0_to_KBandInput_2_mm_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                // rsp_demux_009:src1_valid -> DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:in_valid
	wire  [230:0] rsp_demux_009_src1_data;                                                                 // rsp_demux_009:src1_data -> DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:in_data
	wire          rsp_demux_009_src1_ready;                                                                // DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:in_ready -> rsp_demux_009:src1_ready
	wire   [10:0] rsp_demux_009_src1_channel;                                                              // rsp_demux_009:src1_channel -> DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:in_channel
	wire          rsp_demux_009_src1_startofpacket;                                                        // rsp_demux_009:src1_startofpacket -> DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                          // rsp_demux_009:src1_endofpacket -> DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:in_endofpacket
	wire          ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_valid;                              // DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:out_valid -> rsp_mux_002:sink1_valid
	wire   [95:0] ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_data;                               // DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:out_data -> rsp_mux_002:sink1_data
	wire          ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_ready;                              // rsp_mux_002:sink1_ready -> DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:out_ready
	wire   [10:0] ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_channel;                            // DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:out_channel -> rsp_mux_002:sink1_channel
	wire          ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_startofpacket;                      // DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_endofpacket;                        // DDR_s0_to_KBandInput_1_mm_read_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_010_src1_valid;                                                                // rsp_demux_010:src1_valid -> onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:in_valid
	wire  [230:0] rsp_demux_010_src1_data;                                                                 // rsp_demux_010:src1_data -> onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:in_data
	wire          rsp_demux_010_src1_ready;                                                                // onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:in_ready -> rsp_demux_010:src1_ready
	wire   [10:0] rsp_demux_010_src1_channel;                                                              // rsp_demux_010:src1_channel -> onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_010_src1_startofpacket;                                                        // rsp_demux_010:src1_startofpacket -> onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                          // rsp_demux_010:src1_endofpacket -> onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:in_endofpacket
	wire          onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_valid;         // onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:out_valid -> rsp_mux_004:sink0_valid
	wire  [158:0] onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_data;          // onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:out_data -> rsp_mux_004:sink0_data
	wire          onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_ready;         // rsp_mux_004:sink0_ready -> onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:out_ready
	wire   [10:0] onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_channel;       // onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:out_channel -> rsp_mux_004:sink0_channel
	wire          onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_startofpacket; // onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_endofpacket;   // onchip_mem_FPGA_Slave_s1_to_mm_bridge_FPGA_Slave_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire   [10:0] mm_bridge_lw_m0_limiter_cmd_valid_data;                                                  // mm_bridge_LW_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [10:0] kbandinput_2_mm_read_limiter_cmd_valid_data;                                             // KBandInput_2_mm_read_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [10:0] kbandinput_1_mm_read_limiter_cmd_valid_data;                                             // KBandInput_1_mm_read_limiter:cmd_src_valid -> cmd_demux_002:sink_valid

	KBandIPsubPro_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) mm_bridge_lw_m0_translator (
		.clk                    (clk_0_clk_clk),                                                      //   input,   width = 1,                       clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (mm_bridge_lw_m0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_lw_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (mm_bridge_lw_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (mm_bridge_lw_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (mm_bridge_lw_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (mm_bridge_lw_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (mm_bridge_lw_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (mm_bridge_lw_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (mm_bridge_lw_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (mm_bridge_lw_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (mm_bridge_lw_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (mm_bridge_LW_m0_address),                                            //   input,  width = 17,      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_LW_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (mm_bridge_LW_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (mm_bridge_LW_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (mm_bridge_LW_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (mm_bridge_LW_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (mm_bridge_LW_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (mm_bridge_LW_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (mm_bridge_LW_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (mm_bridge_LW_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                               // (terminated),                                        
		.av_begintransfer       (1'b0),                                                               // (terminated),                                        
		.av_chipselect          (1'b0),                                                               // (terminated),                                        
		.av_lock                (1'b0),                                                               // (terminated),                                        
		.uav_clken              (),                                                                   // (terminated),                                        
		.av_clken               (1'b1),                                                               // (terminated),                                        
		.uav_response           (2'b00),                                                              // (terminated),                                        
		.av_response            (),                                                                   // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                               // (terminated),                                        
		.av_writeresponsevalid  ()                                                                    // (terminated),                                        
	);

	KBandIPsubPro_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) kbandinput_2_mm_read_translator (
		.clk                    (clk_0_clk_clk),                                                           //   input,   width = 1,                       clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                          //   input,   width = 1,                     reset.reset
		.uav_address            (kbandinput_2_mm_read_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (kbandinput_2_mm_read_translator_avalon_universal_master_0_burstcount),    //  output,   width = 1,                          .burstcount
		.uav_read               (kbandinput_2_mm_read_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (kbandinput_2_mm_read_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (kbandinput_2_mm_read_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (kbandinput_2_mm_read_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (kbandinput_2_mm_read_translator_avalon_universal_master_0_byteenable),    //  output,   width = 1,                          .byteenable
		.uav_readdata           (kbandinput_2_mm_read_translator_avalon_universal_master_0_readdata),      //   input,   width = 8,                          .readdata
		.uav_writedata          (kbandinput_2_mm_read_translator_avalon_universal_master_0_writedata),     //  output,   width = 8,                          .writedata
		.uav_lock               (kbandinput_2_mm_read_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (kbandinput_2_mm_read_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (KBandInput_2_mm_read_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (KBandInput_2_mm_read_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_read                (KBandInput_2_mm_read_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (KBandInput_2_mm_read_readdata),                                           //  output,   width = 8,                          .readdata
		.av_readdatavalid       (KBandInput_2_mm_read_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_burstcount          (1'b1),                                                                    // (terminated),                                        
		.av_byteenable          (1'b1),                                                                    // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                    // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                    // (terminated),                                        
		.av_chipselect          (1'b0),                                                                    // (terminated),                                        
		.av_write               (1'b0),                                                                    // (terminated),                                        
		.av_writedata           (8'b00000000),                                                             // (terminated),                                        
		.av_lock                (1'b0),                                                                    // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                    // (terminated),                                        
		.uav_clken              (),                                                                        // (terminated),                                        
		.av_clken               (1'b1),                                                                    // (terminated),                                        
		.uav_response           (2'b00),                                                                   // (terminated),                                        
		.av_response            (),                                                                        // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                    // (terminated),                                        
		.av_writeresponsevalid  ()                                                                         // (terminated),                                        
	);

	KBandIPsubPro_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) kbandinput_1_mm_read_translator (
		.clk                    (clk_0_clk_clk),                                                           //   input,   width = 1,                       clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                          //   input,   width = 1,                     reset.reset
		.uav_address            (kbandinput_1_mm_read_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (kbandinput_1_mm_read_translator_avalon_universal_master_0_burstcount),    //  output,   width = 1,                          .burstcount
		.uav_read               (kbandinput_1_mm_read_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (kbandinput_1_mm_read_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (kbandinput_1_mm_read_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (kbandinput_1_mm_read_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (kbandinput_1_mm_read_translator_avalon_universal_master_0_byteenable),    //  output,   width = 1,                          .byteenable
		.uav_readdata           (kbandinput_1_mm_read_translator_avalon_universal_master_0_readdata),      //   input,   width = 8,                          .readdata
		.uav_writedata          (kbandinput_1_mm_read_translator_avalon_universal_master_0_writedata),     //  output,   width = 8,                          .writedata
		.uav_lock               (kbandinput_1_mm_read_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (kbandinput_1_mm_read_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (KBandInput_1_mm_read_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (KBandInput_1_mm_read_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_read                (KBandInput_1_mm_read_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (KBandInput_1_mm_read_readdata),                                           //  output,   width = 8,                          .readdata
		.av_readdatavalid       (KBandInput_1_mm_read_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_burstcount          (1'b1),                                                                    // (terminated),                                        
		.av_byteenable          (1'b1),                                                                    // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                    // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                    // (terminated),                                        
		.av_chipselect          (1'b0),                                                                    // (terminated),                                        
		.av_write               (1'b0),                                                                    // (terminated),                                        
		.av_writedata           (8'b00000000),                                                             // (terminated),                                        
		.av_lock                (1'b0),                                                                    // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                    // (terminated),                                        
		.uav_clken              (),                                                                        // (terminated),                                        
		.av_clken               (1'b1),                                                                    // (terminated),                                        
		.uav_response           (2'b00),                                                                   // (terminated),                                        
		.av_response            (),                                                                        // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                    // (terminated),                                        
		.av_writeresponsevalid  ()                                                                         // (terminated),                                        
	);

	KBandIPsubPro_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) kbandoutput_mm_write_translator (
		.clk                    (clk_0_clk_clk),                                                           //   input,    width = 1,                       clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1,                     reset.reset
		.uav_address            (kbandoutput_mm_write_translator_avalon_universal_master_0_address),       //  output,   width = 32, avalon_universal_master_0.address
		.uav_burstcount         (kbandoutput_mm_write_translator_avalon_universal_master_0_burstcount),    //  output,    width = 5,                          .burstcount
		.uav_read               (kbandoutput_mm_write_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (kbandoutput_mm_write_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (kbandoutput_mm_write_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (kbandoutput_mm_write_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (kbandoutput_mm_write_translator_avalon_universal_master_0_byteenable),    //  output,   width = 16,                          .byteenable
		.uav_readdata           (kbandoutput_mm_write_translator_avalon_universal_master_0_readdata),      //   input,  width = 128,                          .readdata
		.uav_writedata          (kbandoutput_mm_write_translator_avalon_universal_master_0_writedata),     //  output,  width = 128,                          .writedata
		.uav_lock               (kbandoutput_mm_write_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (kbandoutput_mm_write_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (KBandOutput_mm_write_address),                                            //   input,   width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (KBandOutput_mm_write_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_byteenable          (KBandOutput_mm_write_byteenable),                                         //   input,   width = 16,                          .byteenable
		.av_write               (KBandOutput_mm_write_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (KBandOutput_mm_write_writedata),                                          //   input,  width = 128,                          .writedata
		.av_burstcount          (1'b1),                                                                    // (terminated),                                         
		.av_beginbursttransfer  (1'b0),                                                                    // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                    // (terminated),                                         
		.av_chipselect          (1'b0),                                                                    // (terminated),                                         
		.av_read                (1'b0),                                                                    // (terminated),                                         
		.av_readdata            (),                                                                        // (terminated),                                         
		.av_readdatavalid       (),                                                                        // (terminated),                                         
		.av_lock                (1'b0),                                                                    // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                    // (terminated),                                         
		.uav_clken              (),                                                                        // (terminated),                                         
		.av_clken               (1'b1),                                                                    // (terminated),                                         
		.uav_response           (2'b00),                                                                   // (terminated),                                         
		.av_response            (),                                                                        // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                    // (terminated),                                         
		.av_writeresponsevalid  ()                                                                         // (terminated),                                         
	);

	KBandIPsubPro_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) mm_bridge_fpga_slave_m0_translator (
		.clk                    (clk_0_clk_clk),                                                              //   input,   width = 1,                       clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                             //   input,   width = 1,                     reset.reset
		.uav_address            (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 4,                          .burstcount
		.uav_read               (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 8,                          .byteenable
		.uav_readdata           (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 64,                          .readdata
		.uav_writedata          (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 64,                          .writedata
		.uav_lock               (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (mm_bridge_FPGA_Slave_m0_address),                                            //   input,  width = 18,      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_FPGA_Slave_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (mm_bridge_FPGA_Slave_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (mm_bridge_FPGA_Slave_m0_byteenable),                                         //   input,   width = 8,                          .byteenable
		.av_read                (mm_bridge_FPGA_Slave_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (mm_bridge_FPGA_Slave_m0_readdata),                                           //  output,  width = 64,                          .readdata
		.av_readdatavalid       (mm_bridge_FPGA_Slave_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (mm_bridge_FPGA_Slave_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (mm_bridge_FPGA_Slave_m0_writedata),                                          //   input,  width = 64,                          .writedata
		.av_debugaccess         (mm_bridge_FPGA_Slave_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                       // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                       // (terminated),                                        
		.av_chipselect          (1'b0),                                                                       // (terminated),                                        
		.av_lock                (1'b0),                                                                       // (terminated),                                        
		.uav_clken              (),                                                                           // (terminated),                                        
		.av_clken               (1'b1),                                                                       // (terminated),                                        
		.uav_response           (2'b00),                                                                      // (terminated),                                        
		.av_response            (),                                                                           // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                       // (terminated),                                        
		.av_writeresponsevalid  ()                                                                            // (terminated),                                        
	);

	KBandIPsubPro_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) kbandoutput_csr_translator (
		.clk                    (clk_0_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (kbandoutput_csr_agent_m0_address),               //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (kbandoutput_csr_agent_m0_burstcount),            //   input,   width = 3,                         .burstcount
		.uav_read               (kbandoutput_csr_agent_m0_read),                  //   input,   width = 1,                         .read
		.uav_write              (kbandoutput_csr_agent_m0_write),                 //   input,   width = 1,                         .write
		.uav_waitrequest        (kbandoutput_csr_agent_m0_waitrequest),           //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (kbandoutput_csr_agent_m0_readdatavalid),         //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (kbandoutput_csr_agent_m0_byteenable),            //   input,   width = 4,                         .byteenable
		.uav_readdata           (kbandoutput_csr_agent_m0_readdata),              //  output,  width = 32,                         .readdata
		.uav_writedata          (kbandoutput_csr_agent_m0_writedata),             //   input,  width = 32,                         .writedata
		.uav_lock               (kbandoutput_csr_agent_m0_lock),                  //   input,   width = 1,                         .lock
		.uav_debugaccess        (kbandoutput_csr_agent_m0_debugaccess),           //   input,   width = 1,                         .debugaccess
		.av_address             (KBandOutput_csr_address),                        //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (KBandOutput_csr_write),                          //  output,   width = 1,                         .write
		.av_read                (KBandOutput_csr_read),                           //  output,   width = 1,                         .read
		.av_readdata            (KBandOutput_csr_readdata),                       //   input,  width = 32,                         .readdata
		.av_writedata           (KBandOutput_csr_writedata),                      //  output,  width = 32,                         .writedata
		.av_byteenable          (KBandOutput_csr_byteenable),                     //  output,   width = 4,                         .byteenable
		.av_begintransfer       (),                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                               // (terminated),                                       
		.av_burstcount          (),                                               // (terminated),                                       
		.av_readdatavalid       (1'b0),                                           // (terminated),                                       
		.av_waitrequest         (1'b0),                                           // (terminated),                                       
		.av_writebyteenable     (),                                               // (terminated),                                       
		.av_lock                (),                                               // (terminated),                                       
		.av_chipselect          (),                                               // (terminated),                                       
		.av_clken               (),                                               // (terminated),                                       
		.uav_clken              (1'b0),                                           // (terminated),                                       
		.av_debugaccess         (),                                               // (terminated),                                       
		.av_outputenable        (),                                               // (terminated),                                       
		.uav_response           (),                                               // (terminated),                                       
		.av_response            (2'b00),                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                            // (terminated),                                       
	);

	KBandIPsubPro_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) kbandinput_1_csr_translator (
		.clk                    (clk_0_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (kbandinput_1_csr_agent_m0_address),              //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (kbandinput_1_csr_agent_m0_burstcount),           //   input,   width = 3,                         .burstcount
		.uav_read               (kbandinput_1_csr_agent_m0_read),                 //   input,   width = 1,                         .read
		.uav_write              (kbandinput_1_csr_agent_m0_write),                //   input,   width = 1,                         .write
		.uav_waitrequest        (kbandinput_1_csr_agent_m0_waitrequest),          //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (kbandinput_1_csr_agent_m0_readdatavalid),        //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (kbandinput_1_csr_agent_m0_byteenable),           //   input,   width = 4,                         .byteenable
		.uav_readdata           (kbandinput_1_csr_agent_m0_readdata),             //  output,  width = 32,                         .readdata
		.uav_writedata          (kbandinput_1_csr_agent_m0_writedata),            //   input,  width = 32,                         .writedata
		.uav_lock               (kbandinput_1_csr_agent_m0_lock),                 //   input,   width = 1,                         .lock
		.uav_debugaccess        (kbandinput_1_csr_agent_m0_debugaccess),          //   input,   width = 1,                         .debugaccess
		.av_address             (KBandInput_1_csr_address),                       //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (KBandInput_1_csr_write),                         //  output,   width = 1,                         .write
		.av_read                (KBandInput_1_csr_read),                          //  output,   width = 1,                         .read
		.av_readdata            (KBandInput_1_csr_readdata),                      //   input,  width = 32,                         .readdata
		.av_writedata           (KBandInput_1_csr_writedata),                     //  output,  width = 32,                         .writedata
		.av_byteenable          (KBandInput_1_csr_byteenable),                    //  output,   width = 4,                         .byteenable
		.av_begintransfer       (),                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                               // (terminated),                                       
		.av_burstcount          (),                                               // (terminated),                                       
		.av_readdatavalid       (1'b0),                                           // (terminated),                                       
		.av_waitrequest         (1'b0),                                           // (terminated),                                       
		.av_writebyteenable     (),                                               // (terminated),                                       
		.av_lock                (),                                               // (terminated),                                       
		.av_chipselect          (),                                               // (terminated),                                       
		.av_clken               (),                                               // (terminated),                                       
		.uav_clken              (1'b0),                                           // (terminated),                                       
		.av_debugaccess         (),                                               // (terminated),                                       
		.av_outputenable        (),                                               // (terminated),                                       
		.uav_response           (),                                               // (terminated),                                       
		.av_response            (2'b00),                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                            // (terminated),                                       
	);

	KBandIPsubPro_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) kbandinput_2_csr_translator (
		.clk                    (clk_0_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (kbandinput_2_csr_agent_m0_address),              //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (kbandinput_2_csr_agent_m0_burstcount),           //   input,   width = 3,                         .burstcount
		.uav_read               (kbandinput_2_csr_agent_m0_read),                 //   input,   width = 1,                         .read
		.uav_write              (kbandinput_2_csr_agent_m0_write),                //   input,   width = 1,                         .write
		.uav_waitrequest        (kbandinput_2_csr_agent_m0_waitrequest),          //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (kbandinput_2_csr_agent_m0_readdatavalid),        //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (kbandinput_2_csr_agent_m0_byteenable),           //   input,   width = 4,                         .byteenable
		.uav_readdata           (kbandinput_2_csr_agent_m0_readdata),             //  output,  width = 32,                         .readdata
		.uav_writedata          (kbandinput_2_csr_agent_m0_writedata),            //   input,  width = 32,                         .writedata
		.uav_lock               (kbandinput_2_csr_agent_m0_lock),                 //   input,   width = 1,                         .lock
		.uav_debugaccess        (kbandinput_2_csr_agent_m0_debugaccess),          //   input,   width = 1,                         .debugaccess
		.av_address             (KBandInput_2_csr_address),                       //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (KBandInput_2_csr_write),                         //  output,   width = 1,                         .write
		.av_read                (KBandInput_2_csr_read),                          //  output,   width = 1,                         .read
		.av_readdata            (KBandInput_2_csr_readdata),                      //   input,  width = 32,                         .readdata
		.av_writedata           (KBandInput_2_csr_writedata),                     //  output,  width = 32,                         .writedata
		.av_byteenable          (KBandInput_2_csr_byteenable),                    //  output,   width = 4,                         .byteenable
		.av_begintransfer       (),                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                               // (terminated),                                       
		.av_burstcount          (),                                               // (terminated),                                       
		.av_readdatavalid       (1'b0),                                           // (terminated),                                       
		.av_waitrequest         (1'b0),                                           // (terminated),                                       
		.av_writebyteenable     (),                                               // (terminated),                                       
		.av_lock                (),                                               // (terminated),                                       
		.av_chipselect          (),                                               // (terminated),                                       
		.av_clken               (),                                               // (terminated),                                       
		.uav_clken              (1'b0),                                           // (terminated),                                       
		.av_debugaccess         (),                                               // (terminated),                                       
		.av_outputenable        (),                                               // (terminated),                                       
		.uav_response           (),                                               // (terminated),                                       
		.av_response            (2'b00),                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                            // (terminated),                                       
	);

	KBandIPsubPro_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) kbandoutput_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //   input,    width = 1,                      clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                                                                        //   input,    width = 1,                    reset.reset
		.uav_address            (kbandoutput_descriptor_slave_agent_m0_address),                                                                                         //   input,   width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (kbandoutput_descriptor_slave_agent_m0_burstcount),                                                                                      //   input,    width = 5,                         .burstcount
		.uav_read               (kbandoutput_descriptor_slave_agent_m0_read),                                                                                            //   input,    width = 1,                         .read
		.uav_write              (kbandoutput_descriptor_slave_agent_m0_write),                                                                                           //   input,    width = 1,                         .write
		.uav_waitrequest        (kbandoutput_descriptor_slave_agent_m0_waitrequest),                                                                                     //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (kbandoutput_descriptor_slave_agent_m0_readdatavalid),                                                                                   //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (kbandoutput_descriptor_slave_agent_m0_byteenable),                                                                                      //   input,   width = 16,                         .byteenable
		.uav_readdata           (kbandoutput_descriptor_slave_agent_m0_readdata),                                                                                        //  output,  width = 128,                         .readdata
		.uav_writedata          (kbandoutput_descriptor_slave_agent_m0_writedata),                                                                                       //   input,  width = 128,                         .writedata
		.uav_lock               (kbandoutput_descriptor_slave_agent_m0_lock),                                                                                            //   input,    width = 1,                         .lock
		.uav_debugaccess        (kbandoutput_descriptor_slave_agent_m0_debugaccess),                                                                                     //   input,    width = 1,                         .debugaccess
		.av_write               (KBandOutput_descriptor_slave_write),                                                                                                    //  output,    width = 1,      avalon_anti_slave_0.write
		.av_writedata           (KBandOutput_descriptor_slave_writedata),                                                                                                //  output,  width = 128,                         .writedata
		.av_byteenable          (KBandOutput_descriptor_slave_byteenable),                                                                                               //  output,   width = 16,                         .byteenable
		.av_waitrequest         (KBandOutput_descriptor_slave_waitrequest),                                                                                              //   input,    width = 1,                         .waitrequest
		.av_address             (),                                                                                                                                      // (terminated),                                        
		.av_read                (),                                                                                                                                      // (terminated),                                        
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                      // (terminated),                                        
		.av_burstcount          (),                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                      // (terminated),                                        
		.av_chipselect          (),                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                   // (terminated),                                        
	);

	KBandIPsubPro_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) kbandinput_1_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //   input,    width = 1,                      clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                                                                        //   input,    width = 1,                    reset.reset
		.uav_address            (kbandinput_1_descriptor_slave_agent_m0_address),                                                                                        //   input,   width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (kbandinput_1_descriptor_slave_agent_m0_burstcount),                                                                                     //   input,    width = 5,                         .burstcount
		.uav_read               (kbandinput_1_descriptor_slave_agent_m0_read),                                                                                           //   input,    width = 1,                         .read
		.uav_write              (kbandinput_1_descriptor_slave_agent_m0_write),                                                                                          //   input,    width = 1,                         .write
		.uav_waitrequest        (kbandinput_1_descriptor_slave_agent_m0_waitrequest),                                                                                    //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (kbandinput_1_descriptor_slave_agent_m0_readdatavalid),                                                                                  //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (kbandinput_1_descriptor_slave_agent_m0_byteenable),                                                                                     //   input,   width = 16,                         .byteenable
		.uav_readdata           (kbandinput_1_descriptor_slave_agent_m0_readdata),                                                                                       //  output,  width = 128,                         .readdata
		.uav_writedata          (kbandinput_1_descriptor_slave_agent_m0_writedata),                                                                                      //   input,  width = 128,                         .writedata
		.uav_lock               (kbandinput_1_descriptor_slave_agent_m0_lock),                                                                                           //   input,    width = 1,                         .lock
		.uav_debugaccess        (kbandinput_1_descriptor_slave_agent_m0_debugaccess),                                                                                    //   input,    width = 1,                         .debugaccess
		.av_write               (KBandInput_1_descriptor_slave_write),                                                                                                   //  output,    width = 1,      avalon_anti_slave_0.write
		.av_writedata           (KBandInput_1_descriptor_slave_writedata),                                                                                               //  output,  width = 128,                         .writedata
		.av_byteenable          (KBandInput_1_descriptor_slave_byteenable),                                                                                              //  output,   width = 16,                         .byteenable
		.av_waitrequest         (KBandInput_1_descriptor_slave_waitrequest),                                                                                             //   input,    width = 1,                         .waitrequest
		.av_address             (),                                                                                                                                      // (terminated),                                        
		.av_read                (),                                                                                                                                      // (terminated),                                        
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                      // (terminated),                                        
		.av_burstcount          (),                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                      // (terminated),                                        
		.av_chipselect          (),                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                   // (terminated),                                        
	);

	KBandIPsubPro_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) kbandinput_2_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //   input,    width = 1,                      clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                                                                        //   input,    width = 1,                    reset.reset
		.uav_address            (kbandinput_2_descriptor_slave_agent_m0_address),                                                                                        //   input,   width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (kbandinput_2_descriptor_slave_agent_m0_burstcount),                                                                                     //   input,    width = 5,                         .burstcount
		.uav_read               (kbandinput_2_descriptor_slave_agent_m0_read),                                                                                           //   input,    width = 1,                         .read
		.uav_write              (kbandinput_2_descriptor_slave_agent_m0_write),                                                                                          //   input,    width = 1,                         .write
		.uav_waitrequest        (kbandinput_2_descriptor_slave_agent_m0_waitrequest),                                                                                    //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (kbandinput_2_descriptor_slave_agent_m0_readdatavalid),                                                                                  //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (kbandinput_2_descriptor_slave_agent_m0_byteenable),                                                                                     //   input,   width = 16,                         .byteenable
		.uav_readdata           (kbandinput_2_descriptor_slave_agent_m0_readdata),                                                                                       //  output,  width = 128,                         .readdata
		.uav_writedata          (kbandinput_2_descriptor_slave_agent_m0_writedata),                                                                                      //   input,  width = 128,                         .writedata
		.uav_lock               (kbandinput_2_descriptor_slave_agent_m0_lock),                                                                                           //   input,    width = 1,                         .lock
		.uav_debugaccess        (kbandinput_2_descriptor_slave_agent_m0_debugaccess),                                                                                    //   input,    width = 1,                         .debugaccess
		.av_write               (KBandInput_2_descriptor_slave_write),                                                                                                   //  output,    width = 1,      avalon_anti_slave_0.write
		.av_writedata           (KBandInput_2_descriptor_slave_writedata),                                                                                               //  output,  width = 128,                         .writedata
		.av_byteenable          (KBandInput_2_descriptor_slave_byteenable),                                                                                              //  output,   width = 16,                         .byteenable
		.av_waitrequest         (KBandInput_2_descriptor_slave_waitrequest),                                                                                             //   input,    width = 1,                         .waitrequest
		.av_address             (),                                                                                                                                      // (terminated),                                        
		.av_read                (),                                                                                                                                      // (terminated),                                        
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                      // (terminated),                                        
		.av_burstcount          (),                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                      // (terminated),                                        
		.av_chipselect          (),                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                   // (terminated),                                        
	);

	KBandIPsubPro_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) onchip_mem_lw_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (onchip_mem_lw_s1_agent_m0_address),              //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_mem_lw_s1_agent_m0_burstcount),           //   input,   width = 3,                         .burstcount
		.uav_read               (onchip_mem_lw_s1_agent_m0_read),                 //   input,   width = 1,                         .read
		.uav_write              (onchip_mem_lw_s1_agent_m0_write),                //   input,   width = 1,                         .write
		.uav_waitrequest        (onchip_mem_lw_s1_agent_m0_waitrequest),          //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_mem_lw_s1_agent_m0_readdatavalid),        //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_mem_lw_s1_agent_m0_byteenable),           //   input,   width = 4,                         .byteenable
		.uav_readdata           (onchip_mem_lw_s1_agent_m0_readdata),             //  output,  width = 32,                         .readdata
		.uav_writedata          (onchip_mem_lw_s1_agent_m0_writedata),            //   input,  width = 32,                         .writedata
		.uav_lock               (onchip_mem_lw_s1_agent_m0_lock),                 //   input,   width = 1,                         .lock
		.uav_debugaccess        (onchip_mem_lw_s1_agent_m0_debugaccess),          //   input,   width = 1,                         .debugaccess
		.av_address             (onchip_mem_LW_s1_address),                       //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (onchip_mem_LW_s1_write),                         //  output,   width = 1,                         .write
		.av_readdata            (onchip_mem_LW_s1_readdata),                      //   input,  width = 32,                         .readdata
		.av_writedata           (onchip_mem_LW_s1_writedata),                     //  output,  width = 32,                         .writedata
		.av_byteenable          (onchip_mem_LW_s1_byteenable),                    //  output,   width = 4,                         .byteenable
		.av_chipselect          (onchip_mem_LW_s1_chipselect),                    //  output,   width = 1,                         .chipselect
		.av_clken               (onchip_mem_LW_s1_clken),                         //  output,   width = 1,                         .clken
		.av_read                (),                                               // (terminated),                                       
		.av_begintransfer       (),                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                               // (terminated),                                       
		.av_burstcount          (),                                               // (terminated),                                       
		.av_readdatavalid       (1'b0),                                           // (terminated),                                       
		.av_waitrequest         (1'b0),                                           // (terminated),                                       
		.av_writebyteenable     (),                                               // (terminated),                                       
		.av_lock                (),                                               // (terminated),                                       
		.uav_clken              (1'b0),                                           // (terminated),                                       
		.av_debugaccess         (),                                               // (terminated),                                       
		.av_outputenable        (),                                               // (terminated),                                       
		.uav_response           (),                                               // (terminated),                                       
		.av_response            (2'b00),                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                            // (terminated),                                       
	);

	KBandIPsubPro_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) pio_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (pio_0_s1_agent_m0_address),                      //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (pio_0_s1_agent_m0_burstcount),                   //   input,   width = 3,                         .burstcount
		.uav_read               (pio_0_s1_agent_m0_read),                         //   input,   width = 1,                         .read
		.uav_write              (pio_0_s1_agent_m0_write),                        //   input,   width = 1,                         .write
		.uav_waitrequest        (pio_0_s1_agent_m0_waitrequest),                  //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (pio_0_s1_agent_m0_readdatavalid),                //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (pio_0_s1_agent_m0_byteenable),                   //   input,   width = 4,                         .byteenable
		.uav_readdata           (pio_0_s1_agent_m0_readdata),                     //  output,  width = 32,                         .readdata
		.uav_writedata          (pio_0_s1_agent_m0_writedata),                    //   input,  width = 32,                         .writedata
		.uav_lock               (pio_0_s1_agent_m0_lock),                         //   input,   width = 1,                         .lock
		.uav_debugaccess        (pio_0_s1_agent_m0_debugaccess),                  //   input,   width = 1,                         .debugaccess
		.av_address             (pio_0_s1_address),                               //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (pio_0_s1_write),                                 //  output,   width = 1,                         .write
		.av_readdata            (pio_0_s1_readdata),                              //   input,  width = 32,                         .readdata
		.av_writedata           (pio_0_s1_writedata),                             //  output,  width = 32,                         .writedata
		.av_chipselect          (pio_0_s1_chipselect),                            //  output,   width = 1,                         .chipselect
		.av_read                (),                                               // (terminated),                                       
		.av_begintransfer       (),                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                               // (terminated),                                       
		.av_burstcount          (),                                               // (terminated),                                       
		.av_byteenable          (),                                               // (terminated),                                       
		.av_readdatavalid       (1'b0),                                           // (terminated),                                       
		.av_waitrequest         (1'b0),                                           // (terminated),                                       
		.av_writebyteenable     (),                                               // (terminated),                                       
		.av_lock                (),                                               // (terminated),                                       
		.av_clken               (),                                               // (terminated),                                       
		.uav_clken              (1'b0),                                           // (terminated),                                       
		.av_debugaccess         (),                                               // (terminated),                                       
		.av_outputenable        (),                                               // (terminated),                                       
		.uav_response           (),                                               // (terminated),                                       
		.av_response            (2'b00),                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                            // (terminated),                                       
	);

	KBandIPsubPro_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) onchip_mem_lw2_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (onchip_mem_lw2_s1_agent_m0_address),             //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_mem_lw2_s1_agent_m0_burstcount),          //   input,   width = 3,                         .burstcount
		.uav_read               (onchip_mem_lw2_s1_agent_m0_read),                //   input,   width = 1,                         .read
		.uav_write              (onchip_mem_lw2_s1_agent_m0_write),               //   input,   width = 1,                         .write
		.uav_waitrequest        (onchip_mem_lw2_s1_agent_m0_waitrequest),         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_mem_lw2_s1_agent_m0_readdatavalid),       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_mem_lw2_s1_agent_m0_byteenable),          //   input,   width = 4,                         .byteenable
		.uav_readdata           (onchip_mem_lw2_s1_agent_m0_readdata),            //  output,  width = 32,                         .readdata
		.uav_writedata          (onchip_mem_lw2_s1_agent_m0_writedata),           //   input,  width = 32,                         .writedata
		.uav_lock               (onchip_mem_lw2_s1_agent_m0_lock),                //   input,   width = 1,                         .lock
		.uav_debugaccess        (onchip_mem_lw2_s1_agent_m0_debugaccess),         //   input,   width = 1,                         .debugaccess
		.av_address             (onchip_mem_LW2_s1_address),                      //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (onchip_mem_LW2_s1_write),                        //  output,   width = 1,                         .write
		.av_readdata            (onchip_mem_LW2_s1_readdata),                     //   input,  width = 32,                         .readdata
		.av_writedata           (onchip_mem_LW2_s1_writedata),                    //  output,  width = 32,                         .writedata
		.av_byteenable          (onchip_mem_LW2_s1_byteenable),                   //  output,   width = 4,                         .byteenable
		.av_chipselect          (onchip_mem_LW2_s1_chipselect),                   //  output,   width = 1,                         .chipselect
		.av_clken               (onchip_mem_LW2_s1_clken),                        //  output,   width = 1,                         .clken
		.av_read                (),                                               // (terminated),                                       
		.av_begintransfer       (),                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                               // (terminated),                                       
		.av_burstcount          (),                                               // (terminated),                                       
		.av_readdatavalid       (1'b0),                                           // (terminated),                                       
		.av_waitrequest         (1'b0),                                           // (terminated),                                       
		.av_writebyteenable     (),                                               // (terminated),                                       
		.av_lock                (),                                               // (terminated),                                       
		.uav_clken              (1'b0),                                           // (terminated),                                       
		.av_debugaccess         (),                                               // (terminated),                                       
		.av_outputenable        (),                                               // (terminated),                                       
		.uav_response           (),                                               // (terminated),                                       
		.av_response            (2'b00),                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                            // (terminated),                                       
	);

	KBandIPsubPro_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (30),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ddr_s0_translator (
		.clk                    (clk_0_clk_clk),                                  //   input,    width = 1,                      clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (ddr_s0_agent_m0_address),                        //   input,   width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ddr_s0_agent_m0_burstcount),                     //   input,    width = 9,                         .burstcount
		.uav_read               (ddr_s0_agent_m0_read),                           //   input,    width = 1,                         .read
		.uav_write              (ddr_s0_agent_m0_write),                          //   input,    width = 1,                         .write
		.uav_waitrequest        (ddr_s0_agent_m0_waitrequest),                    //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (ddr_s0_agent_m0_readdatavalid),                  //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (ddr_s0_agent_m0_byteenable),                     //   input,   width = 16,                         .byteenable
		.uav_readdata           (ddr_s0_agent_m0_readdata),                       //  output,  width = 128,                         .readdata
		.uav_writedata          (ddr_s0_agent_m0_writedata),                      //   input,  width = 128,                         .writedata
		.uav_lock               (ddr_s0_agent_m0_lock),                           //   input,    width = 1,                         .lock
		.uav_debugaccess        (ddr_s0_agent_m0_debugaccess),                    //   input,    width = 1,                         .debugaccess
		.av_address             (DDR_s0_address),                                 //  output,   width = 30,      avalon_anti_slave_0.address
		.av_write               (DDR_s0_write),                                   //  output,    width = 1,                         .write
		.av_read                (DDR_s0_read),                                    //  output,    width = 1,                         .read
		.av_readdata            (DDR_s0_readdata),                                //   input,  width = 128,                         .readdata
		.av_writedata           (DDR_s0_writedata),                               //  output,  width = 128,                         .writedata
		.av_burstcount          (DDR_s0_burstcount),                              //  output,    width = 5,                         .burstcount
		.av_byteenable          (DDR_s0_byteenable),                              //  output,   width = 16,                         .byteenable
		.av_readdatavalid       (DDR_s0_readdatavalid),                           //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (DDR_s0_waitrequest),                             //   input,    width = 1,                         .waitrequest
		.av_debugaccess         (DDR_s0_debugaccess),                             //  output,    width = 1,                         .debugaccess
		.av_begintransfer       (),                                               // (terminated),                                        
		.av_beginbursttransfer  (),                                               // (terminated),                                        
		.av_writebyteenable     (),                                               // (terminated),                                        
		.av_lock                (),                                               // (terminated),                                        
		.av_chipselect          (),                                               // (terminated),                                        
		.av_clken               (),                                               // (terminated),                                        
		.uav_clken              (1'b0),                                           // (terminated),                                        
		.av_outputenable        (),                                               // (terminated),                                        
		.uav_response           (),                                               // (terminated),                                        
		.av_response            (2'b00),                                          // (terminated),                                        
		.uav_writeresponsevalid (),                                               // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                            // (terminated),                                        
	);

	KBandIPsubPro_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) onchip_mem_fpga_slave_s1_translator (
		.clk                    (clk_0_clk_clk),                                   //   input,    width = 1,                      clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset),  //   input,    width = 1,                    reset.reset
		.uav_address            (onchip_mem_fpga_slave_s1_agent_m0_address),       //   input,   width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_mem_fpga_slave_s1_agent_m0_burstcount),    //   input,    width = 5,                         .burstcount
		.uav_read               (onchip_mem_fpga_slave_s1_agent_m0_read),          //   input,    width = 1,                         .read
		.uav_write              (onchip_mem_fpga_slave_s1_agent_m0_write),         //   input,    width = 1,                         .write
		.uav_waitrequest        (onchip_mem_fpga_slave_s1_agent_m0_waitrequest),   //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_mem_fpga_slave_s1_agent_m0_readdatavalid), //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_mem_fpga_slave_s1_agent_m0_byteenable),    //   input,   width = 16,                         .byteenable
		.uav_readdata           (onchip_mem_fpga_slave_s1_agent_m0_readdata),      //  output,  width = 128,                         .readdata
		.uav_writedata          (onchip_mem_fpga_slave_s1_agent_m0_writedata),     //   input,  width = 128,                         .writedata
		.uav_lock               (onchip_mem_fpga_slave_s1_agent_m0_lock),          //   input,    width = 1,                         .lock
		.uav_debugaccess        (onchip_mem_fpga_slave_s1_agent_m0_debugaccess),   //   input,    width = 1,                         .debugaccess
		.av_address             (onchip_mem_FPGA_Slave_s1_address),                //  output,   width = 14,      avalon_anti_slave_0.address
		.av_write               (onchip_mem_FPGA_Slave_s1_write),                  //  output,    width = 1,                         .write
		.av_readdata            (onchip_mem_FPGA_Slave_s1_readdata),               //   input,  width = 128,                         .readdata
		.av_writedata           (onchip_mem_FPGA_Slave_s1_writedata),              //  output,  width = 128,                         .writedata
		.av_byteenable          (onchip_mem_FPGA_Slave_s1_byteenable),             //  output,   width = 16,                         .byteenable
		.av_chipselect          (onchip_mem_FPGA_Slave_s1_chipselect),             //  output,    width = 1,                         .chipselect
		.av_clken               (onchip_mem_FPGA_Slave_s1_clken),                  //  output,    width = 1,                         .clken
		.av_read                (),                                                // (terminated),                                        
		.av_begintransfer       (),                                                // (terminated),                                        
		.av_beginbursttransfer  (),                                                // (terminated),                                        
		.av_burstcount          (),                                                // (terminated),                                        
		.av_readdatavalid       (1'b0),                                            // (terminated),                                        
		.av_waitrequest         (1'b0),                                            // (terminated),                                        
		.av_writebyteenable     (),                                                // (terminated),                                        
		.av_lock                (),                                                // (terminated),                                        
		.uav_clken              (1'b0),                                            // (terminated),                                        
		.av_debugaccess         (),                                                // (terminated),                                        
		.av_outputenable        (),                                                // (terminated),                                        
		.uav_response           (),                                                // (terminated),                                        
		.av_response            (2'b00),                                           // (terminated),                                        
		.uav_writeresponsevalid (),                                                // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                             // (terminated),                                        
	);

	KBandIPsubPro_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (122),
		.PKT_DOMAIN_H              (121),
		.PKT_DOMAIN_L              (120),
		.PKT_SNOOP_H               (119),
		.PKT_SNOOP_L               (116),
		.PKT_BARRIER_H             (115),
		.PKT_BARRIER_L             (114),
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_QOS_H                 (92),
		.PKT_QOS_L                 (92),
		.PKT_DATA_SIDEBAND_H       (90),
		.PKT_DATA_SIDEBAND_L       (90),
		.PKT_ADDR_SIDEBAND_H       (89),
		.PKT_ADDR_SIDEBAND_L       (89),
		.PKT_BURST_TYPE_H          (88),
		.PKT_BURST_TYPE_L          (87),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (101),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (123),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) mm_bridge_lw_m0_agent (
		.clk                   (clk_0_clk_clk),                                                      //   input,    width = 1,       clk.clk
		.reset                 (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.av_address            (mm_bridge_lw_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (mm_bridge_lw_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (mm_bridge_lw_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (mm_bridge_lw_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (mm_bridge_lw_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (mm_bridge_lw_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (mm_bridge_lw_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (mm_bridge_lw_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (mm_bridge_lw_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (mm_bridge_lw_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (mm_bridge_lw_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (mm_bridge_lw_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (mm_bridge_lw_m0_agent_cp_data),                                      //  output,  width = 123,          .data
		.cp_startofpacket      (mm_bridge_lw_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (mm_bridge_lw_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (mm_bridge_lw_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (mm_bridge_lw_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (mm_bridge_lw_m0_limiter_rsp_src_data),                               //   input,  width = 123,          .data
		.rp_channel            (mm_bridge_lw_m0_limiter_rsp_src_channel),                            //   input,   width = 11,          .channel
		.rp_startofpacket      (mm_bridge_lw_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (mm_bridge_lw_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (mm_bridge_lw_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                   // (terminated),                         
		.av_writeresponsevalid ()                                                                    // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (95),
		.PKT_DOMAIN_H              (94),
		.PKT_DOMAIN_L              (93),
		.PKT_SNOOP_H               (92),
		.PKT_SNOOP_L               (89),
		.PKT_BARRIER_H             (88),
		.PKT_BARRIER_L             (87),
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_QOS_H                 (65),
		.PKT_QOS_L                 (65),
		.PKT_DATA_SIDEBAND_H       (63),
		.PKT_DATA_SIDEBAND_L       (63),
		.PKT_ADDR_SIDEBAND_H       (62),
		.PKT_ADDR_SIDEBAND_L       (62),
		.PKT_BURST_TYPE_H          (61),
		.PKT_BURST_TYPE_L          (60),
		.PKT_CACHE_H               (81),
		.PKT_CACHE_L               (78),
		.PKT_THREAD_ID_H           (74),
		.PKT_THREAD_ID_L           (74),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) kbandinput_2_mm_read_agent (
		.clk                   (clk_0_clk_clk),                                                           //   input,   width = 1,       clk.clk
		.reset                 (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                          //   input,   width = 1, clk_reset.reset
		.av_address            (kbandinput_2_mm_read_translator_avalon_universal_master_0_address),       //   input,  width = 32,        av.address
		.av_write              (kbandinput_2_mm_read_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (kbandinput_2_mm_read_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (kbandinput_2_mm_read_translator_avalon_universal_master_0_writedata),     //   input,   width = 8,          .writedata
		.av_readdata           (kbandinput_2_mm_read_translator_avalon_universal_master_0_readdata),      //  output,   width = 8,          .readdata
		.av_waitrequest        (kbandinput_2_mm_read_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (kbandinput_2_mm_read_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (kbandinput_2_mm_read_translator_avalon_universal_master_0_byteenable),    //   input,   width = 1,          .byteenable
		.av_burstcount         (kbandinput_2_mm_read_translator_avalon_universal_master_0_burstcount),    //   input,   width = 1,          .burstcount
		.av_debugaccess        (kbandinput_2_mm_read_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (kbandinput_2_mm_read_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (kbandinput_2_mm_read_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (kbandinput_2_mm_read_agent_cp_data),                                      //  output,  width = 96,          .data
		.cp_startofpacket      (kbandinput_2_mm_read_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (kbandinput_2_mm_read_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (kbandinput_2_mm_read_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (kbandinput_2_mm_read_limiter_rsp_src_valid),                              //   input,   width = 1,        rp.valid
		.rp_data               (kbandinput_2_mm_read_limiter_rsp_src_data),                               //   input,  width = 96,          .data
		.rp_channel            (kbandinput_2_mm_read_limiter_rsp_src_channel),                            //   input,  width = 11,          .channel
		.rp_startofpacket      (kbandinput_2_mm_read_limiter_rsp_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (kbandinput_2_mm_read_limiter_rsp_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rp_ready              (kbandinput_2_mm_read_limiter_rsp_src_ready),                              //  output,   width = 1,          .ready
		.av_response           (),                                                                        // (terminated),                        
		.av_writeresponsevalid ()                                                                         // (terminated),                        
	);

	KBandIPsubPro_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (95),
		.PKT_DOMAIN_H              (94),
		.PKT_DOMAIN_L              (93),
		.PKT_SNOOP_H               (92),
		.PKT_SNOOP_L               (89),
		.PKT_BARRIER_H             (88),
		.PKT_BARRIER_L             (87),
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_QOS_H                 (65),
		.PKT_QOS_L                 (65),
		.PKT_DATA_SIDEBAND_H       (63),
		.PKT_DATA_SIDEBAND_L       (63),
		.PKT_ADDR_SIDEBAND_H       (62),
		.PKT_ADDR_SIDEBAND_L       (62),
		.PKT_BURST_TYPE_H          (61),
		.PKT_BURST_TYPE_L          (60),
		.PKT_CACHE_H               (81),
		.PKT_CACHE_L               (78),
		.PKT_THREAD_ID_H           (74),
		.PKT_THREAD_ID_L           (74),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) kbandinput_1_mm_read_agent (
		.clk                   (clk_0_clk_clk),                                                           //   input,   width = 1,       clk.clk
		.reset                 (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                          //   input,   width = 1, clk_reset.reset
		.av_address            (kbandinput_1_mm_read_translator_avalon_universal_master_0_address),       //   input,  width = 32,        av.address
		.av_write              (kbandinput_1_mm_read_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (kbandinput_1_mm_read_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (kbandinput_1_mm_read_translator_avalon_universal_master_0_writedata),     //   input,   width = 8,          .writedata
		.av_readdata           (kbandinput_1_mm_read_translator_avalon_universal_master_0_readdata),      //  output,   width = 8,          .readdata
		.av_waitrequest        (kbandinput_1_mm_read_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (kbandinput_1_mm_read_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (kbandinput_1_mm_read_translator_avalon_universal_master_0_byteenable),    //   input,   width = 1,          .byteenable
		.av_burstcount         (kbandinput_1_mm_read_translator_avalon_universal_master_0_burstcount),    //   input,   width = 1,          .burstcount
		.av_debugaccess        (kbandinput_1_mm_read_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (kbandinput_1_mm_read_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (kbandinput_1_mm_read_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (kbandinput_1_mm_read_agent_cp_data),                                      //  output,  width = 96,          .data
		.cp_startofpacket      (kbandinput_1_mm_read_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (kbandinput_1_mm_read_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (kbandinput_1_mm_read_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (kbandinput_1_mm_read_limiter_rsp_src_valid),                              //   input,   width = 1,        rp.valid
		.rp_data               (kbandinput_1_mm_read_limiter_rsp_src_data),                               //   input,  width = 96,          .data
		.rp_channel            (kbandinput_1_mm_read_limiter_rsp_src_channel),                            //   input,  width = 11,          .channel
		.rp_startofpacket      (kbandinput_1_mm_read_limiter_rsp_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (kbandinput_1_mm_read_limiter_rsp_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rp_ready              (kbandinput_1_mm_read_limiter_rsp_src_ready),                              //  output,   width = 1,          .ready
		.av_response           (),                                                                        // (terminated),                        
		.av_writeresponsevalid ()                                                                         // (terminated),                        
	);

	KBandIPsubPro_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (230),
		.PKT_DOMAIN_H              (229),
		.PKT_DOMAIN_L              (228),
		.PKT_SNOOP_H               (227),
		.PKT_SNOOP_L               (224),
		.PKT_BARRIER_H             (223),
		.PKT_BARRIER_L             (222),
		.PKT_ORI_BURST_SIZE_H      (221),
		.PKT_ORI_BURST_SIZE_L      (219),
		.PKT_RESPONSE_STATUS_H     (218),
		.PKT_RESPONSE_STATUS_L     (217),
		.PKT_QOS_H                 (200),
		.PKT_QOS_L                 (200),
		.PKT_DATA_SIDEBAND_H       (198),
		.PKT_DATA_SIDEBAND_L       (198),
		.PKT_ADDR_SIDEBAND_H       (197),
		.PKT_ADDR_SIDEBAND_L       (197),
		.PKT_BURST_TYPE_H          (196),
		.PKT_BURST_TYPE_L          (195),
		.PKT_CACHE_H               (216),
		.PKT_CACHE_L               (213),
		.PKT_THREAD_ID_H           (209),
		.PKT_THREAD_ID_L           (209),
		.PKT_BURST_SIZE_H          (194),
		.PKT_BURST_SIZE_L          (192),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (199),
		.PKT_PROTECTION_H          (212),
		.PKT_PROTECTION_L          (210),
		.PKT_BURSTWRAP_H           (191),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (204),
		.PKT_SRC_ID_L              (201),
		.PKT_DEST_ID_H             (208),
		.PKT_DEST_ID_L             (205),
		.ST_DATA_W                 (231),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) kbandoutput_mm_write_agent (
		.clk                   (clk_0_clk_clk),                                                           //   input,    width = 1,       clk.clk
		.reset                 (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.av_address            (kbandoutput_mm_write_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (kbandoutput_mm_write_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (kbandoutput_mm_write_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (kbandoutput_mm_write_translator_avalon_universal_master_0_writedata),     //   input,  width = 128,          .writedata
		.av_readdata           (kbandoutput_mm_write_translator_avalon_universal_master_0_readdata),      //  output,  width = 128,          .readdata
		.av_waitrequest        (kbandoutput_mm_write_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (kbandoutput_mm_write_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (kbandoutput_mm_write_translator_avalon_universal_master_0_byteenable),    //   input,   width = 16,          .byteenable
		.av_burstcount         (kbandoutput_mm_write_translator_avalon_universal_master_0_burstcount),    //   input,    width = 5,          .burstcount
		.av_debugaccess        (kbandoutput_mm_write_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (kbandoutput_mm_write_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (kbandoutput_mm_write_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (kbandoutput_mm_write_agent_cp_data),                                      //  output,  width = 231,          .data
		.cp_startofpacket      (kbandoutput_mm_write_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (kbandoutput_mm_write_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (kbandoutput_mm_write_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                   //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                    //   input,  width = 231,          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                 //   input,   width = 11,          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                   //  output,    width = 1,          .ready
		.av_response           (),                                                                        // (terminated),                         
		.av_writeresponsevalid ()                                                                         // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (158),
		.PKT_DOMAIN_H              (157),
		.PKT_DOMAIN_L              (156),
		.PKT_SNOOP_H               (155),
		.PKT_SNOOP_L               (152),
		.PKT_BARRIER_H             (151),
		.PKT_BARRIER_L             (150),
		.PKT_ORI_BURST_SIZE_H      (149),
		.PKT_ORI_BURST_SIZE_L      (147),
		.PKT_RESPONSE_STATUS_H     (146),
		.PKT_RESPONSE_STATUS_L     (145),
		.PKT_QOS_H                 (128),
		.PKT_QOS_L                 (128),
		.PKT_DATA_SIDEBAND_H       (126),
		.PKT_DATA_SIDEBAND_L       (126),
		.PKT_ADDR_SIDEBAND_H       (125),
		.PKT_ADDR_SIDEBAND_L       (125),
		.PKT_BURST_TYPE_H          (124),
		.PKT_BURST_TYPE_L          (123),
		.PKT_CACHE_H               (144),
		.PKT_CACHE_L               (141),
		.PKT_THREAD_ID_H           (137),
		.PKT_THREAD_ID_L           (137),
		.PKT_BURST_SIZE_H          (122),
		.PKT_BURST_SIZE_L          (120),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (127),
		.PKT_PROTECTION_H          (140),
		.PKT_PROTECTION_L          (138),
		.PKT_BURSTWRAP_H           (119),
		.PKT_BURSTWRAP_L           (119),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (129),
		.PKT_DEST_ID_H             (136),
		.PKT_DEST_ID_L             (133),
		.ST_DATA_W                 (159),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) mm_bridge_fpga_slave_m0_agent (
		.clk                   (clk_0_clk_clk),                                                              //   input,    width = 1,       clk.clk
		.reset                 (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, clk_reset.reset
		.av_address            (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 64,          .writedata
		.av_readdata           (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 64,          .readdata
		.av_waitrequest        (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 8,          .byteenable
		.av_burstcount         (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 4,          .burstcount
		.av_debugaccess        (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (mm_bridge_fpga_slave_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (mm_bridge_fpga_slave_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (mm_bridge_fpga_slave_m0_agent_cp_data),                                      //  output,  width = 159,          .data
		.cp_startofpacket      (mm_bridge_fpga_slave_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (mm_bridge_fpga_slave_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (mm_bridge_fpga_slave_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                      //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                       //   input,  width = 159,          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                    //   input,   width = 11,          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                      //  output,    width = 1,          .ready
		.av_response           (),                                                                           // (terminated),                         
		.av_writeresponsevalid ()                                                                            // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (123),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) kbandoutput_csr_agent (
		.clk                     (clk_0_clk_clk),                                    //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_LW_reset_reset_bridge_in_reset_reset),   //   input,    width = 1,       clk_reset.reset
		.m0_address              (kbandoutput_csr_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (kbandoutput_csr_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (kbandoutput_csr_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (kbandoutput_csr_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (kbandoutput_csr_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (kbandoutput_csr_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (kbandoutput_csr_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (kbandoutput_csr_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (kbandoutput_csr_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (kbandoutput_csr_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (kbandoutput_csr_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (kbandoutput_csr_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (kbandoutput_csr_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (kbandoutput_csr_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (kbandoutput_csr_agent_rp_data),                    //  output,  width = 123,                .data
		.rp_startofpacket        (kbandoutput_csr_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                 //   input,  width = 123,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                        //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                          //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                              //   input,   width = 11,                .channel
		.rf_sink_ready           (kbandoutput_csr_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (kbandoutput_csr_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (kbandoutput_csr_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (kbandoutput_csr_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (kbandoutput_csr_agent_rsp_fifo_out_data),          //   input,  width = 124,                .data
		.rf_source_ready         (kbandoutput_csr_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (kbandoutput_csr_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (kbandoutput_csr_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (kbandoutput_csr_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (kbandoutput_csr_agent_rf_source_data),             //  output,  width = 124,                .data
		.rdata_fifo_sink_ready   (kbandoutput_csr_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (kbandoutput_csr_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (kbandoutput_csr_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (kbandoutput_csr_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (kbandoutput_csr_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (kbandoutput_csr_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                            // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                             // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                              // (terminated),                               
	);

	KBandIPsubPro_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (124),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) kbandoutput_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_LW_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (kbandoutput_csr_agent_rf_source_data),             //   input,  width = 124,        in.data
		.in_valid          (kbandoutput_csr_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (kbandoutput_csr_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (kbandoutput_csr_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (kbandoutput_csr_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (kbandoutput_csr_agent_rsp_fifo_out_data),          //  output,  width = 124,       out.data
		.out_valid         (kbandoutput_csr_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (kbandoutput_csr_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (kbandoutput_csr_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (kbandoutput_csr_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                            // (terminated),                         
		.csr_read          (1'b0),                                             // (terminated),                         
		.csr_write         (1'b0),                                             // (terminated),                         
		.csr_readdata      (),                                                 // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated),                         
		.almost_full_data  (),                                                 // (terminated),                         
		.almost_empty_data (),                                                 // (terminated),                         
		.in_empty          (1'b0),                                             // (terminated),                         
		.out_empty         (),                                                 // (terminated),                         
		.in_error          (1'b0),                                             // (terminated),                         
		.out_error         (),                                                 // (terminated),                         
		.in_channel        (1'b0),                                             // (terminated),                         
		.out_channel       ()                                                  // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (123),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) kbandinput_1_csr_agent (
		.clk                     (clk_0_clk_clk),                                     //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_LW_reset_reset_bridge_in_reset_reset),    //   input,    width = 1,       clk_reset.reset
		.m0_address              (kbandinput_1_csr_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (kbandinput_1_csr_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (kbandinput_1_csr_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (kbandinput_1_csr_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (kbandinput_1_csr_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (kbandinput_1_csr_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (kbandinput_1_csr_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (kbandinput_1_csr_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (kbandinput_1_csr_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (kbandinput_1_csr_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (kbandinput_1_csr_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (kbandinput_1_csr_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (kbandinput_1_csr_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (kbandinput_1_csr_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (kbandinput_1_csr_agent_rp_data),                    //  output,  width = 123,                .data
		.rp_startofpacket        (kbandinput_1_csr_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                             //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                             //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                              //   input,  width = 123,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                     //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                       //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                           //   input,   width = 11,                .channel
		.rf_sink_ready           (kbandinput_1_csr_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (kbandinput_1_csr_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (kbandinput_1_csr_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (kbandinput_1_csr_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (kbandinput_1_csr_agent_rsp_fifo_out_data),          //   input,  width = 124,                .data
		.rf_source_ready         (kbandinput_1_csr_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (kbandinput_1_csr_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (kbandinput_1_csr_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (kbandinput_1_csr_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (kbandinput_1_csr_agent_rf_source_data),             //  output,  width = 124,                .data
		.rdata_fifo_sink_ready   (kbandinput_1_csr_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (kbandinput_1_csr_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (kbandinput_1_csr_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (kbandinput_1_csr_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (kbandinput_1_csr_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (kbandinput_1_csr_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                               // (terminated),                               
	);

	KBandIPsubPro_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (124),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) kbandinput_1_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_LW_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.in_data           (kbandinput_1_csr_agent_rf_source_data),             //   input,  width = 124,        in.data
		.in_valid          (kbandinput_1_csr_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (kbandinput_1_csr_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (kbandinput_1_csr_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (kbandinput_1_csr_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (kbandinput_1_csr_agent_rsp_fifo_out_data),          //  output,  width = 124,       out.data
		.out_valid         (kbandinput_1_csr_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (kbandinput_1_csr_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (kbandinput_1_csr_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (kbandinput_1_csr_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                             // (terminated),                         
		.csr_read          (1'b0),                                              // (terminated),                         
		.csr_write         (1'b0),                                              // (terminated),                         
		.csr_readdata      (),                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated),                         
		.almost_full_data  (),                                                  // (terminated),                         
		.almost_empty_data (),                                                  // (terminated),                         
		.in_empty          (1'b0),                                              // (terminated),                         
		.out_empty         (),                                                  // (terminated),                         
		.in_error          (1'b0),                                              // (terminated),                         
		.out_error         (),                                                  // (terminated),                         
		.in_channel        (1'b0),                                              // (terminated),                         
		.out_channel       ()                                                   // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (123),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) kbandinput_2_csr_agent (
		.clk                     (clk_0_clk_clk),                                     //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_LW_reset_reset_bridge_in_reset_reset),    //   input,    width = 1,       clk_reset.reset
		.m0_address              (kbandinput_2_csr_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (kbandinput_2_csr_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (kbandinput_2_csr_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (kbandinput_2_csr_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (kbandinput_2_csr_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (kbandinput_2_csr_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (kbandinput_2_csr_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (kbandinput_2_csr_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (kbandinput_2_csr_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (kbandinput_2_csr_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (kbandinput_2_csr_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (kbandinput_2_csr_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (kbandinput_2_csr_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (kbandinput_2_csr_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (kbandinput_2_csr_agent_rp_data),                    //  output,  width = 123,                .data
		.rp_startofpacket        (kbandinput_2_csr_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                             //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                             //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_002_src_data),                              //   input,  width = 123,                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                     //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                       //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                           //   input,   width = 11,                .channel
		.rf_sink_ready           (kbandinput_2_csr_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (kbandinput_2_csr_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (kbandinput_2_csr_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (kbandinput_2_csr_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (kbandinput_2_csr_agent_rsp_fifo_out_data),          //   input,  width = 124,                .data
		.rf_source_ready         (kbandinput_2_csr_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (kbandinput_2_csr_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (kbandinput_2_csr_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (kbandinput_2_csr_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (kbandinput_2_csr_agent_rf_source_data),             //  output,  width = 124,                .data
		.rdata_fifo_sink_ready   (kbandinput_2_csr_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (kbandinput_2_csr_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (kbandinput_2_csr_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (kbandinput_2_csr_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (kbandinput_2_csr_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (kbandinput_2_csr_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                               // (terminated),                               
	);

	KBandIPsubPro_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (124),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) kbandinput_2_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_LW_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.in_data           (kbandinput_2_csr_agent_rf_source_data),             //   input,  width = 124,        in.data
		.in_valid          (kbandinput_2_csr_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (kbandinput_2_csr_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (kbandinput_2_csr_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (kbandinput_2_csr_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (kbandinput_2_csr_agent_rsp_fifo_out_data),          //  output,  width = 124,       out.data
		.out_valid         (kbandinput_2_csr_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (kbandinput_2_csr_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (kbandinput_2_csr_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (kbandinput_2_csr_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                             // (terminated),                         
		.csr_read          (1'b0),                                              // (terminated),                         
		.csr_write         (1'b0),                                              // (terminated),                         
		.csr_readdata      (),                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated),                         
		.almost_full_data  (),                                                  // (terminated),                         
		.almost_empty_data (),                                                  // (terminated),                         
		.in_empty          (1'b0),                                              // (terminated),                         
		.out_empty         (),                                                  // (terminated),                         
		.in_error          (1'b0),                                              // (terminated),                         
		.out_error         (),                                                  // (terminated),                         
		.in_channel        (1'b0),                                              // (terminated),                         
		.out_channel       ()                                                   // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (221),
		.PKT_ORI_BURST_SIZE_L      (219),
		.PKT_RESPONSE_STATUS_H     (218),
		.PKT_RESPONSE_STATUS_L     (217),
		.PKT_BURST_SIZE_H          (194),
		.PKT_BURST_SIZE_L          (192),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (199),
		.PKT_PROTECTION_H          (212),
		.PKT_PROTECTION_L          (210),
		.PKT_BURSTWRAP_H           (191),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (204),
		.PKT_SRC_ID_L              (201),
		.PKT_DEST_ID_H             (208),
		.PKT_DEST_ID_L             (205),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (231),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) kbandoutput_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                //   input,    width = 1,       clk_reset.reset
		.m0_address              (kbandoutput_descriptor_slave_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (kbandoutput_descriptor_slave_agent_m0_burstcount),              //  output,    width = 5,                .burstcount
		.m0_byteenable           (kbandoutput_descriptor_slave_agent_m0_byteenable),              //  output,   width = 16,                .byteenable
		.m0_debugaccess          (kbandoutput_descriptor_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (kbandoutput_descriptor_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (kbandoutput_descriptor_slave_agent_m0_readdata),                //   input,  width = 128,                .readdata
		.m0_readdatavalid        (kbandoutput_descriptor_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (kbandoutput_descriptor_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (kbandoutput_descriptor_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (kbandoutput_descriptor_slave_agent_m0_writedata),               //  output,  width = 128,                .writedata
		.m0_write                (kbandoutput_descriptor_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (kbandoutput_descriptor_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (kbandoutput_descriptor_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (kbandoutput_descriptor_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (kbandoutput_descriptor_slave_agent_rp_data),                    //  output,  width = 231,                .data
		.rp_startofpacket        (kbandoutput_descriptor_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                         //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                         //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_003_src_data),                                          //   input,  width = 231,                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                 //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                   //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                       //   input,   width = 11,                .channel
		.rf_sink_ready           (kbandoutput_descriptor_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (kbandoutput_descriptor_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (kbandoutput_descriptor_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (kbandoutput_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (kbandoutput_descriptor_slave_agent_rsp_fifo_out_data),          //   input,  width = 232,                .data
		.rf_source_ready         (kbandoutput_descriptor_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (kbandoutput_descriptor_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (kbandoutput_descriptor_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (kbandoutput_descriptor_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (kbandoutput_descriptor_slave_agent_rf_source_data),             //  output,  width = 232,                .data
		.rdata_fifo_sink_ready   (kbandoutput_descriptor_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (kbandoutput_descriptor_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (kbandoutput_descriptor_slave_agent_rdata_fifo_src_data),        //   input,  width = 130,                .data
		.rdata_fifo_src_ready    (kbandoutput_descriptor_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (kbandoutput_descriptor_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (kbandoutput_descriptor_slave_agent_rdata_fifo_src_data),        //  output,  width = 130,                .data
		.m0_response             (2'b00),                                                         // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                          // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                           // (terminated),                               
	);

	KBandIPsubPro_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (232),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) kbandoutput_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_data           (kbandoutput_descriptor_slave_agent_rf_source_data),             //   input,  width = 232,        in.data
		.in_valid          (kbandoutput_descriptor_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (kbandoutput_descriptor_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (kbandoutput_descriptor_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (kbandoutput_descriptor_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (kbandoutput_descriptor_slave_agent_rsp_fifo_out_data),          //  output,  width = 232,       out.data
		.out_valid         (kbandoutput_descriptor_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (kbandoutput_descriptor_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (kbandoutput_descriptor_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (kbandoutput_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated),                         
		.csr_read          (1'b0),                                                          // (terminated),                         
		.csr_write         (1'b0),                                                          // (terminated),                         
		.csr_readdata      (),                                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated),                         
		.almost_full_data  (),                                                              // (terminated),                         
		.almost_empty_data (),                                                              // (terminated),                         
		.in_empty          (1'b0),                                                          // (terminated),                         
		.out_empty         (),                                                              // (terminated),                         
		.in_error          (1'b0),                                                          // (terminated),                         
		.out_error         (),                                                              // (terminated),                         
		.in_channel        (1'b0),                                                          // (terminated),                         
		.out_channel       ()                                                               // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (221),
		.PKT_ORI_BURST_SIZE_L      (219),
		.PKT_RESPONSE_STATUS_H     (218),
		.PKT_RESPONSE_STATUS_L     (217),
		.PKT_BURST_SIZE_H          (194),
		.PKT_BURST_SIZE_L          (192),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (199),
		.PKT_PROTECTION_H          (212),
		.PKT_PROTECTION_L          (210),
		.PKT_BURSTWRAP_H           (191),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (204),
		.PKT_SRC_ID_L              (201),
		.PKT_DEST_ID_H             (208),
		.PKT_DEST_ID_L             (205),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (231),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) kbandinput_1_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1,       clk_reset.reset
		.m0_address              (kbandinput_1_descriptor_slave_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (kbandinput_1_descriptor_slave_agent_m0_burstcount),              //  output,    width = 5,                .burstcount
		.m0_byteenable           (kbandinput_1_descriptor_slave_agent_m0_byteenable),              //  output,   width = 16,                .byteenable
		.m0_debugaccess          (kbandinput_1_descriptor_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (kbandinput_1_descriptor_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (kbandinput_1_descriptor_slave_agent_m0_readdata),                //   input,  width = 128,                .readdata
		.m0_readdatavalid        (kbandinput_1_descriptor_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (kbandinput_1_descriptor_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (kbandinput_1_descriptor_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (kbandinput_1_descriptor_slave_agent_m0_writedata),               //  output,  width = 128,                .writedata
		.m0_write                (kbandinput_1_descriptor_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (kbandinput_1_descriptor_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (kbandinput_1_descriptor_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (kbandinput_1_descriptor_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (kbandinput_1_descriptor_slave_agent_rp_data),                    //  output,  width = 231,                .data
		.rp_startofpacket        (kbandinput_1_descriptor_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_004_src_data),                                           //   input,  width = 231,                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                        //   input,   width = 11,                .channel
		.rf_sink_ready           (kbandinput_1_descriptor_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (kbandinput_1_descriptor_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (kbandinput_1_descriptor_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (kbandinput_1_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (kbandinput_1_descriptor_slave_agent_rsp_fifo_out_data),          //   input,  width = 232,                .data
		.rf_source_ready         (kbandinput_1_descriptor_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (kbandinput_1_descriptor_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (kbandinput_1_descriptor_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (kbandinput_1_descriptor_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (kbandinput_1_descriptor_slave_agent_rf_source_data),             //  output,  width = 232,                .data
		.rdata_fifo_sink_ready   (kbandinput_1_descriptor_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (kbandinput_1_descriptor_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (kbandinput_1_descriptor_slave_agent_rdata_fifo_src_data),        //   input,  width = 130,                .data
		.rdata_fifo_src_ready    (kbandinput_1_descriptor_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (kbandinput_1_descriptor_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (kbandinput_1_descriptor_slave_agent_rdata_fifo_src_data),        //  output,  width = 130,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	KBandIPsubPro_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (232),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) kbandinput_1_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1, clk_reset.reset
		.in_data           (kbandinput_1_descriptor_slave_agent_rf_source_data),             //   input,  width = 232,        in.data
		.in_valid          (kbandinput_1_descriptor_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (kbandinput_1_descriptor_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (kbandinput_1_descriptor_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (kbandinput_1_descriptor_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (kbandinput_1_descriptor_slave_agent_rsp_fifo_out_data),          //  output,  width = 232,       out.data
		.out_valid         (kbandinput_1_descriptor_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (kbandinput_1_descriptor_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (kbandinput_1_descriptor_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (kbandinput_1_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (221),
		.PKT_ORI_BURST_SIZE_L      (219),
		.PKT_RESPONSE_STATUS_H     (218),
		.PKT_RESPONSE_STATUS_L     (217),
		.PKT_BURST_SIZE_H          (194),
		.PKT_BURST_SIZE_L          (192),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (199),
		.PKT_PROTECTION_H          (212),
		.PKT_PROTECTION_L          (210),
		.PKT_BURSTWRAP_H           (191),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (204),
		.PKT_SRC_ID_L              (201),
		.PKT_DEST_ID_H             (208),
		.PKT_DEST_ID_L             (205),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (231),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) kbandinput_2_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1,       clk_reset.reset
		.m0_address              (kbandinput_2_descriptor_slave_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (kbandinput_2_descriptor_slave_agent_m0_burstcount),              //  output,    width = 5,                .burstcount
		.m0_byteenable           (kbandinput_2_descriptor_slave_agent_m0_byteenable),              //  output,   width = 16,                .byteenable
		.m0_debugaccess          (kbandinput_2_descriptor_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (kbandinput_2_descriptor_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (kbandinput_2_descriptor_slave_agent_m0_readdata),                //   input,  width = 128,                .readdata
		.m0_readdatavalid        (kbandinput_2_descriptor_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (kbandinput_2_descriptor_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (kbandinput_2_descriptor_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (kbandinput_2_descriptor_slave_agent_m0_writedata),               //  output,  width = 128,                .writedata
		.m0_write                (kbandinput_2_descriptor_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (kbandinput_2_descriptor_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (kbandinput_2_descriptor_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (kbandinput_2_descriptor_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (kbandinput_2_descriptor_slave_agent_rp_data),                    //  output,  width = 231,                .data
		.rp_startofpacket        (kbandinput_2_descriptor_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_005_src_data),                                           //   input,  width = 231,                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                        //   input,   width = 11,                .channel
		.rf_sink_ready           (kbandinput_2_descriptor_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (kbandinput_2_descriptor_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (kbandinput_2_descriptor_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (kbandinput_2_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (kbandinput_2_descriptor_slave_agent_rsp_fifo_out_data),          //   input,  width = 232,                .data
		.rf_source_ready         (kbandinput_2_descriptor_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (kbandinput_2_descriptor_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (kbandinput_2_descriptor_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (kbandinput_2_descriptor_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (kbandinput_2_descriptor_slave_agent_rf_source_data),             //  output,  width = 232,                .data
		.rdata_fifo_sink_ready   (kbandinput_2_descriptor_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (kbandinput_2_descriptor_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (kbandinput_2_descriptor_slave_agent_rdata_fifo_src_data),        //   input,  width = 130,                .data
		.rdata_fifo_src_ready    (kbandinput_2_descriptor_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (kbandinput_2_descriptor_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (kbandinput_2_descriptor_slave_agent_rdata_fifo_src_data),        //  output,  width = 130,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	KBandIPsubPro_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (232),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) kbandinput_2_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1, clk_reset.reset
		.in_data           (kbandinput_2_descriptor_slave_agent_rf_source_data),             //   input,  width = 232,        in.data
		.in_valid          (kbandinput_2_descriptor_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (kbandinput_2_descriptor_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (kbandinput_2_descriptor_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (kbandinput_2_descriptor_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (kbandinput_2_descriptor_slave_agent_rsp_fifo_out_data),          //  output,  width = 232,       out.data
		.out_valid         (kbandinput_2_descriptor_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (kbandinput_2_descriptor_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (kbandinput_2_descriptor_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (kbandinput_2_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (123),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) onchip_mem_lw_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_LW_reset_reset_bridge_in_reset_reset),    //   input,    width = 1,       clk_reset.reset
		.m0_address              (onchip_mem_lw_s1_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (onchip_mem_lw_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (onchip_mem_lw_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (onchip_mem_lw_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (onchip_mem_lw_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (onchip_mem_lw_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (onchip_mem_lw_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (onchip_mem_lw_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (onchip_mem_lw_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (onchip_mem_lw_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (onchip_mem_lw_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (onchip_mem_lw_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (onchip_mem_lw_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (onchip_mem_lw_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (onchip_mem_lw_s1_agent_rp_data),                    //  output,  width = 123,                .data
		.rp_startofpacket        (onchip_mem_lw_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                             //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                             //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_006_src_data),                              //   input,  width = 123,                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                     //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                       //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                           //   input,   width = 11,                .channel
		.rf_sink_ready           (onchip_mem_lw_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_mem_lw_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (onchip_mem_lw_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_mem_lw_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (onchip_mem_lw_s1_agent_rsp_fifo_out_data),          //   input,  width = 124,                .data
		.rf_source_ready         (onchip_mem_lw_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (onchip_mem_lw_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (onchip_mem_lw_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_mem_lw_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (onchip_mem_lw_s1_agent_rf_source_data),             //  output,  width = 124,                .data
		.rdata_fifo_sink_ready   (onchip_mem_lw_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_mem_lw_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (onchip_mem_lw_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (onchip_mem_lw_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_mem_lw_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (onchip_mem_lw_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                               // (terminated),                               
	);

	KBandIPsubPro_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (124),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) onchip_mem_lw_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_LW_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.in_data           (onchip_mem_lw_s1_agent_rf_source_data),             //   input,  width = 124,        in.data
		.in_valid          (onchip_mem_lw_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (onchip_mem_lw_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (onchip_mem_lw_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_mem_lw_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (onchip_mem_lw_s1_agent_rsp_fifo_out_data),          //  output,  width = 124,       out.data
		.out_valid         (onchip_mem_lw_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (onchip_mem_lw_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (onchip_mem_lw_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (onchip_mem_lw_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                             // (terminated),                         
		.csr_read          (1'b0),                                              // (terminated),                         
		.csr_write         (1'b0),                                              // (terminated),                         
		.csr_readdata      (),                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated),                         
		.almost_full_data  (),                                                  // (terminated),                         
		.almost_empty_data (),                                                  // (terminated),                         
		.in_empty          (1'b0),                                              // (terminated),                         
		.out_empty         (),                                                  // (terminated),                         
		.in_error          (1'b0),                                              // (terminated),                         
		.out_error         (),                                                  // (terminated),                         
		.in_channel        (1'b0),                                              // (terminated),                         
		.out_channel       ()                                                   // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (123),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) pio_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (pio_0_s1_agent_m0_address),                      //  output,   width = 32,              m0.address
		.m0_burstcount           (pio_0_s1_agent_m0_burstcount),                   //  output,    width = 3,                .burstcount
		.m0_byteenable           (pio_0_s1_agent_m0_byteenable),                   //  output,    width = 4,                .byteenable
		.m0_debugaccess          (pio_0_s1_agent_m0_debugaccess),                  //  output,    width = 1,                .debugaccess
		.m0_lock                 (pio_0_s1_agent_m0_lock),                         //  output,    width = 1,                .lock
		.m0_readdata             (pio_0_s1_agent_m0_readdata),                     //   input,   width = 32,                .readdata
		.m0_readdatavalid        (pio_0_s1_agent_m0_readdatavalid),                //   input,    width = 1,                .readdatavalid
		.m0_read                 (pio_0_s1_agent_m0_read),                         //  output,    width = 1,                .read
		.m0_waitrequest          (pio_0_s1_agent_m0_waitrequest),                  //   input,    width = 1,                .waitrequest
		.m0_writedata            (pio_0_s1_agent_m0_writedata),                    //  output,   width = 32,                .writedata
		.m0_write                (pio_0_s1_agent_m0_write),                        //  output,    width = 1,                .write
		.rp_endofpacket          (pio_0_s1_agent_rp_endofpacket),                  //  output,    width = 1,              rp.endofpacket
		.rp_ready                (pio_0_s1_agent_rp_ready),                        //   input,    width = 1,                .ready
		.rp_valid                (pio_0_s1_agent_rp_valid),                        //  output,    width = 1,                .valid
		.rp_data                 (pio_0_s1_agent_rp_data),                         //  output,  width = 123,                .data
		.rp_startofpacket        (pio_0_s1_agent_rp_startofpacket),                //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //   input,  width = 123,                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //   input,   width = 11,                .channel
		.rf_sink_ready           (pio_0_s1_agent_rsp_fifo_out_ready),              //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (pio_0_s1_agent_rsp_fifo_out_valid),              //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (pio_0_s1_agent_rsp_fifo_out_startofpacket),      //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (pio_0_s1_agent_rsp_fifo_out_endofpacket),        //   input,    width = 1,                .endofpacket
		.rf_sink_data            (pio_0_s1_agent_rsp_fifo_out_data),               //   input,  width = 124,                .data
		.rf_source_ready         (pio_0_s1_agent_rf_source_ready),                 //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (pio_0_s1_agent_rf_source_valid),                 //  output,    width = 1,                .valid
		.rf_source_startofpacket (pio_0_s1_agent_rf_source_startofpacket),         //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (pio_0_s1_agent_rf_source_endofpacket),           //  output,    width = 1,                .endofpacket
		.rf_source_data          (pio_0_s1_agent_rf_source_data),                  //  output,  width = 124,                .data
		.rdata_fifo_sink_ready   (pio_0_s1_agent_rdata_fifo_src_ready),            //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_0_s1_agent_rdata_fifo_src_valid),            //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (pio_0_s1_agent_rdata_fifo_src_data),             //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (pio_0_s1_agent_rdata_fifo_src_ready),            //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_0_s1_agent_rdata_fifo_src_valid),            //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (pio_0_s1_agent_rdata_fifo_src_data),             //  output,   width = 34,                .data
		.m0_response             (2'b00),                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                            // (terminated),                               
	);

	KBandIPsubPro_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (124),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) pio_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (pio_0_s1_agent_rf_source_data),                  //   input,  width = 124,        in.data
		.in_valid          (pio_0_s1_agent_rf_source_valid),                 //   input,    width = 1,          .valid
		.in_ready          (pio_0_s1_agent_rf_source_ready),                 //  output,    width = 1,          .ready
		.in_startofpacket  (pio_0_s1_agent_rf_source_startofpacket),         //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pio_0_s1_agent_rf_source_endofpacket),           //   input,    width = 1,          .endofpacket
		.out_data          (pio_0_s1_agent_rsp_fifo_out_data),               //  output,  width = 124,       out.data
		.out_valid         (pio_0_s1_agent_rsp_fifo_out_valid),              //  output,    width = 1,          .valid
		.out_ready         (pio_0_s1_agent_rsp_fifo_out_ready),              //   input,    width = 1,          .ready
		.out_startofpacket (pio_0_s1_agent_rsp_fifo_out_startofpacket),      //  output,    width = 1,          .startofpacket
		.out_endofpacket   (pio_0_s1_agent_rsp_fifo_out_endofpacket),        //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                          // (terminated),                         
		.csr_read          (1'b0),                                           // (terminated),                         
		.csr_write         (1'b0),                                           // (terminated),                         
		.csr_readdata      (),                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated),                         
		.almost_full_data  (),                                               // (terminated),                         
		.almost_empty_data (),                                               // (terminated),                         
		.in_empty          (1'b0),                                           // (terminated),                         
		.out_empty         (),                                               // (terminated),                         
		.in_error          (1'b0),                                           // (terminated),                         
		.out_error         (),                                               // (terminated),                         
		.in_channel        (1'b0),                                           // (terminated),                         
		.out_channel       ()                                                // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (86),
		.PKT_BURST_SIZE_L          (84),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (91),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (83),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (93),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (123),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) onchip_mem_lw2_s1_agent (
		.clk                     (clk_0_clk_clk),                                      //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_LW_reset_reset_bridge_in_reset_reset),     //   input,    width = 1,       clk_reset.reset
		.m0_address              (onchip_mem_lw2_s1_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (onchip_mem_lw2_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (onchip_mem_lw2_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (onchip_mem_lw2_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (onchip_mem_lw2_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (onchip_mem_lw2_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (onchip_mem_lw2_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (onchip_mem_lw2_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (onchip_mem_lw2_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (onchip_mem_lw2_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (onchip_mem_lw2_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (onchip_mem_lw2_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (onchip_mem_lw2_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (onchip_mem_lw2_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (onchip_mem_lw2_s1_agent_rp_data),                    //  output,  width = 123,                .data
		.rp_startofpacket        (onchip_mem_lw2_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                              //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                              //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_008_src_data),                               //   input,  width = 123,                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                      //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                        //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                            //   input,   width = 11,                .channel
		.rf_sink_ready           (onchip_mem_lw2_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_mem_lw2_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (onchip_mem_lw2_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_mem_lw2_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (onchip_mem_lw2_s1_agent_rsp_fifo_out_data),          //   input,  width = 124,                .data
		.rf_source_ready         (onchip_mem_lw2_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (onchip_mem_lw2_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (onchip_mem_lw2_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_mem_lw2_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (onchip_mem_lw2_s1_agent_rf_source_data),             //  output,  width = 124,                .data
		.rdata_fifo_sink_ready   (onchip_mem_lw2_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_mem_lw2_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (onchip_mem_lw2_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (onchip_mem_lw2_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_mem_lw2_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (onchip_mem_lw2_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                              // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                               // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                // (terminated),                               
	);

	KBandIPsubPro_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (124),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) onchip_mem_lw2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_LW_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_data           (onchip_mem_lw2_s1_agent_rf_source_data),             //   input,  width = 124,        in.data
		.in_valid          (onchip_mem_lw2_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (onchip_mem_lw2_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (onchip_mem_lw2_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_mem_lw2_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (onchip_mem_lw2_s1_agent_rsp_fifo_out_data),          //  output,  width = 124,       out.data
		.out_valid         (onchip_mem_lw2_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (onchip_mem_lw2_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (onchip_mem_lw2_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (onchip_mem_lw2_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (221),
		.PKT_ORI_BURST_SIZE_L      (219),
		.PKT_RESPONSE_STATUS_H     (218),
		.PKT_RESPONSE_STATUS_L     (217),
		.PKT_BURST_SIZE_H          (194),
		.PKT_BURST_SIZE_L          (192),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (199),
		.PKT_PROTECTION_H          (212),
		.PKT_PROTECTION_L          (210),
		.PKT_BURSTWRAP_H           (191),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (204),
		.PKT_SRC_ID_L              (201),
		.PKT_DEST_ID_H             (208),
		.PKT_DEST_ID_L             (205),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (231),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ddr_s0_agent (
		.clk                     (clk_0_clk_clk),                                  //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (ddr_s0_agent_m0_address),                        //  output,   width = 32,              m0.address
		.m0_burstcount           (ddr_s0_agent_m0_burstcount),                     //  output,    width = 9,                .burstcount
		.m0_byteenable           (ddr_s0_agent_m0_byteenable),                     //  output,   width = 16,                .byteenable
		.m0_debugaccess          (ddr_s0_agent_m0_debugaccess),                    //  output,    width = 1,                .debugaccess
		.m0_lock                 (ddr_s0_agent_m0_lock),                           //  output,    width = 1,                .lock
		.m0_readdata             (ddr_s0_agent_m0_readdata),                       //   input,  width = 128,                .readdata
		.m0_readdatavalid        (ddr_s0_agent_m0_readdatavalid),                  //   input,    width = 1,                .readdatavalid
		.m0_read                 (ddr_s0_agent_m0_read),                           //  output,    width = 1,                .read
		.m0_waitrequest          (ddr_s0_agent_m0_waitrequest),                    //   input,    width = 1,                .waitrequest
		.m0_writedata            (ddr_s0_agent_m0_writedata),                      //  output,  width = 128,                .writedata
		.m0_write                (ddr_s0_agent_m0_write),                          //  output,    width = 1,                .write
		.rp_endofpacket          (ddr_s0_agent_rp_endofpacket),                    //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ddr_s0_agent_rp_ready),                          //   input,    width = 1,                .ready
		.rp_valid                (ddr_s0_agent_rp_valid),                          //  output,    width = 1,                .valid
		.rp_data                 (ddr_s0_agent_rp_data),                           //  output,  width = 231,                .data
		.rp_startofpacket        (ddr_s0_agent_rp_startofpacket),                  //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_009_src_data),                           //   input,  width = 231,                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                        //   input,   width = 11,                .channel
		.rf_sink_ready           (ddr_s0_agent_rsp_fifo_out_ready),                //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ddr_s0_agent_rsp_fifo_out_valid),                //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ddr_s0_agent_rsp_fifo_out_startofpacket),        //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ddr_s0_agent_rsp_fifo_out_endofpacket),          //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ddr_s0_agent_rsp_fifo_out_data),                 //   input,  width = 232,                .data
		.rf_source_ready         (ddr_s0_agent_rf_source_ready),                   //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ddr_s0_agent_rf_source_valid),                   //  output,    width = 1,                .valid
		.rf_source_startofpacket (ddr_s0_agent_rf_source_startofpacket),           //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ddr_s0_agent_rf_source_endofpacket),             //  output,    width = 1,                .endofpacket
		.rf_source_data          (ddr_s0_agent_rf_source_data),                    //  output,  width = 232,                .data
		.rdata_fifo_sink_ready   (ddr_s0_agent_rdata_fifo_src_ready),              //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ddr_s0_agent_rdata_fifo_src_valid),              //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ddr_s0_agent_rdata_fifo_src_data),               //   input,  width = 130,                .data
		.rdata_fifo_src_ready    (ddr_s0_agent_rdata_fifo_src_ready),              //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr_s0_agent_rdata_fifo_src_valid),              //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ddr_s0_agent_rdata_fifo_src_data),               //  output,  width = 130,                .data
		.m0_response             (2'b00),                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                            // (terminated),                               
	);

	KBandIPsubPro_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (232),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) ddr_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (ddr_s0_agent_rf_source_data),                    //   input,  width = 232,        in.data
		.in_valid          (ddr_s0_agent_rf_source_valid),                   //   input,    width = 1,          .valid
		.in_ready          (ddr_s0_agent_rf_source_ready),                   //  output,    width = 1,          .ready
		.in_startofpacket  (ddr_s0_agent_rf_source_startofpacket),           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr_s0_agent_rf_source_endofpacket),             //   input,    width = 1,          .endofpacket
		.out_data          (ddr_s0_agent_rsp_fifo_out_data),                 //  output,  width = 232,       out.data
		.out_valid         (ddr_s0_agent_rsp_fifo_out_valid),                //  output,    width = 1,          .valid
		.out_ready         (ddr_s0_agent_rsp_fifo_out_ready),                //   input,    width = 1,          .ready
		.out_startofpacket (ddr_s0_agent_rsp_fifo_out_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ddr_s0_agent_rsp_fifo_out_endofpacket),          //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                          // (terminated),                         
		.csr_read          (1'b0),                                           // (terminated),                         
		.csr_write         (1'b0),                                           // (terminated),                         
		.csr_readdata      (),                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated),                         
		.almost_full_data  (),                                               // (terminated),                         
		.almost_empty_data (),                                               // (terminated),                         
		.in_empty          (1'b0),                                           // (terminated),                         
		.out_empty         (),                                               // (terminated),                         
		.in_error          (1'b0),                                           // (terminated),                         
		.out_error         (),                                               // (terminated),                         
		.in_channel        (1'b0),                                           // (terminated),                         
		.out_channel       ()                                                // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (221),
		.PKT_ORI_BURST_SIZE_L      (219),
		.PKT_RESPONSE_STATUS_H     (218),
		.PKT_RESPONSE_STATUS_L     (217),
		.PKT_BURST_SIZE_H          (194),
		.PKT_BURST_SIZE_L          (192),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (199),
		.PKT_PROTECTION_H          (212),
		.PKT_PROTECTION_L          (210),
		.PKT_BURSTWRAP_H           (191),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (204),
		.PKT_SRC_ID_L              (201),
		.PKT_DEST_ID_H             (208),
		.PKT_DEST_ID_L             (205),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (231),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) onchip_mem_fpga_slave_s1_agent (
		.clk                     (clk_0_clk_clk),                                             //   input,    width = 1,             clk.clk
		.reset                   (mm_bridge_LW_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,       clk_reset.reset
		.m0_address              (onchip_mem_fpga_slave_s1_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (onchip_mem_fpga_slave_s1_agent_m0_burstcount),              //  output,    width = 5,                .burstcount
		.m0_byteenable           (onchip_mem_fpga_slave_s1_agent_m0_byteenable),              //  output,   width = 16,                .byteenable
		.m0_debugaccess          (onchip_mem_fpga_slave_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (onchip_mem_fpga_slave_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (onchip_mem_fpga_slave_s1_agent_m0_readdata),                //   input,  width = 128,                .readdata
		.m0_readdatavalid        (onchip_mem_fpga_slave_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (onchip_mem_fpga_slave_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (onchip_mem_fpga_slave_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (onchip_mem_fpga_slave_s1_agent_m0_writedata),               //  output,  width = 128,                .writedata
		.m0_write                (onchip_mem_fpga_slave_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (onchip_mem_fpga_slave_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (onchip_mem_fpga_slave_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (onchip_mem_fpga_slave_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (onchip_mem_fpga_slave_s1_agent_rp_data),                    //  output,  width = 231,                .data
		.rp_startofpacket        (onchip_mem_fpga_slave_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                     //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                     //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_010_src_data),                                      //   input,  width = 231,                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                             //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                               //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                   //   input,   width = 11,                .channel
		.rf_sink_ready           (onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_data),          //   input,  width = 232,                .data
		.rf_source_ready         (onchip_mem_fpga_slave_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (onchip_mem_fpga_slave_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (onchip_mem_fpga_slave_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_mem_fpga_slave_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (onchip_mem_fpga_slave_s1_agent_rf_source_data),             //  output,  width = 232,                .data
		.rdata_fifo_sink_ready   (onchip_mem_fpga_slave_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_mem_fpga_slave_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (onchip_mem_fpga_slave_s1_agent_rdata_fifo_src_data),        //   input,  width = 130,                .data
		.rdata_fifo_src_ready    (onchip_mem_fpga_slave_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_mem_fpga_slave_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (onchip_mem_fpga_slave_s1_agent_rdata_fifo_src_data),        //  output,  width = 130,                .data
		.m0_response             (2'b00),                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                       // (terminated),                               
	);

	KBandIPsubPro_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (232),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) onchip_mem_fpga_slave_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset             (mm_bridge_LW_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, clk_reset.reset
		.in_data           (onchip_mem_fpga_slave_s1_agent_rf_source_data),             //   input,  width = 232,        in.data
		.in_valid          (onchip_mem_fpga_slave_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (onchip_mem_fpga_slave_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (onchip_mem_fpga_slave_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_mem_fpga_slave_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_data),          //  output,  width = 232,       out.data
		.out_valid         (onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (onchip_mem_fpga_slave_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated),                         
		.csr_read          (1'b0),                                                      // (terminated),                         
		.csr_write         (1'b0),                                                      // (terminated),                         
		.csr_readdata      (),                                                          // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated),                         
		.almost_full_data  (),                                                          // (terminated),                         
		.almost_empty_data (),                                                          // (terminated),                         
		.in_empty          (1'b0),                                                      // (terminated),                         
		.out_empty         (),                                                          // (terminated),                         
		.in_error          (1'b0),                                                      // (terminated),                         
		.out_error         (),                                                          // (terminated),                         
		.in_channel        (1'b0),                                                      // (terminated),                         
		.out_channel       ()                                                           // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_router_191_uvdan3a router (
		.sink_ready         (mm_bridge_lw_m0_agent_cp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (mm_bridge_lw_m0_agent_cp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (mm_bridge_lw_m0_agent_cp_data),                  //   input,  width = 123,          .data
		.sink_startofpacket (mm_bridge_lw_m0_agent_cp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_bridge_lw_m0_agent_cp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                               //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                //  output,  width = 123,          .data
		.src_channel        (router_src_channel),                             //  output,   width = 11,          .channel
		.src_startofpacket  (router_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_mhjpkzi router_001 (
		.sink_ready         (kbandinput_2_mm_read_agent_cp_ready),            //  output,   width = 1,      sink.ready
		.sink_valid         (kbandinput_2_mm_read_agent_cp_valid),            //   input,   width = 1,          .valid
		.sink_data          (kbandinput_2_mm_read_agent_cp_data),             //   input,  width = 96,          .data
		.sink_startofpacket (kbandinput_2_mm_read_agent_cp_startofpacket),    //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (kbandinput_2_mm_read_agent_cp_endofpacket),      //   input,   width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                           //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                           //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                            //  output,  width = 96,          .data
		.src_channel        (router_001_src_channel),                         //  output,  width = 11,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                   //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                      //  output,   width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_nh3sovq router_002 (
		.sink_ready         (kbandinput_1_mm_read_agent_cp_ready),            //  output,   width = 1,      sink.ready
		.sink_valid         (kbandinput_1_mm_read_agent_cp_valid),            //   input,   width = 1,          .valid
		.sink_data          (kbandinput_1_mm_read_agent_cp_data),             //   input,  width = 96,          .data
		.sink_startofpacket (kbandinput_1_mm_read_agent_cp_startofpacket),    //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (kbandinput_1_mm_read_agent_cp_endofpacket),      //   input,   width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                           //   input,   width = 1,       src.ready
		.src_valid          (router_002_src_valid),                           //  output,   width = 1,          .valid
		.src_data           (router_002_src_data),                            //  output,  width = 96,          .data
		.src_channel        (router_002_src_channel),                         //  output,  width = 11,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                   //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                      //  output,   width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_6hyzyia router_003 (
		.sink_ready         (kbandoutput_mm_write_agent_cp_ready),            //  output,    width = 1,      sink.ready
		.sink_valid         (kbandoutput_mm_write_agent_cp_valid),            //   input,    width = 1,          .valid
		.sink_data          (kbandoutput_mm_write_agent_cp_data),             //   input,  width = 231,          .data
		.sink_startofpacket (kbandoutput_mm_write_agent_cp_startofpacket),    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (kbandoutput_mm_write_agent_cp_endofpacket),      //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                            //  output,  width = 231,          .data
		.src_channel        (router_003_src_channel),                         //  output,   width = 11,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_5skywri router_004 (
		.sink_ready         (mm_bridge_fpga_slave_m0_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (mm_bridge_fpga_slave_m0_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (mm_bridge_fpga_slave_m0_agent_cp_data),          //   input,  width = 159,          .data
		.sink_startofpacket (mm_bridge_fpga_slave_m0_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_bridge_fpga_slave_m0_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                            //  output,  width = 159,          .data
		.src_channel        (router_004_src_channel),                         //  output,   width = 11,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_6qje3ma router_005 (
		.sink_ready         (kbandoutput_csr_agent_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (kbandoutput_csr_agent_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (kbandoutput_csr_agent_rp_data),                  //   input,  width = 123,          .data
		.sink_startofpacket (kbandoutput_csr_agent_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (kbandoutput_csr_agent_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                            //  output,  width = 123,          .data
		.src_channel        (router_005_src_channel),                         //  output,   width = 11,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_6qje3ma router_006 (
		.sink_ready         (kbandinput_1_csr_agent_rp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (kbandinput_1_csr_agent_rp_valid),                //   input,    width = 1,          .valid
		.sink_data          (kbandinput_1_csr_agent_rp_data),                 //   input,  width = 123,          .data
		.sink_startofpacket (kbandinput_1_csr_agent_rp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (kbandinput_1_csr_agent_rp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                            //  output,  width = 123,          .data
		.src_channel        (router_006_src_channel),                         //  output,   width = 11,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_6qje3ma router_007 (
		.sink_ready         (kbandinput_2_csr_agent_rp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (kbandinput_2_csr_agent_rp_valid),                //   input,    width = 1,          .valid
		.sink_data          (kbandinput_2_csr_agent_rp_data),                 //   input,  width = 123,          .data
		.sink_startofpacket (kbandinput_2_csr_agent_rp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (kbandinput_2_csr_agent_rp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                            //  output,  width = 123,          .data
		.src_channel        (router_007_src_channel),                         //  output,   width = 11,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_a65mj6i router_008 (
		.sink_ready         (kbandoutput_descriptor_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (kbandoutput_descriptor_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (kbandoutput_descriptor_slave_agent_rp_data),          //   input,  width = 231,          .data
		.sink_startofpacket (kbandoutput_descriptor_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (kbandoutput_descriptor_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                                 //  output,  width = 231,          .data
		.src_channel        (router_008_src_channel),                              //  output,   width = 11,          .channel
		.src_startofpacket  (router_008_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_a65mj6i router_009 (
		.sink_ready         (kbandinput_1_descriptor_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (kbandinput_1_descriptor_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (kbandinput_1_descriptor_slave_agent_rp_data),          //   input,  width = 231,          .data
		.sink_startofpacket (kbandinput_1_descriptor_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (kbandinput_1_descriptor_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.src_ready          (router_009_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid          (router_009_src_valid),                                 //  output,    width = 1,          .valid
		.src_data           (router_009_src_data),                                  //  output,  width = 231,          .data
		.src_channel        (router_009_src_channel),                               //  output,   width = 11,          .channel
		.src_startofpacket  (router_009_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_a65mj6i router_010 (
		.sink_ready         (kbandinput_2_descriptor_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (kbandinput_2_descriptor_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (kbandinput_2_descriptor_slave_agent_rp_data),          //   input,  width = 231,          .data
		.sink_startofpacket (kbandinput_2_descriptor_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (kbandinput_2_descriptor_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.src_ready          (router_010_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid          (router_010_src_valid),                                 //  output,    width = 1,          .valid
		.src_data           (router_010_src_data),                                  //  output,  width = 231,          .data
		.src_channel        (router_010_src_channel),                               //  output,   width = 11,          .channel
		.src_startofpacket  (router_010_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_p5qo7wy router_011 (
		.sink_ready         (onchip_mem_lw_s1_agent_rp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_mem_lw_s1_agent_rp_valid),                //   input,    width = 1,          .valid
		.sink_data          (onchip_mem_lw_s1_agent_rp_data),                 //   input,  width = 123,          .data
		.sink_startofpacket (onchip_mem_lw_s1_agent_rp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_mem_lw_s1_agent_rp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_011_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_011_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_011_src_data),                            //  output,  width = 123,          .data
		.src_channel        (router_011_src_channel),                         //  output,   width = 11,          .channel
		.src_startofpacket  (router_011_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_6qje3ma router_012 (
		.sink_ready         (pio_0_s1_agent_rp_ready),                        //  output,    width = 1,      sink.ready
		.sink_valid         (pio_0_s1_agent_rp_valid),                        //   input,    width = 1,          .valid
		.sink_data          (pio_0_s1_agent_rp_data),                         //   input,  width = 123,          .data
		.sink_startofpacket (pio_0_s1_agent_rp_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pio_0_s1_agent_rp_endofpacket),                  //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_012_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_012_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_012_src_data),                            //  output,  width = 123,          .data
		.src_channel        (router_012_src_channel),                         //  output,   width = 11,          .channel
		.src_startofpacket  (router_012_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_5tjoejq router_013 (
		.sink_ready         (onchip_mem_lw2_s1_agent_rp_ready),               //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_mem_lw2_s1_agent_rp_valid),               //   input,    width = 1,          .valid
		.sink_data          (onchip_mem_lw2_s1_agent_rp_data),                //   input,  width = 123,          .data
		.sink_startofpacket (onchip_mem_lw2_s1_agent_rp_startofpacket),       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_mem_lw2_s1_agent_rp_endofpacket),         //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_013_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_013_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_013_src_data),                            //  output,  width = 123,          .data
		.src_channel        (router_013_src_channel),                         //  output,   width = 11,          .channel
		.src_startofpacket  (router_013_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_6gpqywq router_014 (
		.sink_ready         (ddr_s0_agent_rp_ready),                          //  output,    width = 1,      sink.ready
		.sink_valid         (ddr_s0_agent_rp_valid),                          //   input,    width = 1,          .valid
		.sink_data          (ddr_s0_agent_rp_data),                           //   input,  width = 231,          .data
		.sink_startofpacket (ddr_s0_agent_rp_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ddr_s0_agent_rp_endofpacket),                    //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_014_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_014_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_014_src_data),                            //  output,  width = 231,          .data
		.src_channel        (router_014_src_channel),                         //  output,   width = 11,          .channel
		.src_startofpacket  (router_014_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_router_191_zple4ii router_015 (
		.sink_ready         (onchip_mem_fpga_slave_s1_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_mem_fpga_slave_s1_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (onchip_mem_fpga_slave_s1_agent_rp_data),          //   input,  width = 231,          .data
		.sink_startofpacket (onchip_mem_fpga_slave_s1_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_mem_fpga_slave_s1_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.src_ready          (router_015_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_015_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_015_src_data),                             //  output,  width = 231,          .data
		.src_channel        (router_015_src_channel),                          //  output,   width = 11,          .channel
		.src_startofpacket  (router_015_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (97),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (93),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (2),
		.PIPELINED                 (0),
		.ST_DATA_W                 (123),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_bridge_lw_m0_limiter (
		.clk                    (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                               //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                               //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                //   input,  width = 123,          .data
		.cmd_sink_channel       (router_src_channel),                             //   input,   width = 11,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                       //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                         //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (mm_bridge_lw_m0_limiter_cmd_src_ready),          //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (mm_bridge_lw_m0_limiter_cmd_src_data),           //  output,  width = 123,          .data
		.cmd_src_channel        (mm_bridge_lw_m0_limiter_cmd_src_channel),        //  output,   width = 11,          .channel
		.cmd_src_startofpacket  (mm_bridge_lw_m0_limiter_cmd_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_lw_m0_limiter_cmd_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                              //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                              //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                            //   input,   width = 11,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                               //   input,  width = 123,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (mm_bridge_lw_m0_limiter_rsp_src_ready),          //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (mm_bridge_lw_m0_limiter_rsp_src_valid),          //  output,    width = 1,          .valid
		.rsp_src_data           (mm_bridge_lw_m0_limiter_rsp_src_data),           //  output,  width = 123,          .data
		.rsp_src_channel        (mm_bridge_lw_m0_limiter_rsp_src_channel),        //  output,   width = 11,          .channel
		.rsp_src_startofpacket  (mm_bridge_lw_m0_limiter_rsp_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_lw_m0_limiter_rsp_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (mm_bridge_lw_m0_limiter_cmd_valid_data)          //  output,   width = 11, cmd_valid.data
	);

	KBandIPsubPro_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) kbandinput_2_mm_read_limiter (
		.clk                    (clk_0_clk_clk),                                      //   input,   width = 1,       clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset),     //   input,   width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                               //  output,   width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                               //   input,   width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                                //   input,  width = 96,          .data
		.cmd_sink_channel       (router_001_src_channel),                             //   input,  width = 11,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                       //   input,   width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                         //   input,   width = 1,          .endofpacket
		.cmd_src_ready          (kbandinput_2_mm_read_limiter_cmd_src_ready),         //   input,   width = 1,   cmd_src.ready
		.cmd_src_data           (kbandinput_2_mm_read_limiter_cmd_src_data),          //  output,  width = 96,          .data
		.cmd_src_channel        (kbandinput_2_mm_read_limiter_cmd_src_channel),       //  output,  width = 11,          .channel
		.cmd_src_startofpacket  (kbandinput_2_mm_read_limiter_cmd_src_startofpacket), //  output,   width = 1,          .startofpacket
		.cmd_src_endofpacket    (kbandinput_2_mm_read_limiter_cmd_src_endofpacket),   //  output,   width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                              //  output,   width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                              //   input,   width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                            //   input,  width = 11,          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                               //   input,  width = 96,          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rsp_src_ready          (kbandinput_2_mm_read_limiter_rsp_src_ready),         //   input,   width = 1,   rsp_src.ready
		.rsp_src_valid          (kbandinput_2_mm_read_limiter_rsp_src_valid),         //  output,   width = 1,          .valid
		.rsp_src_data           (kbandinput_2_mm_read_limiter_rsp_src_data),          //  output,  width = 96,          .data
		.rsp_src_channel        (kbandinput_2_mm_read_limiter_rsp_src_channel),       //  output,  width = 11,          .channel
		.rsp_src_startofpacket  (kbandinput_2_mm_read_limiter_rsp_src_startofpacket), //  output,   width = 1,          .startofpacket
		.rsp_src_endofpacket    (kbandinput_2_mm_read_limiter_rsp_src_endofpacket),   //  output,   width = 1,          .endofpacket
		.cmd_src_valid          (kbandinput_2_mm_read_limiter_cmd_valid_data)         //  output,  width = 11, cmd_valid.data
	);

	KBandIPsubPro_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) kbandinput_1_mm_read_limiter (
		.clk                    (clk_0_clk_clk),                                      //   input,   width = 1,       clk.clk
		.reset                  (mm_bridge_LW_reset_reset_bridge_in_reset_reset),     //   input,   width = 1, clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                               //  output,   width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                               //   input,   width = 1,          .valid
		.cmd_sink_data          (router_002_src_data),                                //   input,  width = 96,          .data
		.cmd_sink_channel       (router_002_src_channel),                             //   input,  width = 11,          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                       //   input,   width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                         //   input,   width = 1,          .endofpacket
		.cmd_src_ready          (kbandinput_1_mm_read_limiter_cmd_src_ready),         //   input,   width = 1,   cmd_src.ready
		.cmd_src_data           (kbandinput_1_mm_read_limiter_cmd_src_data),          //  output,  width = 96,          .data
		.cmd_src_channel        (kbandinput_1_mm_read_limiter_cmd_src_channel),       //  output,  width = 11,          .channel
		.cmd_src_startofpacket  (kbandinput_1_mm_read_limiter_cmd_src_startofpacket), //  output,   width = 1,          .startofpacket
		.cmd_src_endofpacket    (kbandinput_1_mm_read_limiter_cmd_src_endofpacket),   //  output,   width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                              //  output,   width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                              //   input,   width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                            //   input,  width = 11,          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                               //   input,  width = 96,          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rsp_src_ready          (kbandinput_1_mm_read_limiter_rsp_src_ready),         //   input,   width = 1,   rsp_src.ready
		.rsp_src_valid          (kbandinput_1_mm_read_limiter_rsp_src_valid),         //  output,   width = 1,          .valid
		.rsp_src_data           (kbandinput_1_mm_read_limiter_rsp_src_data),          //  output,  width = 96,          .data
		.rsp_src_channel        (kbandinput_1_mm_read_limiter_rsp_src_channel),       //  output,  width = 11,          .channel
		.rsp_src_startofpacket  (kbandinput_1_mm_read_limiter_rsp_src_startofpacket), //  output,   width = 1,          .startofpacket
		.rsp_src_endofpacket    (kbandinput_1_mm_read_limiter_rsp_src_endofpacket),   //  output,   width = 1,          .endofpacket
		.cmd_src_valid          (kbandinput_1_mm_read_limiter_cmd_valid_data)         //  output,  width = 11, cmd_valid.data
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_cnm6k3i cmd_demux (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,        clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (mm_bridge_lw_m0_limiter_cmd_src_ready),          //  output,    width = 1,       sink.ready
		.sink_channel       (mm_bridge_lw_m0_limiter_cmd_src_channel),        //   input,   width = 11,           .channel
		.sink_data          (mm_bridge_lw_m0_limiter_cmd_src_data),           //   input,  width = 123,           .data
		.sink_startofpacket (mm_bridge_lw_m0_limiter_cmd_src_startofpacket),  //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (mm_bridge_lw_m0_limiter_cmd_src_endofpacket),    //   input,    width = 1,           .endofpacket
		.sink_valid         (mm_bridge_lw_m0_limiter_cmd_valid_data),         //   input,   width = 11, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                           //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                           //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                            //  output,  width = 123,           .data
		.src0_channel       (cmd_demux_src0_channel),                         //  output,   width = 11,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                           //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                           //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                            //  output,  width = 123,           .data
		.src1_channel       (cmd_demux_src1_channel),                         //  output,   width = 11,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                           //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                           //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                            //  output,  width = 123,           .data
		.src2_channel       (cmd_demux_src2_channel),                         //  output,   width = 11,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                           //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                           //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_src3_data),                            //  output,  width = 123,           .data
		.src3_channel       (cmd_demux_src3_channel),                         //  output,   width = 11,           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                           //   input,    width = 1,       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                           //  output,    width = 1,           .valid
		.src4_data          (cmd_demux_src4_data),                            //  output,  width = 123,           .data
		.src4_channel       (cmd_demux_src4_channel),                         //  output,   width = 11,           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                           //   input,    width = 1,       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                           //  output,    width = 1,           .valid
		.src5_data          (cmd_demux_src5_data),                            //  output,  width = 123,           .data
		.src5_channel       (cmd_demux_src5_channel),                         //  output,   width = 11,           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                           //   input,    width = 1,       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                           //  output,    width = 1,           .valid
		.src6_data          (cmd_demux_src6_data),                            //  output,  width = 123,           .data
		.src6_channel       (cmd_demux_src6_channel),                         //  output,   width = 11,           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                           //   input,    width = 1,       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                           //  output,    width = 1,           .valid
		.src7_data          (cmd_demux_src7_data),                            //  output,  width = 123,           .data
		.src7_channel       (cmd_demux_src7_channel),                         //  output,   width = 11,           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                           //   input,    width = 1,       src8.ready
		.src8_valid         (cmd_demux_src8_valid),                           //  output,    width = 1,           .valid
		.src8_data          (cmd_demux_src8_data),                            //  output,  width = 123,           .data
		.src8_channel       (cmd_demux_src8_channel),                         //  output,   width = 11,           .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket)                      //  output,    width = 1,           .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_y7cgvzy cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                      //   input,   width = 1,        clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset),     //   input,   width = 1,  clk_reset.reset
		.sink_ready         (kbandinput_2_mm_read_limiter_cmd_src_ready),         //  output,   width = 1,       sink.ready
		.sink_channel       (kbandinput_2_mm_read_limiter_cmd_src_channel),       //   input,  width = 11,           .channel
		.sink_data          (kbandinput_2_mm_read_limiter_cmd_src_data),          //   input,  width = 96,           .data
		.sink_startofpacket (kbandinput_2_mm_read_limiter_cmd_src_startofpacket), //   input,   width = 1,           .startofpacket
		.sink_endofpacket   (kbandinput_2_mm_read_limiter_cmd_src_endofpacket),   //   input,   width = 1,           .endofpacket
		.sink_valid         (kbandinput_2_mm_read_limiter_cmd_valid_data),        //   input,  width = 11, sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                           //   input,   width = 1,       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                           //  output,   width = 1,           .valid
		.src0_data          (cmd_demux_001_src0_data),                            //  output,  width = 96,           .data
		.src0_channel       (cmd_demux_001_src0_channel),                         //  output,  width = 11,           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                   //  output,   width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                     //  output,   width = 1,           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                           //   input,   width = 1,       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                           //  output,   width = 1,           .valid
		.src1_data          (cmd_demux_001_src1_data),                            //  output,  width = 96,           .data
		.src1_channel       (cmd_demux_001_src1_channel),                         //  output,  width = 11,           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                   //  output,   width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                      //  output,   width = 1,           .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_y7cgvzy cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                      //   input,   width = 1,        clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset),     //   input,   width = 1,  clk_reset.reset
		.sink_ready         (kbandinput_1_mm_read_limiter_cmd_src_ready),         //  output,   width = 1,       sink.ready
		.sink_channel       (kbandinput_1_mm_read_limiter_cmd_src_channel),       //   input,  width = 11,           .channel
		.sink_data          (kbandinput_1_mm_read_limiter_cmd_src_data),          //   input,  width = 96,           .data
		.sink_startofpacket (kbandinput_1_mm_read_limiter_cmd_src_startofpacket), //   input,   width = 1,           .startofpacket
		.sink_endofpacket   (kbandinput_1_mm_read_limiter_cmd_src_endofpacket),   //   input,   width = 1,           .endofpacket
		.sink_valid         (kbandinput_1_mm_read_limiter_cmd_valid_data),        //   input,  width = 11, sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                           //   input,   width = 1,       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                           //  output,   width = 1,           .valid
		.src0_data          (cmd_demux_002_src0_data),                            //  output,  width = 96,           .data
		.src0_channel       (cmd_demux_002_src0_channel),                         //  output,  width = 11,           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                   //  output,   width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                     //  output,   width = 1,           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                           //   input,   width = 1,       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                           //  output,   width = 1,           .valid
		.src1_data          (cmd_demux_002_src1_data),                            //  output,  width = 96,           .data
		.src1_channel       (cmd_demux_002_src1_channel),                         //  output,  width = 11,           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                   //  output,   width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                      //  output,   width = 1,           .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_2bn4roa cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_003_src_data),                            //   input,  width = 231,          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_003_src0_data),                        //  output,  width = 231,          .data
		.src0_channel       (cmd_demux_003_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                       //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                       //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_003_src1_data),                        //  output,  width = 231,          .data
		.src1_channel       (cmd_demux_003_src1_channel),                     //  output,   width = 11,          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),               //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_g5kheci cmd_demux_004 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_004_src_data),                            //   input,  width = 159,          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_004_src0_data),                        //  output,  width = 159,          .data
		.src0_channel       (cmd_demux_004_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_jj5nmmy cmd_mux (
		.clk                 (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                              //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                               //  output,  width = 123,          .data
		.src_channel         (cmd_mux_src_channel),                            //  output,   width = 11,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //   input,   width = 11,          .channel
		.sink0_data          (cmd_demux_src0_data),                            //   input,  width = 123,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                      //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_jj5nmmy cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                           //  output,  width = 123,          .data
		.src_channel         (cmd_mux_001_src_channel),                        //  output,   width = 11,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //   input,   width = 11,          .channel
		.sink0_data          (cmd_demux_src1_data),                            //   input,  width = 123,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                      //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_jj5nmmy cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                           //  output,  width = 123,          .data
		.src_channel         (cmd_mux_002_src_channel),                        //  output,   width = 11,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //   input,   width = 11,          .channel
		.sink0_data          (cmd_demux_src2_data),                            //   input,  width = 123,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                      //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_xu26tuy cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                                                       //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                      //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                                                //  output,  width = 231,          .data
		.src_channel         (cmd_mux_003_src_channel),                                                             //  output,   width = 11,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_channel),       //   input,   width = 11,          .channel
		.sink0_data          (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_data),          //   input,  width = 231,          .data
		.sink0_startofpacket (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_xu26tuy cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                       //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                                                //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                                                //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                                                                 //  output,  width = 231,          .data
		.src_channel         (cmd_mux_004_src_channel),                                                              //  output,   width = 11,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_channel),       //   input,   width = 11,          .channel
		.sink0_data          (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_data),          //   input,  width = 231,          .data
		.sink0_startofpacket (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_xu26tuy cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                       //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                                                //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                                                //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                                                                 //  output,  width = 231,          .data
		.src_channel         (cmd_mux_005_src_channel),                                                              //  output,   width = 11,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_channel),       //   input,   width = 11,          .channel
		.sink0_data          (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_data),          //   input,  width = 231,          .data
		.sink0_startofpacket (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_3rzdpgq cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                                                //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_006_src_data),                                                         //  output,  width = 123,          .data
		.src_channel         (cmd_mux_006_src_channel),                                                      //  output,   width = 11,          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                                       //   input,   width = 11,          .channel
		.sink0_data          (cmd_demux_src6_data),                                                          //   input,  width = 123,          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                                                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                                                   //   input,    width = 1,          .endofpacket
		.sink1_ready         (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_channel),       //   input,   width = 11,          .channel
		.sink1_data          (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_data),          //   input,  width = 123,          .data
		.sink1_startofpacket (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_jj5nmmy cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_007_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_007_src_data),                           //  output,  width = 123,          .data
		.src_channel         (cmd_mux_007_src_channel),                        //  output,   width = 11,          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                           //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                           //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src7_channel),                         //   input,   width = 11,          .channel
		.sink0_data          (cmd_demux_src7_data),                            //   input,  width = 123,          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                      //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_3rzdpgq cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                                                 //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_008_src_data),                                                          //  output,  width = 123,          .data
		.src_channel         (cmd_mux_008_src_channel),                                                       //  output,   width = 11,          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                                        //   input,   width = 11,          .channel
		.sink0_data          (cmd_demux_src8_data),                                                           //   input,  width = 123,          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                                                    //   input,    width = 1,          .endofpacket
		.sink1_ready         (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_channel),       //   input,   width = 11,          .channel
		.sink1_data          (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_data),          //   input,  width = 123,          .data
		.sink1_startofpacket (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_biwmpiy cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                                      //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                              //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                              //  output,    width = 1,          .valid
		.src_data            (cmd_mux_009_src_data),                                               //  output,  width = 231,          .data
		.src_channel         (cmd_mux_009_src_channel),                                            //  output,   width = 11,          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                        //  output,    width = 1,          .endofpacket
		.sink0_ready         (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_channel),       //   input,   width = 11,          .channel
		.sink0_data          (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_data),          //   input,  width = 231,          .data
		.sink0_startofpacket (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink1_ready         (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_channel),       //   input,   width = 11,          .channel
		.sink1_data          (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_data),          //   input,  width = 231,          .data
		.sink1_startofpacket (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_003_src0_ready),                                           //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_003_src0_valid),                                           //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_003_src0_channel),                                         //   input,   width = 11,          .channel
		.sink2_data          (cmd_demux_003_src0_data),                                            //   input,  width = 231,          .data
		.sink2_startofpacket (cmd_demux_003_src0_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_003_src0_endofpacket)                                      //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_fwjb54a cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                                                           //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                          //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_010_src_data),                                                                    //  output,  width = 231,          .data
		.src_channel         (cmd_mux_010_src_channel),                                                                 //  output,   width = 11,          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_003_src1_ready),                                                                //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_003_src1_valid),                                                                //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_003_src1_channel),                                                              //   input,   width = 11,          .channel
		.sink0_data          (cmd_demux_003_src1_data),                                                                 //   input,  width = 231,          .data
		.sink0_startofpacket (cmd_demux_003_src1_startofpacket),                                                        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src1_endofpacket),                                                          //   input,    width = 1,          .endofpacket
		.sink1_ready         (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_channel),       //   input,   width = 11,          .channel
		.sink1_data          (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_data),          //   input,  width = 231,          .data
		.sink1_startofpacket (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_ffwmbpq rsp_demux (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_005_src_data),                            //   input,  width = 123,          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                            //  output,  width = 123,          .data
		.src0_channel       (rsp_demux_src0_channel),                         //  output,   width = 11,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_ffwmbpq rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_006_src_data),                            //   input,  width = 123,          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //  output,  width = 123,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_ffwmbpq rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_007_src_data),                            //   input,  width = 123,          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //  output,  width = 123,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_g4vtr6a rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_008_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_008_src_data),                            //   input,  width = 231,          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_008_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //  output,  width = 231,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_g4vtr6a rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_009_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_009_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_009_src_data),                            //   input,  width = 231,          .data
		.sink_startofpacket (router_009_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_009_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //  output,  width = 231,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_g4vtr6a rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_010_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_010_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_010_src_data),                            //   input,  width = 231,          .data
		.sink_startofpacket (router_010_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_010_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //  output,  width = 231,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_gkunbeq rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_011_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_011_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_011_src_data),                            //   input,  width = 123,          .data
		.sink_startofpacket (router_011_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_011_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //  output,  width = 123,          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                       //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                       //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_006_src1_data),                        //  output,  width = 123,          .data
		.src1_channel       (rsp_demux_006_src1_channel),                     //  output,   width = 11,          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),               //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_ffwmbpq rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_012_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_012_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_012_src_data),                            //   input,  width = 123,          .data
		.sink_startofpacket (router_012_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_012_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_007_src0_data),                        //  output,  width = 123,          .data
		.src0_channel       (rsp_demux_007_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_gkunbeq rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_013_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_013_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_013_src_data),                            //   input,  width = 123,          .data
		.sink_startofpacket (router_013_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_013_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_008_src0_data),                        //  output,  width = 123,          .data
		.src0_channel       (rsp_demux_008_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                       //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                       //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_008_src1_data),                        //  output,  width = 123,          .data
		.src1_channel       (rsp_demux_008_src1_channel),                     //  output,   width = 11,          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),               //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_uqah77y rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_014_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_014_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_014_src_data),                            //   input,  width = 231,          .data
		.sink_startofpacket (router_014_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_014_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_009_src0_data),                        //  output,  width = 231,          .data
		.src0_channel       (rsp_demux_009_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                       //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                       //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_009_src1_data),                        //  output,  width = 231,          .data
		.src1_channel       (rsp_demux_009_src1_channel),                     //  output,   width = 11,          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),               //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),                 //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),                       //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),                       //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_009_src2_data),                        //  output,  width = 231,          .data
		.src2_channel       (rsp_demux_009_src2_channel),                     //  output,   width = 11,          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),               //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_demultiplexer_191_2bn4roa rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_015_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_015_src_channel),                         //   input,   width = 11,          .channel
		.sink_data          (router_015_src_data),                            //   input,  width = 231,          .data
		.sink_startofpacket (router_015_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_015_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_010_src0_data),                        //  output,  width = 231,          .data
		.src0_channel       (rsp_demux_010_src0_channel),                     //  output,   width = 11,          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                       //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                       //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_010_src1_data),                        //  output,  width = 231,          .data
		.src1_channel       (rsp_demux_010_src1_channel),                     //  output,   width = 11,          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),               //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_htvhovy rsp_mux (
		.clk                 (clk_0_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                       //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                    //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                    //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                                     //  output,  width = 123,          .data
		.src_channel         (rsp_mux_src_channel),                                                                  //  output,   width = 11,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                                 //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                               //   input,   width = 11,          .channel
		.sink0_data          (rsp_demux_src0_data),                                                                  //   input,  width = 123,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                             //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                             //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                                           //   input,   width = 11,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                              //   input,  width = 123,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                                     //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                                       //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                             //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                             //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                                           //   input,   width = 11,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                              //   input,  width = 123,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                                     //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                                       //   input,    width = 1,          .endofpacket
		.sink3_ready         (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_ready),          //  output,    width = 1,     sink3.ready
		.sink3_valid         (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_valid),          //   input,    width = 1,          .valid
		.sink3_channel       (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_channel),        //   input,   width = 11,          .channel
		.sink3_data          (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_data),           //   input,  width = 123,          .data
		.sink3_startofpacket (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_endofpacket),    //   input,    width = 1,          .endofpacket
		.sink4_ready         (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink4.ready
		.sink4_valid         (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink4_channel       (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_channel),       //   input,   width = 11,          .channel
		.sink4_data          (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_data),          //   input,  width = 123,          .data
		.sink4_startofpacket (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink5_ready         (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink5.ready
		.sink5_valid         (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink5_channel       (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_channel),       //   input,   width = 11,          .channel
		.sink5_data          (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_data),          //   input,  width = 123,          .data
		.sink5_startofpacket (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                                                             //  output,    width = 1,     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                                                             //   input,    width = 1,          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                                                           //   input,   width = 11,          .channel
		.sink6_data          (rsp_demux_006_src0_data),                                                              //   input,  width = 123,          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                                                     //   input,    width = 1,          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                                                       //   input,    width = 1,          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                                                             //  output,    width = 1,     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                                                             //   input,    width = 1,          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                                                           //   input,   width = 11,          .channel
		.sink7_data          (rsp_demux_007_src0_data),                                                              //   input,  width = 123,          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                                                     //   input,    width = 1,          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),                                                       //   input,    width = 1,          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                                                             //  output,    width = 1,     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                                                             //   input,    width = 1,          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                                                           //   input,   width = 11,          .channel
		.sink8_data          (rsp_demux_008_src0_data),                                                              //   input,  width = 123,          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),                                                     //   input,    width = 1,          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket)                                                        //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_noxw2wy rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                                 //   input,   width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                         //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                         //  output,   width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                          //  output,  width = 96,          .data
		.src_channel         (rsp_mux_001_src_channel),                                                       //  output,  width = 11,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                 //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                   //  output,   width = 1,          .endofpacket
		.sink0_ready         (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_ready),         //  output,   width = 1,     sink0.ready
		.sink0_valid         (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_valid),         //   input,   width = 1,          .valid
		.sink0_channel       (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_channel),       //   input,  width = 11,          .channel
		.sink0_data          (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_data),          //   input,  width = 96,          .data
		.sink0_startofpacket (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink1_ready         (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_ready),                    //  output,   width = 1,     sink1.ready
		.sink1_valid         (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_valid),                    //   input,   width = 1,          .valid
		.sink1_channel       (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_channel),                  //   input,  width = 11,          .channel
		.sink1_data          (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_data),                     //   input,  width = 96,          .data
		.sink1_startofpacket (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_startofpacket),            //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_endofpacket)               //   input,   width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_noxw2wy rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                                                //   input,   width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                               //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                        //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                        //  output,   width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                                                         //  output,  width = 96,          .data
		.src_channel         (rsp_mux_002_src_channel),                                                      //  output,  width = 11,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                                //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                                  //  output,   width = 1,          .endofpacket
		.sink0_ready         (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_ready),         //  output,   width = 1,     sink0.ready
		.sink0_valid         (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_valid),         //   input,   width = 1,          .valid
		.sink0_channel       (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_channel),       //   input,  width = 11,          .channel
		.sink0_data          (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_data),          //   input,  width = 96,          .data
		.sink0_startofpacket (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink1_ready         (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_ready),                   //  output,   width = 1,     sink1.ready
		.sink1_valid         (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_valid),                   //   input,   width = 1,          .valid
		.sink1_channel       (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_channel),                 //   input,  width = 11,          .channel
		.sink1_data          (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_data),                    //   input,  width = 96,          .data
		.sink1_startofpacket (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_startofpacket),           //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_endofpacket)              //   input,   width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_yoxojka rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_003_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (rsp_mux_003_src_data),                           //  output,  width = 231,          .data
		.src_channel         (rsp_mux_003_src_channel),                        //  output,   width = 11,          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_009_src2_ready),                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_009_src2_valid),                       //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_009_src2_channel),                     //   input,   width = 11,          .channel
		.sink0_data          (rsp_demux_009_src2_data),                        //   input,  width = 231,          .data
		.sink0_startofpacket (rsp_demux_009_src2_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_009_src2_endofpacket),                 //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_010_src0_ready),                       //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_010_src0_valid),                       //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_010_src0_channel),                     //   input,   width = 11,          .channel
		.sink1_data          (rsp_demux_010_src0_data),                        //   input,  width = 231,          .data
		.sink1_startofpacket (rsp_demux_010_src0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_010_src0_endofpacket)                  //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_multiplexer_191_r5cbqgy rsp_mux_004 (
		.clk                 (clk_0_clk_clk),                                                                           //   input,    width = 1,       clk.clk
		.reset               (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                          //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_004_src_data),                                                                    //  output,  width = 159,          .data
		.src_channel         (rsp_mux_004_src_channel),                                                                 //  output,   width = 11,          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_channel),       //   input,   width = 11,          .channel
		.sink0_data          (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_data),          //   input,  width = 159,          .data
		.sink0_startofpacket (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_lh3v6mi #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (83),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (86),
		.IN_PKT_BURST_SIZE_L           (84),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (88),
		.IN_PKT_BURST_TYPE_L           (87),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (123),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (194),
		.OUT_PKT_BURST_SIZE_L          (192),
		.OUT_PKT_RESPONSE_STATUS_H     (218),
		.OUT_PKT_RESPONSE_STATUS_L     (217),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (196),
		.OUT_PKT_BURST_TYPE_L          (195),
		.OUT_PKT_ORI_BURST_SIZE_L      (219),
		.OUT_PKT_ORI_BURST_SIZE_H      (221),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                       //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                      //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src3_valid),                                                                //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src3_channel),                                                              //   input,   width = 11,          .channel
		.in_startofpacket     (cmd_demux_src3_startofpacket),                                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src3_endofpacket),                                                          //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src3_ready),                                                                //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src3_data),                                                                 //   input,  width = 123,          .data
		.out_endofpacket      (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_data),          //  output,  width = 231,          .data
		.out_channel          (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (mm_bridge_lw_m0_to_kbandoutput_descriptor_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_lh3v6mi #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (83),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (86),
		.IN_PKT_BURST_SIZE_L           (84),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (88),
		.IN_PKT_BURST_TYPE_L           (87),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (123),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (194),
		.OUT_PKT_BURST_SIZE_L          (192),
		.OUT_PKT_RESPONSE_STATUS_H     (218),
		.OUT_PKT_RESPONSE_STATUS_L     (217),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (196),
		.OUT_PKT_BURST_TYPE_L          (195),
		.OUT_PKT_ORI_BURST_SIZE_L      (219),
		.OUT_PKT_ORI_BURST_SIZE_H      (221),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                       //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src4_valid),                                                                 //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src4_channel),                                                               //   input,   width = 11,          .channel
		.in_startofpacket     (cmd_demux_src4_startofpacket),                                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src4_endofpacket),                                                           //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src4_ready),                                                                 //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src4_data),                                                                  //   input,  width = 123,          .data
		.out_endofpacket      (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_data),          //  output,  width = 231,          .data
		.out_channel          (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (mm_bridge_lw_m0_to_kbandinput_1_descriptor_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_lh3v6mi #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (83),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (86),
		.IN_PKT_BURST_SIZE_L           (84),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (88),
		.IN_PKT_BURST_TYPE_L           (87),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (123),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (194),
		.OUT_PKT_BURST_SIZE_L          (192),
		.OUT_PKT_RESPONSE_STATUS_H     (218),
		.OUT_PKT_RESPONSE_STATUS_L     (217),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (196),
		.OUT_PKT_BURST_TYPE_L          (195),
		.OUT_PKT_ORI_BURST_SIZE_L      (219),
		.OUT_PKT_ORI_BURST_SIZE_H      (221),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                       //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src5_valid),                                                                 //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src5_channel),                                                               //   input,   width = 11,          .channel
		.in_startofpacket     (cmd_demux_src5_startofpacket),                                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src5_endofpacket),                                                           //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src5_ready),                                                                 //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src5_data),                                                                  //   input,  width = 123,          .data
		.out_endofpacket      (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_data),          //  output,  width = 231,          .data
		.out_channel          (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (mm_bridge_lw_m0_to_kbandinput_2_descriptor_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_aesn73i #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (96),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (86),
		.OUT_PKT_BURST_SIZE_L          (84),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (88),
		.OUT_PKT_BURST_TYPE_L          (87),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (123),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                      //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                    //   input,   width = 11,          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                      //  output,    width = 1,          .ready
		.in_data              (cmd_demux_001_src0_data),                                                       //   input,   width = 96,          .data
		.out_endofpacket      (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_data),          //  output,  width = 123,          .data
		.out_channel          (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (kbandinput_2_mm_read_to_onchip_mem_lw2_s1_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_to6zd2a #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (96),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (194),
		.OUT_PKT_BURST_SIZE_L          (192),
		.OUT_PKT_RESPONSE_STATUS_H     (218),
		.OUT_PKT_RESPONSE_STATUS_L     (217),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (196),
		.OUT_PKT_BURST_TYPE_L          (195),
		.OUT_PKT_ORI_BURST_SIZE_L      (219),
		.OUT_PKT_ORI_BURST_SIZE_H      (221),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                           //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                         //   input,   width = 11,          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                           //  output,    width = 1,          .ready
		.in_data              (cmd_demux_001_src1_data),                                            //   input,   width = 96,          .data
		.out_endofpacket      (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_data),          //  output,  width = 231,          .data
		.out_channel          (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (kbandinput_2_mm_read_to_ddr_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_aesn73i #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (96),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (86),
		.OUT_PKT_BURST_SIZE_L          (84),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (88),
		.OUT_PKT_BURST_TYPE_L          (87),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (123),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                                     //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                                   //   input,   width = 11,          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                                     //  output,    width = 1,          .ready
		.in_data              (cmd_demux_002_src0_data),                                                      //   input,   width = 96,          .data
		.out_endofpacket      (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_data),          //  output,  width = 123,          .data
		.out_channel          (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (kbandinput_1_mm_read_to_onchip_mem_lw_s1_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_to6zd2a #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (96),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (194),
		.OUT_PKT_BURST_SIZE_L          (192),
		.OUT_PKT_RESPONSE_STATUS_H     (218),
		.OUT_PKT_RESPONSE_STATUS_L     (217),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (196),
		.OUT_PKT_BURST_TYPE_L          (195),
		.OUT_PKT_ORI_BURST_SIZE_L      (219),
		.OUT_PKT_ORI_BURST_SIZE_H      (221),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_002_src1_valid),                                           //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_002_src1_channel),                                         //   input,   width = 11,          .channel
		.in_startofpacket     (cmd_demux_002_src1_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_002_src1_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_002_src1_ready),                                           //  output,    width = 1,          .ready
		.in_data              (cmd_demux_002_src1_data),                                            //   input,   width = 96,          .data
		.out_endofpacket      (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_data),          //  output,  width = 231,          .data
		.out_channel          (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (kbandinput_1_mm_read_to_ddr_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_qito46y #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (119),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (122),
		.IN_PKT_BURST_SIZE_L           (120),
		.IN_PKT_RESPONSE_STATUS_H      (146),
		.IN_PKT_RESPONSE_STATUS_L      (145),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (124),
		.IN_PKT_BURST_TYPE_L           (123),
		.IN_PKT_ORI_BURST_SIZE_L       (147),
		.IN_PKT_ORI_BURST_SIZE_H       (149),
		.IN_ST_DATA_W                  (159),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (194),
		.OUT_PKT_BURST_SIZE_L          (192),
		.OUT_PKT_RESPONSE_STATUS_H     (218),
		.OUT_PKT_RESPONSE_STATUS_L     (217),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (196),
		.OUT_PKT_BURST_TYPE_L          (195),
		.OUT_PKT_ORI_BURST_SIZE_L      (219),
		.OUT_PKT_ORI_BURST_SIZE_H      (221),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                           //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                          //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_004_src0_valid),                                                                //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_004_src0_channel),                                                              //   input,   width = 11,          .channel
		.in_startofpacket     (cmd_demux_004_src0_startofpacket),                                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_004_src0_endofpacket),                                                          //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_004_src0_ready),                                                                //  output,    width = 1,          .ready
		.in_data              (cmd_demux_004_src0_data),                                                                 //   input,  width = 159,          .data
		.out_endofpacket      (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_data),          //  output,  width = 231,          .data
		.out_channel          (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (mm_bridge_fpga_slave_m0_to_onchip_mem_fpga_slave_s1_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                   // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_7lpcddq #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (191),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (194),
		.IN_PKT_BURST_SIZE_L           (192),
		.IN_PKT_RESPONSE_STATUS_H      (218),
		.IN_PKT_RESPONSE_STATUS_L      (217),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (196),
		.IN_PKT_BURST_TYPE_L           (195),
		.IN_PKT_ORI_BURST_SIZE_L       (219),
		.IN_PKT_ORI_BURST_SIZE_H       (221),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (86),
		.OUT_PKT_BURST_SIZE_L          (84),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (88),
		.OUT_PKT_BURST_TYPE_L          (87),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (123),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                       //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                      //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_003_src0_valid),                                                            //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_003_src0_channel),                                                          //   input,   width = 11,          .channel
		.in_startofpacket     (rsp_demux_003_src0_startofpacket),                                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_003_src0_endofpacket),                                                      //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_003_src0_ready),                                                            //  output,    width = 1,          .ready
		.in_data              (rsp_demux_003_src0_data),                                                             //   input,  width = 231,          .data
		.out_endofpacket      (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_data),          //  output,  width = 123,          .data
		.out_channel          (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (kbandoutput_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_7lpcddq #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (191),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (194),
		.IN_PKT_BURST_SIZE_L           (192),
		.IN_PKT_RESPONSE_STATUS_H      (218),
		.IN_PKT_RESPONSE_STATUS_L      (217),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (196),
		.IN_PKT_BURST_TYPE_L           (195),
		.IN_PKT_ORI_BURST_SIZE_L       (219),
		.IN_PKT_ORI_BURST_SIZE_H       (221),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (86),
		.OUT_PKT_BURST_SIZE_L          (84),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (88),
		.OUT_PKT_BURST_TYPE_L          (87),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (123),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                       //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_004_src0_valid),                                                             //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_004_src0_channel),                                                           //   input,   width = 11,          .channel
		.in_startofpacket     (rsp_demux_004_src0_startofpacket),                                                     //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_004_src0_endofpacket),                                                       //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_004_src0_ready),                                                             //  output,    width = 1,          .ready
		.in_data              (rsp_demux_004_src0_data),                                                              //   input,  width = 231,          .data
		.out_endofpacket      (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_data),          //  output,  width = 123,          .data
		.out_channel          (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (kbandinput_1_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_7lpcddq #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (191),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (194),
		.IN_PKT_BURST_SIZE_L           (192),
		.IN_PKT_RESPONSE_STATUS_H      (218),
		.IN_PKT_RESPONSE_STATUS_L      (217),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (196),
		.IN_PKT_BURST_TYPE_L           (195),
		.IN_PKT_ORI_BURST_SIZE_L       (219),
		.IN_PKT_ORI_BURST_SIZE_H       (221),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (86),
		.OUT_PKT_BURST_SIZE_L          (84),
		.OUT_PKT_RESPONSE_STATUS_H     (110),
		.OUT_PKT_RESPONSE_STATUS_L     (109),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (88),
		.OUT_PKT_BURST_TYPE_L          (87),
		.OUT_PKT_ORI_BURST_SIZE_L      (111),
		.OUT_PKT_ORI_BURST_SIZE_H      (113),
		.OUT_ST_DATA_W                 (123),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                       //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_005_src0_valid),                                                             //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_005_src0_channel),                                                           //   input,   width = 11,          .channel
		.in_startofpacket     (rsp_demux_005_src0_startofpacket),                                                     //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_005_src0_endofpacket),                                                       //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_005_src0_ready),                                                             //  output,    width = 1,          .ready
		.in_data              (rsp_demux_005_src0_data),                                                              //   input,  width = 231,          .data
		.out_endofpacket      (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_data),          //  output,  width = 123,          .data
		.out_channel          (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (kbandinput_2_descriptor_slave_to_mm_bridge_lw_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_6tr6i2q #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (83),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (86),
		.IN_PKT_BURST_SIZE_L           (84),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (88),
		.IN_PKT_BURST_TYPE_L           (87),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (123),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (96),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_006_src1_valid),                                                     //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_006_src1_channel),                                                   //   input,   width = 11,          .channel
		.in_startofpacket     (rsp_demux_006_src1_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_006_src1_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_006_src1_ready),                                                     //  output,    width = 1,          .ready
		.in_data              (rsp_demux_006_src1_data),                                                      //   input,  width = 123,          .data
		.out_endofpacket      (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_data),          //  output,   width = 96,          .data
		.out_channel          (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_mem_lw_s1_to_kbandinput_1_mm_read_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_6tr6i2q #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (83),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (86),
		.IN_PKT_BURST_SIZE_L           (84),
		.IN_PKT_RESPONSE_STATUS_H      (110),
		.IN_PKT_RESPONSE_STATUS_L      (109),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (88),
		.IN_PKT_BURST_TYPE_L           (87),
		.IN_PKT_ORI_BURST_SIZE_L       (111),
		.IN_PKT_ORI_BURST_SIZE_H       (113),
		.IN_ST_DATA_W                  (123),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (96),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_008_src1_valid),                                                      //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_008_src1_channel),                                                    //   input,   width = 11,          .channel
		.in_startofpacket     (rsp_demux_008_src1_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_008_src1_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_008_src1_ready),                                                      //  output,    width = 1,          .ready
		.in_data              (rsp_demux_008_src1_data),                                                       //   input,  width = 123,          .data
		.out_endofpacket      (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_data),          //  output,   width = 96,          .data
		.out_channel          (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_mem_lw2_s1_to_kbandinput_2_mm_read_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_xkuq5ta #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (191),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (194),
		.IN_PKT_BURST_SIZE_L           (192),
		.IN_PKT_RESPONSE_STATUS_H      (218),
		.IN_PKT_RESPONSE_STATUS_L      (217),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (196),
		.IN_PKT_BURST_TYPE_L           (195),
		.IN_PKT_ORI_BURST_SIZE_L       (219),
		.IN_PKT_ORI_BURST_SIZE_H       (221),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (96),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_009_src0_valid),                                           //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_009_src0_channel),                                         //   input,   width = 11,          .channel
		.in_startofpacket     (rsp_demux_009_src0_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_009_src0_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_009_src0_ready),                                           //  output,    width = 1,          .ready
		.in_data              (rsp_demux_009_src0_data),                                            //   input,  width = 231,          .data
		.out_endofpacket      (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_data),          //  output,   width = 96,          .data
		.out_channel          (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ddr_s0_to_kbandinput_2_mm_read_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_xkuq5ta #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (191),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (194),
		.IN_PKT_BURST_SIZE_L           (192),
		.IN_PKT_RESPONSE_STATUS_H      (218),
		.IN_PKT_RESPONSE_STATUS_L      (217),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (196),
		.IN_PKT_BURST_TYPE_L           (195),
		.IN_PKT_ORI_BURST_SIZE_L       (219),
		.IN_PKT_ORI_BURST_SIZE_H       (221),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (96),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_009_src1_valid),                                           //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_009_src1_channel),                                         //   input,   width = 11,          .channel
		.in_startofpacket     (rsp_demux_009_src1_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_009_src1_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_009_src1_ready),                                           //  output,    width = 1,          .ready
		.in_data              (rsp_demux_009_src1_data),                                            //   input,  width = 231,          .data
		.out_endofpacket      (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_data),          //  output,   width = 96,          .data
		.out_channel          (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ddr_s0_to_kbandinput_1_mm_read_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated),                         
	);

	KBandIPsubPro_altera_merlin_width_adapter_191_23wxfpy #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (191),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (194),
		.IN_PKT_BURST_SIZE_L           (192),
		.IN_PKT_RESPONSE_STATUS_H      (218),
		.IN_PKT_RESPONSE_STATUS_L      (217),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (196),
		.IN_PKT_BURST_TYPE_L           (195),
		.IN_PKT_ORI_BURST_SIZE_L       (219),
		.IN_PKT_ORI_BURST_SIZE_H       (221),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (122),
		.OUT_PKT_BURST_SIZE_L          (120),
		.OUT_PKT_RESPONSE_STATUS_H     (146),
		.OUT_PKT_RESPONSE_STATUS_L     (145),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (124),
		.OUT_PKT_BURST_TYPE_L          (123),
		.OUT_PKT_ORI_BURST_SIZE_L      (147),
		.OUT_PKT_ORI_BURST_SIZE_H      (149),
		.OUT_ST_DATA_W                 (159),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                           //   input,    width = 1,       clk.clk
		.reset                (mm_bridge_LW_reset_reset_bridge_in_reset_reset),                                          //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_010_src1_valid),                                                                //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_010_src1_channel),                                                              //   input,   width = 11,          .channel
		.in_startofpacket     (rsp_demux_010_src1_startofpacket),                                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_010_src1_endofpacket),                                                          //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_010_src1_ready),                                                                //  output,    width = 1,          .ready
		.in_data              (rsp_demux_010_src1_data),                                                                 //   input,  width = 231,          .data
		.out_endofpacket      (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_data),          //  output,  width = 159,          .data
		.out_channel          (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_channel),       //  output,   width = 11,          .channel
		.out_valid            (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (onchip_mem_fpga_slave_s1_to_mm_bridge_fpga_slave_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                   // (terminated),                         
	);

endmodule
